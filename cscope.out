cscope 15 $HOME/fatcache -q 0000004464 0000402402
	@/home/hx/fatcache/src/fc.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<sys/°©.h
>

21 
	~<sys/sockë.h
>

22 
	~<sys/un.h
>

23 
	~<sig«l.h
>

24 
	~<sys/ªsour˚.h
>

25 
	~<sys/uio.h
>

26 
	~<˘y≥.h
>

27 
	~<pwd.h
>

28 
	~<sys/mm™.h
>

29 
	~<f˙é.h
>

30 
	~<gë›t.h
>

32 
	~<fc_c‹e.h
>

34 
	#FC_CHUNK_SIZE
 
ITEM_CHUNK_SIZE


	)

35 
	#FC_SLAB_SIZE
 
SLAB_SIZE


	)

37 
	#FC_DAEMONIZE
 
Ál£


	)

39 
	#FC_LOG_FILE
 
NULL


	)

40 
	#FC_LOG_DEFAULT
 
LOG_INFO


	)

41 
	#FC_LOG_MIN
 
LOG_EMERG


	)

42 
	#FC_LOG_MAX
 
LOG_PVERB


	)

44 
	#FC_PORT
 11211

	)

45 
	#FC_ADDR
 "0.0.0.0"

	)

47 
	#FC_HASH_POWER
 
ITEMX_HASH_POWER


	)

49 
	#FC_FACTOR
 1.25

	)

51 
	#FC_INDEX_MEMORY
 (64 * 
MB
)

	)

52 
	#FC_SLAB_MEMORY
 (64 * 
MB
)

	)

54 
	#FC_SERVER_ID
 0

	)

55 
	#FC_SERVER_N
 1

	)

57 
£âögs
 
	g£âögs
;

58 
	gshow_hñp
;

59 
	gshow_vîsi⁄
;

60 
	gshow_sizes
;

61 
	g∑r£_¥ofûe
;

62 
uöt8_t
 *
	g¥ofûe_›èrg
;

64 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

65 { "hñp", 
no_¨gumít
, 
NULL
, 'h' },

66 { "vîsi⁄", 
no_¨gumít
, 
NULL
, 'V' },

67 { "d´m⁄ize", 
no_¨gumít
, 
NULL
, 'd' },

68 { "show-sizes", 
no_¨gumít
, 
NULL
, 'S' },

69 { "ouçut", 
ªquúed_¨gumít
, 
NULL
, 'o' },

70 { "vîbosôy", 
ªquúed_¨gumít
, 
NULL
, 'v' },

71 { "p‹t", 
ªquúed_¨gumít
, 
NULL
, 'p' },

72 { "addr", 
ªquúed_¨gumít
, 
NULL
, 'a' },

73 { "hash-powî", 
ªquúed_¨gumít
, 
NULL
, 'e' },

74 { "Á˘‹", 
ªquúed_¨gumít
, 
NULL
, 'f' },

75 { "mö-ôem-chunk-size", 
ªquúed_¨gumít
, 
NULL
, 'n' },

76 { "¶ab-size", 
ªquúed_¨gumít
, 
NULL
, 'I' },

77 { "max-ödex-mem‹y", 
ªquúed_¨gumít
, 
NULL
, 'i' },

78 { "max-¶ab-mem‹y", 
ªquúed_¨gumít
, 
NULL
, 'm' },

79 { "¶ab-¥ofûe", 
ªquúed_¨gumít
, 
NULL
, 'z' },

80 { "ssd-devi˚", 
ªquúed_¨gumít
, 
NULL
, 'D' },

81 { "£rvî-id", 
ªquúed_¨gumít
, 
NULL
, 's' },

82 { 
NULL
, 0, NULL, 0 }

85 
	gsh‹t_›ti⁄s
[] =

106 
	$fc_show_ußge
()

108 
	`log_°dîr
(

109 "Ußge: f©ˇchê[-?hVdS] [-ÿouçuàfûe] [-v vîbosôyÜevñ]" 
CRLF


110 " [-∞p‹t] [-®addr] [-êhashÖowî]" 
CRLF


111 " [-‡Á˘‹] [-¿mö iãm chunk size] [-I sœb size]" 
CRLF


112 " [-òmax index mem‹y[ [-m max sœb mem‹y]" 
CRLF


113 " [-z sœbÖrofûe] [-D ssd devi˚] [-†£rvî id]" 
CRLF


116 
	`log_°dîr
(

117 "O±i⁄s:" 
CRLF


118 " -h, --hñ∞ :Åhi†hñp" 
CRLF


119 " -V, --vîsi⁄ : show vîsi⁄ándÉxô" 
CRLF


120 " -d, --d´m⁄izê :Ñu¿a†®d´m⁄" 
CRLF


124 
	`log_°dîr
(

125 " -o, --ouçut=S : sëÅhêloggög fûê(deÁu…: %s)" 
CRLF


126 " -v, --vîbosôy=N : sëÅhêloggögÜevñ (deÁu…: %d, mö: %d, max: %d)" 
CRLF


127 " -p, --p‹t=N : sëÅhêp‹àtÿli°í o¿(deÁu…: %d)" 
CRLF


128 " -a, --addr=S : sëÅhêaddªs†tÿli°í o¿(deÁu…: %s)" 
CRLF


131 
FC_LOG_FILE
 !
NULL
 ? FC_LOG_FILE : "stderr",

132 
FC_LOG_DEFAULT
, 
FC_LOG_MIN
, 
FC_LOG_MAX
,

133 
FC_PORT
, 
FC_ADDR
,

134 
FC_HASH_POWER
);

136 
	`log_°dîr
(

137 " -f, --Á˘‹=D : sëÅhêgrowth fa˘‹ o‡¶ab iãm size†(deÁu…: %g)" 
CRLF


138 " -n, --mö-ôem-chunk-size=N : sëÅhêmöimum iãm chunk sizêö byã†(deÁu…: %d byãs)" 
CRLF


139 " -I, --¶ab-size=N : së sœb sizêö byã†(deÁu…: %d byãs)" 
CRLF


140 " -i, --max-ödex-mem‹y=N : sëÅhêmaximum mem‹yÅÿu£ f‹ iãm indexe†ö MB (deÁu…: %d MB)" 
CRLF


143 
FC_FACTOR
,

144 
FC_CHUNK_SIZE
,

145 
SLAB_SIZE
,

146 
FC_INDEX_MEMORY
 / 
MB
,

147 
FC_SLAB_MEMORY
 / 
MB
);

148 
	`log_°dîr
(

149 " -z, --¶ab-¥ofûe=S : sëÅhê¥ofûêo‡¶ab iãm chunk size†(deÁu…:Ç/a)" 
CRLF


150 " -D, --ssd-devi˚=S : sëÅhê∑thÅÿthêssd devi˚ fûê(deÁu…:Ç/a)" 
CRLF


151 " -s, --£rvî-id=I/N : së f©ˇchêö°™˚ÅÿbêI ouào‡tŸÆ N in°™˚†(deÁu…: %d/%d)" 
CRLF


153 
FC_SERVER_ID
, 
FC_SERVER_N
);

154 
	}
}

156 
r°©us_t


157 
	$fc_d´m⁄ize
(
dump_c‹e
)

159 
r°©us_t
 
°©us
;

160 
pid_t
 
pid
, 
sid
;

161 
fd
;

164 
pid
 = 
	`f‹k
();

165 
pid
) {

167 
	`log_îr‹
("f‹k(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

168  
FC_ERROR
;

175 
	`_exô
(0);

179 
sid
 = 
	`£tsid
();

180 i‡(
sid
 < 0) {

181  
FC_ERROR
;

184 i‡(
	`sig«l
(
SIGHUP
, 
SIG_IGN
Ë=
SIG_ERR
) {

185 
	`log_îr‹
("sig«l(SIGHUP, SIG_IGNËÁûed: %s", 
	`°ªº‹
(
î∫o
));

186  
FC_ERROR
;

190 
pid
 = 
	`f‹k
();

191 
pid
) {

193 
	`log_îr‹
("f‹k(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

194  
FC_ERROR
;

201 
	`_exô
(0);

205 i‡(
dump_c‹e
 == 0) {

206 
°©us
 = 
	`chdú
("/");

207 i‡(
°©us
 < 0) {

208 
	`log_îr‹
("chdú(\"/\"ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

209  
FC_ERROR
;

214 
	`umask
(0);

218 
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
);

219 i‡(
fd
 < 0) {

220 
	`log_îr‹
("›í(\"/dev/nuŒ\"ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

221  
FC_ERROR
;

224 
°©us
 = 
	`dup2
(
fd
, 
STDIN_FILENO
);

225 i‡(
°©us
 < 0) {

226 
	`log_îr‹
("dup2(%d, STDINËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

227 
	`˛o£
(
fd
);

228  
FC_ERROR
;

231 
°©us
 = 
	`dup2
(
fd
, 
STDOUT_FILENO
);

232 i‡(
°©us
 < 0) {

233 
	`log_îr‹
("dup2(%d, STDOUTËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

234 
	`˛o£
(
fd
);

235  
FC_ERROR
;

238 
°©us
 = 
	`dup2
(
fd
, 
STDERR_FILENO
);

239 i‡(
°©us
 < 0) {

240 
	`log_îr‹
("dup2(%d, STDERRËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

241 
	`˛o£
(
fd
);

242  
FC_ERROR
;

245 i‡(
fd
 > 
STDERR_FILENO
) {

246 
°©us
 = 
	`˛o£
(
fd
);

247 i‡(
°©us
 < 0) {

248 
	`log_îr‹
("˛o£(%dËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

249  
FC_ERROR
;

253  
FC_OK
;

254 
	}
}

257 
	$fc_£t_deÁu…_›ti⁄s
()

259 
£âögs
.
d´m⁄ize
 = 
FC_DAEMONIZE
;

261 
£âögs
.
log_fûíame
 = 
FC_LOG_FILE
;

262 
£âögs
.
vîbo£
 = 
FC_LOG_DEFAULT
;

264 
£âögs
.
p‹t
 = 
FC_PORT
;

265 
£âögs
.
addr
 = 
FC_ADDR
;

266 
£âögs
.
hash_powî
 = 
FC_HASH_POWER
;

268 
£âögs
.
Á˘‹
 = 
FC_FACTOR
;

269 
£âögs
.
max_ödex_mem‹y
 = 
FC_INDEX_MEMORY
;

270 
£âögs
.
max_¶ab_mem‹y
 = 
FC_SLAB_MEMORY
;

271 
£âögs
.
chunk_size
 = 
FC_CHUNK_SIZE
;

272 
£âögs
.
¶ab_size
 = 
FC_SLAB_SIZE
;

274 
	`mem£t
(
£âögs
.
¥ofûe
, 0, (settings.profile));

275 
£âögs
.
¥ofûe_œ°_id
 = 
SLABCLASS_MAX_ID
;

277 
£âögs
.
ssd_devi˚
 = 
NULL
;

279 
£âögs
.
£rvî_id
 = 
FC_SERVER_ID
;

280 
£âögs
.
£rvî_n
 = 
FC_SERVER_N
;

281 
	}
}

283 
r°©us_t


284 
	$fc_gë_›ti⁄s
(
¨gc
, **
¨gv
)

286 
c
, 
vÆue
;

287 *
pos
;

289 
›ãº
 = 0;

292 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, 
NULL
);

293 i‡(
c
 == -1) {

298 
c
) {

300 
show_vîsi⁄
 = 1;

301 
show_hñp
 = 1;

305 
show_vîsi⁄
 = 1;

309 
£âögs
.
d´m⁄ize
 = 
åue
;

313 
show_sizes
 = 1;

314 
show_vîsi⁄
 = 1;

318 
£âögs
.
log_fûíame
 = 
›èrg
;

322 
vÆue
 = 
	`fc_©oi
(
›èrg
, 
	`°æí
(optarg));

323 i‡(
vÆue
 < 0) {

324 
	`log_°dîr
("fatcache: option -vÑequiresáÇumber");

325  
FC_ERROR
;

328 
£âögs
.
vîbo£
 = 
vÆue
;

332 
vÆue
 = 
	`fc_©oi
(
›èrg
, 
	`°æí
(optarg));

333 i‡(
vÆue
 <= 0) {

334 
	`log_°dîr
("fatcache: option -pÑequiresáÇon zeroÇumber");

335  
FC_ERROR
;

338 i‡(!
	`fc_vÆid_p‹t
(
vÆue
)) {

339 
	`log_°dîr
("fatcache: option -p value %d isÇotá validÖort ",

340 
vÆue
);

343 
£âögs
.
p‹t
 = 
vÆue
;

347 
£âögs
.
addr
 = 
›èrg
;

351 
vÆue
 = 
	`fc_©oi
(
›èrg
, 
	`°æí
(optarg));

352 i‡(
vÆue
 <= 0) {

353 
	`log_°dîr
("fatcache: option -eÑequiresáÖositiveÇumber");

354  
FC_ERROR
;

357 
£âögs
.
hash_powî
 = 
vÆue
;

361 
£âögs
.
Á˘‹
 = 
	`©of
(
›èrg
);

362 i‡(
£âögs
.
Á˘‹
 <= 1.0) {

363 
	`log_°dîr
("fatcache: factor must be greaterÅhan 1.0");

364  
FC_ERROR
;

369 
vÆue
 = 
	`fc_©oi
(
›èrg
, 
	`°æí
(optarg));

370 i‡(
vÆue
 <= 0) {

371 
	`log_°dîr
("fatcache: option -nÑequiresáÇon zeroÇumber");

372  
FC_ERROR
;

375 i‡(
vÆue
 < 
ITEM_MIN_CHUNK_SIZE
) {

376 
	`log_°dîr
("fatcache: minimum item chunk size cannot beÜess "

377 "th™ %zu", 
ITEM_MIN_CHUNK_SIZE
);

378  
FC_ERROR
;

381 i‡(
vÆue
 % 
FC_ALIGNMENT
 != 0) {

382 
	`log_°dîr
("fatcache: minimum item chunk size must be %zu "

383 "byã†Æig√d", 
FC_ALIGNMENT
);

384  
FC_ERROR
;

387 
£âögs
.
chunk_size
 = 
vÆue
;

391 
vÆue
 = 
	`fc_©oi
(
›èrg
, 
	`°æí
(optarg));

392 i‡(
vÆue
 <= 0) {

393 
	`log_°dîr
("fatcache: option -IÑequiresáÇon zeroÇumber");

394  
FC_ERROR
;

397 
£âögs
.
¶ab_size
 = (
size_t
)
vÆue
 * 
MB
;

399 i‡(
£âögs
.
¶ab_size
 < 
SLAB_MIN_SIZE
) {

400 
	`log_°dîr
("fatcache: slab size must beátÜeast %zu bytes",

401 
SLAB_MIN_SIZE
);

402  
FC_ERROR
;

405 i‡(
£âögs
.
¶ab_size
 > 
SLAB_MAX_SIZE
) {

406 
	`log_°dîr
("fatcache: slab size cannot beÜargerÅhan %zu "

407 "byãs", 
SLAB_MAX_SIZE
);

408  
FC_ERROR
;

414 
vÆue
 = 
	`fc_©oi
(
›èrg
, 
	`°æí
(optarg));

415 i‡(
vÆue
 <= 0) {

416 
	`log_°dîr
("fatcache: option -iÑequiresáÇon zeroÇumber");

417  
FC_ERROR
;

420 
£âögs
.
max_ödex_mem‹y
 = (
size_t
)
vÆue
 * 
MB
;

424 
vÆue
 = 
	`fc_©oi
(
›èrg
, 
	`°æí
(optarg));

425 i‡(
vÆue
 <= 0) {

426 
	`log_°dîr
("fatcache: option -mÑequiresáÇon zeroÇumber");

427  
FC_ERROR
;

430 
£âögs
.
max_¶ab_mem‹y
 = (
size_t
)
vÆue
 * 
MB
;

434 
∑r£_¥ofûe
 = 1;

435 
¥ofûe_›èrg
 = (
uöt8_t
 *)
›èrg
;

439 
£âögs
.
ssd_devi˚
 = 
›èrg
;

443 
pos
 = 
	`°rchr
(
›èrg
, '/');

444 i‡(
pos
 =
NULL
) {

445 
	`log_°dîr
("Átˇche: invÆid sîvî id f‹m© '%s'", 
›èrg
);

446  
FC_ERROR
;

448 *
pos
 = '\0';

450 
vÆue
 = 
	`fc_©oi
(
›èrg
, 
	`°æí
(optarg));

451 i‡(
vÆue
 < 0) {

452 
	`log_°dîr
("Átˇchê: sîvî id i†nŸáÇumbî '%s'", 
›èrg
);

453  
FC_ERROR
;

455 
£âögs
.
£rvî_id
 = (
uöt32_t
)
vÆue
;

457 
›èrg
 = 
pos
 + 1;

459 
vÆue
 = 
	`fc_©oi
(
›èrg
, 
	`°æí
(optarg));

460 i‡(
vÆue
 < 0) {

461 
	`log_°dîr
("Átˇche:Çumbî o‡£rvî i†nŸáÇumbî '%s'", 
›èrg
);

462  
FC_ERROR
;

464 
£âögs
.
£rvî_n
 = (
uöt32_t
)
vÆue
;

466 i‡(
£âögs
.
£rvî_id
 >£âögs.
£rvî_n
) {

467 
	`log_°dîr
("fatcache: server id must beÜessÅhanÇumber of server");

468  
FC_ERROR
;

474 
›t›t
) {

477 
	`log_°dîr
("Átˇche: o±i⁄ -%¯ªquúe†®fûê«me", 
›t›t
);

488 
	`log_°dîr
("Átˇche: o±i⁄ -%¯ªquúe†®numbî", 
›t›t
);

494 
	`log_°dîr
("Átˇche: o±i⁄ -%¯ªquúe†®°rög", 
›t›t
);

498 
	`log_°dîr
("Átˇche: invÆid o±i⁄ -- '%c'", 
›t›t
);

502  
FC_ERROR
;

505 
	`log_°dîr
("Átˇche: invÆid o±i⁄ -- '%c'", 
›t›t
);

506  
FC_ERROR
;

510  
FC_OK
;

511 
	}
}

518 
r°©us_t


519 
	$fc_gíî©e_¥ofûe
()

521 
size_t
 *
¥ofûe
 = 
£âögs
.profile;

522 
uöt8_t
 
id
;

523 
size_t
 
ôem_sz
, 
œ°_ôem_sz
;

524 
size_t
 
mö_ôem_sz
, 
max_ôem_sz
;

526 
	`ASSERT
(
£âögs
.
chunk_size
 % 
FC_ALIGNMENT
 == 0);

527 
	`ASSERT
(
£âögs
.
chunk_size
 <
	`¶ab_d©a_size
());

529 
mö_ôem_sz
 = 
£âögs
.
chunk_size
;

530 
max_ôem_sz
 = 
	`¶ab_d©a_size
();

531 
id
 = 
SLABCLASS_MIN_ID
;

532 
ôem_sz
 = 
mö_ôem_sz
;

534 
id
 < 
SLABCLASS_MAX_ID
 && 
ôem_sz
 < 
max_ôem_sz
) {

536 
œ°_ôem_sz
 = 
ôem_sz
;

537 
¥ofûe
[
id
] = 
ôem_sz
;

538 
id
++;

541 
ôem_sz
 *
£âögs
.
Á˘‹
;

542 i‡(
ôem_sz
 =
œ°_ôem_sz
) {

543 
ôem_sz
++;

545 
ôem_sz
 = 
	`FC_ALIGN
(ôem_sz, 
FC_ALIGNMENT
);

549 
¥ofûe
[
id
] = 
max_ôem_sz
;

550 
£âögs
.
¥ofûe_œ°_id
 = 
id
;

551 
£âögs
.
max_chunk_size
 = 
max_ôem_sz
;

553  
FC_OK
;

554 
	}
}

560 
r°©us_t


561 
	$fc_∑r£_¥ofûe
()

563 
size_t
 *
¥ofûe
;

564 
uöt8_t
 
id
, *
±r
, *
œ°
;

565 
boﬁ
 
eos
;

567 
¥ofûe
 = 
£âögs
.profile;

568 
±r
 = 
¥ofûe_›èrg
;

569 
œ°
 = 
±r
 + 
	`fc_°æí
(ptr);

570 
eos
 = 
Ál£
;

571 
id
 = 
SLABCLASS_MIN_ID
;

573 
id
 < 
SLABCLASS_MAX_ID
 && !
eos
) {

574 
r°©us_t
 
°©us
;

575 
uöt8_t
 *
comma
;

576 
Àn
;

577 
uöt32_t
 
ôem_sz
;

579 
comma
 = 
	`fc_°rchr
(
±r
, 
œ°
, ',');

580 i‡(
comma
 !
NULL
) {

581 
Àn
 = 
comma
 - 
±r
;

583 
Àn
 = 
	`fc_°æí
(
±r
);

584 
eos
 = 
åue
;

587 
°©us
 = 
	`fc_©ou32
(
±r
, 
Àn
, &
ôem_sz
);

588 i‡(
°©us
 < 0) {

589 
	`log_°dîr
("Átˇche: '%.*s' i†nŸá vÆidÇumbî", 
Àn
, 
±r
);

590  
FC_ERROR
;

593 i‡(
ôem_sz
 % 
FC_ALIGNMENT
 != 0) {

594 
	`log_°dîr
("fatcache: item chunk size must be %zu bytesáligned",

595 
FC_ALIGNMENT
);

596  
FC_ERROR
;

599 i‡(
ôem_sz
 < 
ITEM_MIN_CHUNK_SIZE
) {

600 
	`log_°dîr
("fatcache: item chunk size cannot beÜessÅhan %d "

601 "byãs", 
ITEM_MIN_CHUNK_SIZE
);

602  
FC_ERROR
;

605 i‡(
ôem_sz
 > 
	`¶ab_d©a_size
()) {

606 
	`log_°dîr
("fatcache: item chunk size cannot be moreÅhan %zu "

607 "byãs", 
	`¶ab_d©a_size
());

608  
FC_ERROR
;

611 i‡(
id
 > 
SLABCLASS_MIN_ID
 && 
ôem_sz
 <
¥ofûe
[id - 1]) {

612 
	`log_°dîr
("fatcache: item chunk sizes must beáscendingánd "

613 "> %zu byã†≠¨t", 
FC_ALIGNMENT
);

614  
FC_ERROR
;

617 
¥ofûe
[
id
++] = 
ôem_sz
;

618 
±r
 = 
comma
 + 1;

621 i‡(!
eos
) {

622 
	`log_°dîr
("fatcache:Åoo many sizes, keep it under %d",

623 
SLABCLASS_MAX_IDS
);

624  
FC_ERROR
;

627 
£âögs
.
chunk_size
 = 
¥ofûe
[
SLABCLASS_MIN_ID
];

628 
£âögs
.
¥ofûe_œ°_id
 = 
id
 - 1;

629 
£âögs
.
max_chunk_size
 = 
¥ofûe
[
id
 - 1];

631  
FC_OK
;

632 
	}
}

638 
r°©us_t


639 
	$fc_£t_¥ofûe
()

660 i‡(
∑r£_¥ofûe
) {

661  
	`fc_∑r£_¥ofûe
();

664  
	`fc_gíî©e_¥ofûe
();

665 
	}
}

668 
	$fc_¥öt_sizes
()

670 
	`log_°dîr
("ôemx_sizê%zu", (
ôemx
));

672 
	`log_°dîr
("ôem_hdr_sizê%zu", 
ITEM_HDR_SIZE
);

673 
	`log_°dîr
("ôem_chunk_sizê%zu", 
£âögs
.
chunk_size
);

675 
	`log_°dîr
("¶ab_hdr_sizê%zu", 
SLAB_HDR_SIZE
);

676 
	`log_°dîr
("¶ab_sizê%zu", 
£âögs
.
¶ab_size
);

677 
	`log_°dîr
("¶aböfo_sizê%zu", (
¶aböfo
));

678 
	}
}

681 
	$fc_¥öt
()

683 
	`loga
("%s-%†°¨ãd o¿pid %d", 
PACKAGE
, 
FC_VERSION_STRING
, 
	`gëpid
());

685 
	`loga
("configured with debugÜogs %s,ásserts %s,Öanic %s",

686 
FC_DEBUG_LOG
 ? "enabled" : "disabled",

687 
FC_ASSERT_LOG
 ? "enabled" : "disabled",

688 
FC_ASSERT_PANIC
 ? "enabled" : "disabled");

690 
	`¶ab_¥öt
();

691 
	}
}

694 
	$maö
(
¨gc
, **
¨gv
)

696 
r°©us_t
 
°©us
;

697 
c⁄ãxt
 
˘x
;

699 
	`fc_£t_deÁu…_›ti⁄s
();

701 
°©us
 = 
	`fc_gë_›ti⁄s
(
¨gc
, 
¨gv
);

702 i‡(
°©us
 !
FC_OK
) {

703 
	`fc_show_ußge
();

704 
	`exô
(1);

707 i‡(
show_vîsi⁄
) {

708 
	`log_°dîr
("Thi†i†%s-%s" 
CRLF
, 
PACKAGE
, 
FC_VERSION_STRING
);

710 i‡(
show_hñp
) {

711 
	`fc_show_ußge
();

714 i‡(
show_sizes
) {

715 
	`fc_¥öt_sizes
();

718 
	`exô
(0);

721 i‡(
£âögs
.
d´m⁄ize
) {

722 
°©us
 = 
	`fc_d´m⁄ize
(
Ál£
);

723 i‡(
°©us
 !
FC_OK
) {

724 
	`exô
(1);

728 
°©us
 = 
	`fc_£t_¥ofûe
();

729 i‡(
°©us
 !
FC_OK
) {

730 
	`exô
(1);

733 
°©us
 = 
	`c‹e_öô
();

734 i‡(
°©us
 !
FC_OK
) {

735 
	`exô
(1);

738 
	`fc_¥öt
();

740 
°©us
 = 
	`c‹e_°¨t
(&
˘x
);

741 i‡(
°©us
 !
FC_OK
) {

742 
	`exô
(1);

746 
°©us
 = 
	`c‹e_lo›
(&
˘x
);

747 i‡(
°©us
 !
FC_OK
) {

752 
	`c‹e_°›
(&
˘x
);

755 
	}
}

	@/home/hx/fatcache/src/fc_array.c

18 
	~<°dlib.h
>

20 
	~<fc_c‹e.h
>

22 
¨øy
 *

23 
	$¨øy_¸óã
(
uöt32_t
 
n
, 
size_t
 
size
)

25 
¨øy
 *
a
;

27 
	`ASSERT
(
n
 !0 && 
size
 != 0);

29 
a
 = 
	`fc_Æloc
((*a));

30 i‡(
a
 =
NULL
) {

31  
NULL
;

34 
a
->
ñem
 = 
	`fc_Æloc
(
n
 * 
size
);

35 i‡(
a
->
ñem
 =
NULL
) {

36 
	`fc_‰ì
(
a
);

37  
NULL
;

40 
a
->
√Àm
 = 0;

41 
a
->
size
 = size;

42 
a
->
«Œoc
 = 
n
;

44  
a
;

45 
	}
}

48 
	$¨øy_de°roy
(
¨øy
 *
a
)

50 
	`¨øy_deöô
(
a
);

51 
	`fc_‰ì
(
a
);

52 
	}
}

54 
r°©us_t


55 
	$¨øy_öô
(
¨øy
 *
a
, 
uöt32_t
 
n
, 
size_t
 
size
)

57 
	`ASSERT
(
n
 !0 && 
size
 != 0);

59 
a
->
ñem
 = 
	`fc_Æloc
(
n
 * 
size
);

60 i‡(
a
->
ñem
 =
NULL
) {

61  
FC_ENOMEM
;

64 
a
->
√Àm
 = 0;

65 
a
->
size
 = size;

66 
a
->
«Œoc
 = 
n
;

68  
FC_OK
;

69 
	}
}

72 
	$¨øy_deöô
(
¨øy
 *
a
)

74 
	`ASSERT
(
a
->
√Àm
 == 0);

76 i‡(
a
->
ñem
 !
NULL
) {

77 
	`fc_‰ì
(
a
->
ñem
);

79 
	}
}

81 
uöt32_t


82 
	$¨øy_idx
(
¨øy
 *
a
, *
ñem
)

84 
uöt8_t
 *
p
, *
q
;

85 
uöt32_t
 
off
, 
idx
;

87 
	`ASSERT
(
ñem
 >
a
->elem);

89 
p
 = 
a
->
ñem
;

90 
q
 = 
ñem
;

91 
off
 = (
uöt32_t
)(
q
 - 
p
);

93 
	`ASSERT
(
off
 % (
uöt32_t
)
a
->
size
 == 0);

95 
idx
 = 
off
 / (
uöt32_t
)
a
->
size
;

97  
idx
;

98 
	}
}

101 
	$¨øy_push
(
¨øy
 *
a
)

103 *
ñem
, *
√w
;

104 
size_t
 
size
;

106 i‡(
a
->
√Àm
 =a->
«Œoc
) {

109 
size
 = 
a
->sizê*á->
«Œoc
;

110 
√w
 = 
	`fc_ªÆloc
(
a
->
ñem
, 2 * 
size
);

111 i‡(
√w
 =
NULL
) {

112  
NULL
;

115 
a
->
ñem
 = 
√w
;

116 
a
->
«Œoc
 *= 2;

119 
ñem
 = (
uöt8_t
 *)
a
->ñem +á->
size
 *á->
√Àm
;

120 
a
->
√Àm
++;

122  
ñem
;

123 
	}
}

126 
	$¨øy_p›
(
¨øy
 *
a
)

128 *
ñem
;

130 
	`ASSERT
(
a
->
√Àm
 != 0);

132 
a
->
√Àm
--;

133 
ñem
 = (
uöt8_t
 *)
a
->ñem +á->
size
 *á->
√Àm
;

135  
ñem
;

136 
	}
}

139 
	$¨øy_gë
(
¨øy
 *
a
, 
uöt32_t
 
idx
)

141 *
ñem
;

143 
	`ASSERT
(
a
->
√Àm
 != 0);

144 
	`ASSERT
(
idx
 < 
a
->
√Àm
);

146 
ñem
 = (
uöt8_t
 *)
a
->ñem + (a->
size
 * 
idx
);

148  
ñem
;

149 
	}
}

152 
	$¨øy_t›
(
¨øy
 *
a
)

154 
	`ASSERT
(
a
->
√Àm
 != 0);

156  
	`¨øy_gë
(
a
,á->
√Àm
 - 1);

157 
	}
}

160 
	$¨øy_sw≠
(
¨øy
 *
a
, ¨øy *
b
)

162 
¨øy
 
tmp
;

164 
tmp
 = *
a
;

165 *
a
 = *
b
;

166 *
b
 = 
tmp
;

167 
	}
}

175 
	$¨øy_s‹t
(
¨øy
 *
a
, 
¨øy_com∑ª_t
 
com∑ª
)

177 
	`ASSERT
(
a
->
√Àm
 != 0);

179 
	`qs‹t
(
a
->
ñem
,á->
√Àm
,á->
size
, 
com∑ª
);

180 
	}
}

186 
r°©us_t


187 
	$¨øy_óch
(
¨øy
 *
a
, 
¨øy_óch_t
 
func
, *
d©a
)

189 
uöt32_t
 
i
, 
√Àm
;

191 
	`ASSERT
(
	`¨øy_n
(
a
) != 0);

192 
	`ASSERT
(
func
 !
NULL
);

194 
i
 = 0, 
√Àm
 = 
	`¨øy_n
(
a
); i <Çelem; i++) {

195 *
ñem
 = 
	`¨øy_gë
(
a
, 
i
);

196 
r°©us_t
 
°©us
;

198 
°©us
 = 
	`func
(
ñem
, 
d©a
);

199 i‡(
°©us
 !
FC_OK
) {

200  
°©us
;

204  
FC_OK
;

205 
	}
}

	@/home/hx/fatcache/src/fc_array.h

18 #i‚de‡
_FC_ARRAY_H_


19 
	#_FC_ARRAY_H_


	)

21 
	~<fc_c‹e.h
>

23 (*
	t¨øy_com∑ª_t
)(const *, const *);

24 
	$r°©us_t
 (*
	t¨øy_óch_t
)(*, *);

26 
	s¨øy
 {

27 
uöt32_t
 
√Àm
;

28 *
ñem
;

29 
size_t
 
size
;

30 
uöt32_t
 
«Œoc
;

33 
	#nuŒ_¨øy
 { 0, 
NULL
, 0, 0 
	}

	)
}

35 
ölöe
 

36 
	$¨øy_nuŒ
(
¨øy
 *
a
)

38 
a
->
√Àm
 = 0;

39 
a
->
ñem
 = 
NULL
;

40 
a
->
size
 = 0;

41 
a
->
«Œoc
 = 0;

42 
	}
}

44 
ölöe
 

45 
	$¨øy_£t
(
¨øy
 *
a
, *
ñem
, 
size_t
 
size
, 
uöt32_t
 
«Œoc
)

47 
a
->
√Àm
 = 0;

48 
a
->
ñem
 =Élem;

49 
a
->
size
 = size;

50 
a
->
«Œoc
 =Çalloc;

51 
	}
}

53 
ölöe
 
uöt32_t


54 
	$¨øy_n
(c⁄° 
¨øy
 *
a
)

56  
a
->
√Àm
;

57 
	}
}

59 
¨øy
 *
¨øy_¸óã
(
uöt32_t
 
n
, 
size_t
 
size
);

60 
¨øy_de°roy
(
¨øy
 *
a
);

61 
r°©us_t
 
¨øy_öô
(
¨øy
 *
a
, 
uöt32_t
 
n
, 
size_t
 
size
);

62 
¨øy_deöô
(
¨øy
 *
a
);

64 
uöt32_t
 
¨øy_idx
(
¨øy
 *
a
, *
ñem
);

65 *
¨øy_push
(
¨øy
 *
a
);

66 *
¨øy_p›
(
¨øy
 *
a
);

67 *
¨øy_gë
(
¨øy
 *
a
, 
uöt32_t
 
idx
);

68 *
¨øy_t›
(
¨øy
 *
a
);

69 
¨øy_sw≠
(
¨øy
 *
a
, ¨øy *
b
);

70 
¨øy_s‹t
(
¨øy
 *
a
, 
¨øy_com∑ª_t
 
com∑ª
);

71 
r°©us_t
 
¨øy_óch
(
¨øy
 *
a
, 
¨øy_óch_t
 
func
, *
d©a
);

	@/home/hx/fatcache/src/fc_client.c

18 
	~<fc_c‹e.h
>

19 
	~<fc_˛õ¡.h
>

21 
boﬁ


22 
	$˛õ¡_a˘ive
(
c⁄n
 *conn)

24 i‡(!
	`TAILQ_EMPTY
(&
c⁄n
->
omsg_q
)) {

25 
	`log_debug
(
LOG_VVERB
, "¯%d i†a˘ive", 
c⁄n
->
sd
);

26  
åue
;

29 i‡(
c⁄n
->
rmsg
 !
NULL
) {

30 
	`log_debug
(
LOG_VVERB
, "¯%d i†a˘ive", 
c⁄n
->
sd
);

31  
åue
;

34 i‡(
c⁄n
->
smsg
 !
NULL
) {

35 
	`log_debug
(
LOG_VVERB
, "¯%d i†a˘ive", 
c⁄n
->
sd
);

36  
åue
;

39 
	`log_debug
(
LOG_VVERB
, "¯%d i†öa˘ive", 
c⁄n
->
sd
);

41  
Ál£
;

42 
	}
}

45 
	$˛õ¡_˛o£
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *conn)

47 
r°©us_t
 
°©us
;

48 
msg
 *msg, *
nmsg
;

50 i‡(
c⁄n
->
sd
 < 0) {

51 
	`c⁄n_put
(
c⁄n
);

55 
msg
 = 
c⁄n
->
rmsg
;

56 i‡(
msg
 !
NULL
) {

57 
c⁄n
->
rmsg
 = 
NULL
;

59 
	`ASSERT
(
msg
->
≥î
 =
NULL
);

60 
	`ASSERT
(
msg
->
ªque°
 && !msg->
d⁄e
);

62 
	`log_debug
(
LOG_INFO
, "˛o£ c %d disˇrdögÖídögÑeq %"
PRIu64
"Üen "

63 "%"
PRIu32
"Åy≥ %d", 
c⁄n
->
sd
, 
msg
->
id
, msg->
mÀn
,

64 
msg
->
ty≥
);

66 
	`ªq_put
(
msg
);

69 
	`ASSERT
(
c⁄n
->
smsg
 =
NULL
);

71 
msg
 = 
	`TAILQ_FIRST
(&
c⁄n
->
omsg_q
); msg !
NULL
; msg = 
nmsg
) {

72 
nmsg
 = 
	`TAILQ_NEXT
(
msg
, 
c_tqe
);

75 
	`ªq_dequeue_omsgq
(
˘x
, 
c⁄n
, 
msg
);

77 i‡(
msg
->
d⁄e
) {

78 
	`log_debug
(
LOG_INFO
, "˛o£ c %d disˇrdög %†ªq %"
PRIu64
"Üen "

79 "%"
PRIu32
"Åy≥ %d", 
c⁄n
->
sd
,

80 
msg
->
îr‹
 ? "îr‹": "com∂ëed", msg->
id
, msg->
mÀn
,

81 
msg
->
ty≥
);

82 
	`ªq_put
(
msg
);

84 
msg
->
swÆlow
 = 1;

86 
	`ASSERT
(
msg
->
ªque°
);

87 
	`ASSERT
(
msg
->
≥î
 =
NULL
);

89 
	`log_debug
(
LOG_INFO
, "˛o£ c %d scheduÀ swÆlow o‡ªq %"
PRIu64
" "

90 "À¿%"
PRIu32
"Åy≥ %d", 
c⁄n
->
sd
, 
msg
->
id
, msg->
mÀn
,

91 
msg
->
ty≥
);

94 
	`ASSERT
(
	`TAILQ_EMPTY
(&
c⁄n
->
omsg_q
));

96 
°©us
 = 
	`˛o£
(
c⁄n
->
sd
);

97 i‡(
°©us
 < 0) {

98 
	`log_îr‹
("˛o£ c %d faûed, ign‹ed: %s", 
c⁄n
->
sd
, 
	`°ªº‹
(
î∫o
));

100 
c⁄n
->
sd
 = -1;

102 
	`c⁄n_put
(
c⁄n
);

103 
	}
}

	@/home/hx/fatcache/src/fc_client.h

18 #i‚de‡
_FC_CLIENT_H_


19 
	#_FC_CLIENT_H_


	)

21 
	~<fc_c‹e.h
>

23 
boﬁ
 
˛õ¡_a˘ive
(
c⁄n
 *conn);

24 
˛õ¡_˛o£
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *conn);

	@/home/hx/fatcache/src/fc_connection.c

18 
	~<fc_c‹e.h
>

19 
	~<fc_£rvî.h
>

20 
	~<fc_˛õ¡.h
>

22 
£âögs
 settings;

24 
uöt32_t
 
	gn‰ì_c⁄nq
;

25 
c⁄n_tqh
 
	g‰ì_c⁄nq
;

27 
c⁄n_‰ì
(
c⁄n
 *conn);

30 
	$c⁄n_öô
()

32 
	`log_debug
(
LOG_DEBUG
, "c⁄¿sizê%d", (
c⁄n
));

33 
n‰ì_c⁄nq
 = 0;

34 
	`TAILQ_INIT
(&
‰ì_c⁄nq
);

35 
	}
}

38 
	$c⁄n_deöô
()

40 
c⁄n
 *c⁄n, *
nc⁄n
;

42 
c⁄n
 = 
	`TAILQ_FIRST
(&
‰ì_c⁄nq
); c⁄¿!
NULL
;

43 
c⁄n
 = 
nc⁄n
, 
n‰ì_c⁄nq
--) {

44 
	`ASSERT
(
n‰ì_c⁄nq
 > 0);

45 
nc⁄n
 = 
	`TAILQ_NEXT
(
c⁄n
, 
tqe
);

46 
	`c⁄n_‰ì
(
c⁄n
);

48 
	`ASSERT
(
n‰ì_c⁄nq
 == 0);

49 
	}
}

51 
ssize_t


52 
	$c⁄n_ªcv
(
c⁄n
 *c⁄n, *
buf
, 
size_t
 
size
)

54 
ssize_t
 
n
;

56 
	`ASSERT
(
buf
 !
NULL
);

57 
	`ASSERT
(
size
 > 0);

58 
	`ASSERT
(
c⁄n
->
ªcv_ªady
);

61 
n
 = 
	`fc_ªad
(
c⁄n
->
sd
, 
buf
, 
size
);

63 
	`log_debug
(
LOG_VERB
, "ªcv o¿sd %d %zd o‡%zu", 
c⁄n
->
sd
, 
n
, 
size
);

65 i‡(
n
 > 0) {

66 i‡(
n
 < (
ssize_t
Ë
size
) {

67 
c⁄n
->
ªcv_ªady
 = 0;

69 
c⁄n
->
ªcv_byãs
 +(
size_t
)
n
;

70  
n
;

73 i‡(
n
 == 0) {

74 
c⁄n
->
ªcv_ªady
 = 0;

75 
c⁄n
->
eof
 = 1;

76 
	`log_debug
(
LOG_INFO
, "ªcv o¿sd %dÉo‡rb %zu sb %zu", 
c⁄n
->
sd
,

77 
c⁄n
->
ªcv_byãs
, c⁄n->
£nd_byãs
);

78  
n
;

81 i‡(
î∫o
 =
EINTR
) {

82 
	`log_debug
(
LOG_VERB
, "ªcv o¿sd %dÇŸÑódy -Éöå", 
c⁄n
->
sd
);

84 } i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) {

85 
c⁄n
->
ªcv_ªady
 = 0;

86 
	`log_debug
(
LOG_VERB
, "ªcv o¿sd %dÇŸÑódy -Éagaö", 
c⁄n
->
sd
);

87  
FC_EAGAIN
;

89 
c⁄n
->
ªcv_ªady
 = 0;

90 
c⁄n
->
îr
 = 
î∫o
;

91 
	`log_îr‹
("ªcv o¿sd %d faûed: %s", 
c⁄n
->
sd
, 
	`°ªº‹
(
î∫o
));

92  
FC_ERROR
;

96 
	`NOT_REACHED
();

98  
FC_ERROR
;

99 
	}
}

101 
ssize_t


102 
	$c⁄n_£ndv
(
c⁄n
 *c⁄n, 
¨øy
 *
£ndv
, 
size_t
 
n£nd
)

104 
ssize_t
 
n
;

106 
	`ASSERT
(
	`¨øy_n
(
£ndv
) > 0);

107 
	`ASSERT
(
n£nd
 != 0);

108 
	`ASSERT
(
c⁄n
->
£nd_ªady
);

111 
n
 = 
	`fc_wrôev
(
c⁄n
->
sd
, 
£ndv
->
ñem
, sídv->
√Àm
);

113 
	`log_debug
(
LOG_VERB
, "£ndv o¿sd %d %zd o‡%zu i¿%"
PRIu32
" buffers",

114 
c⁄n
->
sd
, 
n
, 
n£nd
, 
£ndv
->
√Àm
);

116 i‡(
n
 > 0) {

117 i‡(
n
 < (
ssize_t
Ë
n£nd
) {

118 
c⁄n
->
£nd_ªady
 = 0;

120 
c⁄n
->
£nd_byãs
 +(
size_t
)
n
;

121  
n
;

124 i‡(
n
 == 0) {

125 
	`log_w¨n
("£ndv o¿sd %dÑëu∫ed zîo", 
c⁄n
->
sd
);

126 
c⁄n
->
£nd_ªady
 = 0;

130 i‡(
î∫o
 =
EINTR
) {

131 
	`log_debug
(
LOG_VERB
, "£ndv o¿sd %dÇŸÑódy -Éöå", 
c⁄n
->
sd
);

133 } i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) {

134 
c⁄n
->
£nd_ªady
 = 0;

135 
	`log_debug
(
LOG_VERB
, "£ndv o¿sd %dÇŸÑódy -Éagaö", 
c⁄n
->
sd
);

136  
FC_EAGAIN
;

138 
c⁄n
->
£nd_ªady
 = 0;

139 
c⁄n
->
îr
 = 
î∫o
;

140 
	`log_îr‹
("£ndv o¿sd %d faûed: %s", 
c⁄n
->
sd
, 
	`°ªº‹
(
î∫o
));

141  
FC_ERROR
;

145 
	`NOT_REACHED
();

147  
FC_ERROR
;

148 
	}
}

151 
	$c⁄n_‰ì
(
c⁄n
 *conn)

153 
	`log_debug
(
LOG_VVERB
, "‰ì c⁄¿%p", 
c⁄n
);

154 
	`fc_‰ì
(
c⁄n
);

155 
	}
}

158 
	$c⁄n_put
(
c⁄n
 *conn)

160 
	`ASSERT
(
c⁄n
->
sd
 < 0);

162 
	`log_debug
(
LOG_VVERB
, "puàc⁄¿%p", 
c⁄n
);

164 
n‰ì_c⁄nq
++;

165 
	`TAILQ_INSERT_HEAD
(&
‰ì_c⁄nq
, 
c⁄n
, 
tqe
);

166 
	}
}

168 
c⁄n
 *

169 
	$_c⁄n_gë
()

171 
c⁄n
 *conn;

173 i‡(!
	`TAILQ_EMPTY
(&
‰ì_c⁄nq
)) {

174 
	`ASSERT
(
n‰ì_c⁄nq
 > 0);

176 
c⁄n
 = 
	`TAILQ_FIRST
(&
‰ì_c⁄nq
);

177 
n‰ì_c⁄nq
--;

178 
	`TAILQ_REMOVE
(&
‰ì_c⁄nq
, 
c⁄n
, 
tqe
);

180 
c⁄n
 = 
	`fc_Æloc
((*conn));

181 i‡(
c⁄n
 =
NULL
) {

182  
NULL
;

188 
	`TAILQ_INIT
(&
c⁄n
->
omsg_q
);

189 
c⁄n
->
rmsg
 = 
NULL
;

190 
c⁄n
->
smsg
 = 
NULL
;

192 
c⁄n
->
ªcv
 = 
NULL
;

193 
c⁄n
->
£nd
 = 
NULL
;

194 
c⁄n
->
˛o£
 = 
NULL
;

195 
c⁄n
->
a˘ive
 = 
NULL
;

197 
c⁄n
->
£nd_byãs
 = 0;

198 
c⁄n
->
ªcv_byãs
 = 0;

200 
c⁄n
->
evíts
 = 0;

201 
c⁄n
->
îr
 = 0;

202 
c⁄n
->
ªcv_a˘ive
 = 0;

203 
c⁄n
->
ªcv_ªady
 = 0;

204 
c⁄n
->
£nd_a˘ive
 = 0;

205 
c⁄n
->
£nd_ªady
 = 0;

207 
c⁄n
->
˛õ¡
 = 0;

208 
c⁄n
->
eof
 = 0;

209 
c⁄n
->
d⁄e
 = 0;

210 
c⁄n
->
n‹ïly
 = 0;

212  
c⁄n
;

213 
	}
}

215 
c⁄n
 *

216 
	$c⁄n_gë
(
sd
, 
boﬁ
 
˛õ¡
)

218 
c⁄n
 *
c
;

220 
c
 = 
	`_c⁄n_gë
();

221 i‡(
c
 =
NULL
) {

222  
NULL
;

224 
c
->
sd
 = sd;

225 
c
->
˛õ¡
 = client ? 1 : 0;

227 i‡(
˛õ¡
) {

228 
c
->
ªcv
 = 
msg_ªcv
;

229 
c
->
£nd
 = 
msg_£nd
;

230 
c
->
˛o£
 = 
˛õ¡_˛o£
;

231 
c
->
a˘ive
 = 
˛õ¡_a˘ive
;

233 
c
->
ªcv
 = 
£rvî_ªcv
;

234 
c
->
£nd
 = 
NULL
;

235 
c
->
˛o£
 = 
NULL
;

236 
c
->
a˘ive
 = 
NULL
;

239 
	`log_debug
(
LOG_VVERB
, "gë c⁄¿%∞¯%d", 
c
, c->
sd
);

241  
c
;

242 
	}
}

	@/home/hx/fatcache/src/fc_connection.h

18 #i‚de‡
_FC_CONNECTION_H_


19 
	#_FC_CONNECTION_H_


	)

21 
	$r°©us_t
 (*
	tc⁄n_ªcv_t
)(
	tc⁄ãxt
 *, 
	tc⁄n
*);

22 
	$r°©us_t
 (*
	tc⁄n_£nd_t
)(
	tc⁄ãxt
 *, 
	tc⁄n
*);

24 
msg
* (*
	tc⁄n_£nd_√xt_t
)(
	tc⁄ãxt
 *, 
	tc⁄n
 *);

25 (*
	tc⁄n_£nd_d⁄e_t
)(
	tc⁄ãxt
 *, 
	tc⁄n
 *, 
	tmsg
 *);

27 (*
	tc⁄n_˛o£_t
)(
	tc⁄ãxt
 *, 
	tc⁄n
 *);

28 
	$boﬁ
 (*
	tc⁄n_a˘ive_t
)(
	tc⁄n
 *);

30 
	sc⁄n
 {

31 
sd
;

32 
	`TAILQ_ENTRY
(
c⁄n
Ë
tqe
;

34 
msg_tqh
 
omsg_q
;

35 
msg
 *
rmsg
;

36 
msg
 *
smsg
;

38 
c⁄n_ªcv_t
 
ªcv
;

39 
c⁄n_£nd_t
 
£nd
;

40 
c⁄n_˛o£_t
 
˛o£
;

41 
c⁄n_a˘ive_t
 
a˘ive
;

43 
size_t
 
ªcv_byãs
;

44 
size_t
 
£nd_byãs
;

46 
uöt32_t
 
evíts
;

47 
îr_t
 
îr
;

48 
ªcv_a˘ive
:1;

49 
ªcv_ªady
:1;

50 
£nd_a˘ive
:1;

51 
£nd_ªady
:1;

53 
˛õ¡
:1;

54 
eof
:1;

55 
d⁄e
:1;

56 
n‹ïly
:1;

59 
	`TAILQ_HEAD
(
c⁄n_tqh
, 
c⁄n
);

61 
	`c⁄n_öô
();

62 
	`c⁄n_deöô
();

64 
ssize_t
 
	`c⁄n_ªcv
(
c⁄n
 *c⁄n, *
buf
, 
size_t
 
size
);

65 
ssize_t
 
	`c⁄n_£ndv
(
c⁄n
 *c⁄n, 
¨øy
 *
£ndv
, 
size_t
 
n£nd
);

67 
c⁄n
 *
	`c⁄n_gë
(
sd
, 
boﬁ
 
˛õ¡
);

68 
	`c⁄n_put
(
c⁄n
 *
c
);

	@/home/hx/fatcache/src/fc_core.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<fc_c‹e.h
>

22 
	~<fc_£rvî.h
>

24 
£âögs
 settings;

26 
r°©us_t


27 
	$c‹e_öô
()

29 
r°©us_t
 
°©us
;

31 
°©us
 = 
	`log_öô
(
£âögs
.
vîbo£
, sëtögs.
log_fûíame
);

32 i‡(
°©us
 !
FC_OK
) {

33  
°©us
;

36 
°©us
 = 
	`sig«l_öô
();

37 i‡(
°©us
 !
FC_OK
) {

38  
°©us
;

41 
°©us
 = 
	`time_öô
();

42 i‡(
°©us
 !
FC_OK
) {

43  
°©us
;

46 
°©us
 = 
	`ôemx_öô
();

47 i‡(
°©us
 !
FC_OK
) {

48  
°©us
;

51 
	`c⁄n_öô
();

53 
	`mbuf_öô
();

55 
	`msg_öô
();

57 
	`ôem_öô
();

59 
°©us
 = 
	`¶ab_öô
();

60 i‡(
°©us
 !
FC_OK
) {

61  
°©us
;

64  
FC_OK
;

65 
	}
}

68 
	$c‹e_deöô
()

70 
	}
}

72 
r°©us_t


73 
	$c‹e_ªcv
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *conn)

75 
r°©us_t
 
°©us
;

77 
°©us
 = 
c⁄n
->
	`ªcv
(
˘x
, conn);

78 i‡(
°©us
 !
FC_OK
) {

79 
	`log_debug
(
LOG_INFO
, "recv on %c %d failed: %s",

80 
c⁄n
->
˛õ¡
 ? 'c' : 's', c⁄n->
sd
,

81 
	`°ªº‹
(
î∫o
));

84  
°©us
;

85 
	}
}

87 
r°©us_t


88 
	$c‹e_£nd
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *conn)

90 
r°©us_t
 
°©us
;

92 
°©us
 = 
c⁄n
->
	`£nd
(
˘x
, conn);

93 i‡(
°©us
 !
FC_OK
) {

94 
	`log_debug
(
LOG_INFO
, "send on %c %d failed: %s",

95 
c⁄n
->
˛õ¡
 ? 'c' : 's', c⁄n->
sd
,

96 
	`°ªº‹
(
î∫o
));

99  
°©us
;

100 
	}
}

103 
	$c‹e_˛o£
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *conn)

105 
r°©us_t
 
°©us
;

106 
ty≥
 = 
c⁄n
->
˛õ¡
 ? 'c' : 's';

108 
	`ASSERT
(
c⁄n
->
sd
 > 0);

110 
	`log_debug
(
LOG_NOTICE
, "˛o£ %¯%d o¿evíà%04"
PRIX32
"Éof %d done "

111 "%dÑb %zu sb %zu%¯%s", 
ty≥
, 
c⁄n
->
sd
, c⁄n->
evíts
,

112 
c⁄n
->
eof
, c⁄n->
d⁄e
, c⁄n->
ªcv_byãs
, c⁄n->
£nd_byãs
,

113 
c⁄n
->
îr
 ? ':' : ' ', c⁄n->î∏? 
	`°ªº‹
(conn->err) : "");

115 
°©us
 = 
	`evít_dñ_c⁄n
(
˘x
->
ï
, 
c⁄n
);

116 i‡(
°©us
 < 0) {

117 
	`log_w¨n
("evíàdñ c⁄¿ê%d %¯%d faûed, ign‹ed: %s", 
˘x
->
ï
,

118 
ty≥
, 
c⁄n
->
sd
, 
	`°ªº‹
(
î∫o
));

121 
c⁄n
->
	`˛o£
(
˘x
, conn);

122 
	}
}

125 
	$c‹e_îr‹
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *conn)

127 
r°©us_t
 
°©us
;

128 
ty≥
 = 
c⁄n
->
˛õ¡
 ? 'c' : 's';

130 
°©us
 = 
	`fc_gë_s€º‹
(
c⁄n
->
sd
);

131 i‡(
°©us
 < 0) {

132 
	`log_w¨n
("gë s€º o¿%¯%d faûed, ign‹ed: %s", 
ty≥
, 
c⁄n
->
sd
,

133 
	`°ªº‹
(
î∫o
));

135 
c⁄n
->
îr
 = 
î∫o
;

137 
	`c‹e_˛o£
(
˘x
, 
c⁄n
);

138 
	}
}

141 
	$c‹e_c‹e
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
uöt32_t
 
evíts
)

143 
r°©us_t
 
°©us
;

145 
	`log_debug
(
LOG_VERB
, "evíà%04"
PRIX32
" o¿%d", 
evíts
, 
c⁄n
->
sd
);

147 
c⁄n
->
evíts
 =Évents;

150 i‡(
evíts
 & 
EPOLLERR
) {

151 
	`c‹e_îr‹
(
˘x
, 
c⁄n
);

156 i‡(
evíts
 & (
EPOLLIN
 | 
EPOLLHUP
)) {

157 
°©us
 = 
	`c‹e_ªcv
(
˘x
, 
c⁄n
);

158 i‡(
°©us
 !
FC_OK
 || 
c⁄n
->
d⁄e
 || c⁄n->
îr
) {

159 
	`c‹e_˛o£
(
˘x
, 
c⁄n
);

164 i‡(
evíts
 & 
EPOLLOUT
) {

165 
°©us
 = 
	`c‹e_£nd
(
˘x
, 
c⁄n
);

166 i‡(
°©us
 !
FC_OK
 || 
c⁄n
->
d⁄e
 || c⁄n->
îr
) {

167 
	`c‹e_˛o£
(
˘x
, 
c⁄n
);

171 
	}
}

173 
r°©us_t


174 
	$c‹e_°¨t
(
c⁄ãxt
 *
˘x
)

176 
r°©us_t
 
°©us
;

178 
˘x
->
ï
 = -1;

179 
˘x
->
√vít
 = 1024;

180 
˘x
->
max_timeout
 = -1;

181 
˘x
->
timeout
 = ctx->
max_timeout
;

182 
˘x
->
evít
 = 
NULL
;

184 
°©us
 = 
	`evít_öô
(
˘x
, 1024);

185 i‡(
°©us
 !
FC_OK
) {

186  
°©us
;

189 
°©us
 = 
	`£rvî_li°í
(
˘x
);

190 i‡(
°©us
 !
FC_OK
) {

191  
°©us
;

194  
FC_OK
;

195 
	}
}

198 
	$c‹e_°›
(
c⁄ãxt
 *
˘x
)

200 
	}
}

202 
r°©us_t


203 
	$c‹e_lo›
(
c⁄ãxt
 *
˘x
)

205 
i
, 
nsd
;

207 
nsd
 = 
	`evít_waô
(
˘x
->
ï
, ctx->
evít
, ctx->
√vít
, ctx->
timeout
);

208 i‡(
nsd
 < 0) {

209  
nsd
;

212 
i
 = 0; i < 
nsd
; i++) {

213 
ïﬁl_evít
 *
ev
 = &
˘x
->
evít
[
i
];

215 
	`c‹e_c‹e
(
˘x
, 
ev
->
d©a
.
±r
,Év->
evíts
);

218  
FC_OK
;

219 
	}
}

	@/home/hx/fatcache/src/fc_core.h

18 #i‚de‡
_FC_CORE_H_


19 
	#_FC_CORE_H_


	)

21 #ifde‡
HAVE_CONFIG_H


22 
	~<c⁄fig.h
>

25 #ifde‡
HAVE_DEBUG_LOG


26 
	#FC_DEBUG_LOG
 1

	)

28 
	#FC_DEBUG_LOG
 0

	)

31 #ifde‡
HAVE_ASSERT_PANIC


32 
	#FC_ASSERT_PANIC
 1

	)

34 
	#FC_ASSERT_PANIC
 0

	)

37 #ifde‡
HAVE_ASSERT_LOG


38 
	#FC_ASSERT_LOG
 1

	)

40 
	#FC_ASSERT_LOG
 0

	)

43 #ifde‡
HAVE_LITTLE_ENDIAN


44 
	#FC_LITTLE_ENDIAN
 1

	)

47 #ifde‡
HAVE_BACKTRACE


48 
	#FC_BACKTRACE
 1

	)

51 
	#FC_OK
 0

	)

52 
	#FC_ERROR
 -1

	)

53 
	#FC_EAGAIN
 -2

	)

54 
	#FC_ENOMEM
 -3

	)

56 
	tr°©us_t
;

57 
	tîr_t
;

59 
	g¨øy
;

60 
	gc⁄ãxt
;

61 
	gïﬁl_evít
;

62 
	gc⁄n
;

63 
	gc⁄n_tqh
;

64 
	gmsg
;

65 
	gmsg_tqh
;

66 
	gmbuf
;

67 
	gmhdr
;

68 
	gôem
;

69 
	g¶ab
;

70 
	g¶ab˛ass
;

72 
	~<°ddef.h
>

73 
	~<°döt.h
>

74 
	~<°dboﬁ.h
>

75 
	~<öây≥s.h
>

76 
	~<uni°d.h
>

77 
	~<√tdb.h
>

78 
	~<±hªad.h
>

79 
	~<limôs.h
>

80 
	~<f˙é.h
>

81 
	~<î∫o.h
>

82 
	~<time.h
>

83 
	~<limôs.h
>

85 
	~<sys/ty≥s.h
>

86 
	~<sys/°©.h
>

87 
	~<sys/sockë.h
>

88 
	~<sys/un.h
>

89 
	~<sys/time.h
>

90 
	~<√töë/ö.h
>

91 
	~<√töë/t˝.h
>

92 
	~<¨∑/öë.h
>

93 
	~<sys/ïﬁl.h
>

94 
	~<sys/mm™.h
>

96 
	~<fc_¨øy.h
>

97 
	~<fc_°rög.h
>

98 
	~<fc_queue.h
>

99 
	~<fc_log.h
>

100 
	~<fc_mbuf.h
>

101 
	~<fc_memˇche.h
>

102 
	~<fc_mesßge.h
>

104 
	~<fc_sha1.h
>

105 
	~<fc_time.h
>

106 
	~<fc_utû.h
>

107 
	~<fc_evít.h
>

109 
	~<fc_c⁄√˘i⁄.h
>

110 
	~<fc_¶ab.h
>

111 
	~<fc_ôemx.h
>

112 
	~<fc_ôem.h
>

113 
	~<fc_sig«l.h
>

115 
	sc⁄ãxt
 {

116 
	mï
;

117 
	m√vít
;

118 
	mmax_timeout
;

119 
	mtimeout
;

120 
ïﬁl_evít
 *
	mevít
;

123 
	s£âögs
 {

124 
boﬁ
 
	md´m⁄ize
;

126 *
	mlog_fûíame
;

127 
	mvîbo£
;

129 
	mp‹t
;

130 *
	maddr
;

132 
	mhash_powî
;

134 
	mÁ˘‹
;

135 
size_t
 
	mmax_¶ab_mem‹y
;

136 
size_t
 
	mmax_ödex_mem‹y
;

137 
size_t
 
	mchunk_size
;

138 
size_t
 
	mmax_chunk_size
;

139 
size_t
 
	m¶ab_size
;

141 
size_t
 
	m¥ofûe
[
SLABCLASS_MAX_IDS
];

142 
uöt8_t
 
	m¥ofûe_œ°_id
;

144 *
	mssd_devi˚
;

146 
uöt32_t
 
	m£rvî_id
;

147 
uöt32_t
 
	m£rvî_n
;

150 
r°©us_t
 
c‹e_öô
();

151 
c‹e_deöô
();

153 
r°©us_t
 
c‹e_°¨t
(
c⁄ãxt
 *
˘x
);

154 
c‹e_°›
(
c⁄ãxt
 *
˘x
);

155 
r°©us_t
 
c‹e_lo›
(
c⁄ãxt
 *
˘x
);

	@/home/hx/fatcache/src/fc_event.c

18 
	~<uni°d.h
>

19 
	~<sys/ïﬁl.h
>

21 
	~<fc_c‹e.h
>

22 
	~<fc_evít.h
>

25 
	$evít_öô
(
c⁄ãxt
 *
˘x
, 
size
)

27 
°©us
, 
ï
;

28 
ïﬁl_evít
 *
evít
;

30 
	`ASSERT
(
˘x
->
ï
 < 0);

31 
	`ASSERT
(
˘x
->
√vít
 != 0);

32 
	`ASSERT
(
˘x
->
evít
 =
NULL
);

34 
ï
 = 
	`ïﬁl_¸óã
(
size
);

35 i‡(
ï
 < 0) {

36 
	`log_îr‹
("ïﬁ»¸óã o‡sizê%d faûed: %s", 
size
, 
	`°ªº‹
(
î∫o
));

40 
evít
 = 
	`fc_ˇŒoc
(
˘x
->
√vít
, (*ctx->event));

41 i‡(
evít
 =
NULL
) {

42 
°©us
 = 
	`˛o£
(
ï
);

43 i‡(
°©us
 < 0) {

44 
	`log_îr‹
("˛o£É %d faûed, ign‹ed: %s", 
ï
, 
	`°ªº‹
(
î∫o
));

49 
˘x
->
ï
 =Ép;

50 
˘x
->
evít
 =Évent;

52 
	`log_debug
(
LOG_INFO
, "ê%d wôhÇevíà%dÅimeouà%d", 
˘x
->
ï
,

53 
˘x
->
√vít
, ctx->
timeout
);

56 
	}
}

59 
	$evít_deöô
(
c⁄ãxt
 *
˘x
)

61 
°©us
;

63 
	`ASSERT
(
˘x
->
ï
 >= 0);

65 
	`fc_‰ì
(
˘x
->
evít
);

67 
°©us
 = 
	`˛o£
(
˘x
->
ï
);

68 i‡(
°©us
 < 0) {

69 
	`log_îr‹
("˛o£É %d faûed, ign‹ed: %s", 
˘x
->
ï
, 
	`°ªº‹
(
î∫o
));

71 
˘x
->
ï
 = -1;

72 
	}
}

75 
	$evít_add_out
(
ï
, 
c⁄n
 *
c
)

77 
°©us
;

78 
ïﬁl_evít
 
evít
;

80 
	`ASSERT
(
ï
 > 0);

81 
	`ASSERT
(
c
 !
NULL
);

82 
	`ASSERT
(
c
->
sd
 > 0);

83 
	`ASSERT
(
c
->
ªcv_a˘ive
);

85 i‡(
c
->
£nd_a˘ive
) {

89 
evít
.
evíts
 = (
uöt32_t
)(
EPOLLIN
 | 
EPOLLOUT
 | 
EPOLLET
);

90 
evít
.
d©a
.
±r
 = 
c
;

92 
°©us
 = 
	`ïﬁl_˘l
(
ï
, 
EPOLL_CTL_MOD
, 
c
->
sd
, &
evít
);

93 i‡(
°©us
 < 0) {

94 
	`log_îr‹
("ïﬁ»˘»⁄É %d sd %d faûed: %s", 
ï
, 
c
->
sd
,

95 
	`°ªº‹
(
î∫o
));

97 
c
->
£nd_a˘ive
 = 1;

100  
°©us
;

101 
	}
}

104 
	$evít_dñ_out
(
ï
, 
c⁄n
 *
c
)

106 
°©us
;

107 
ïﬁl_evít
 
evít
;

109 
	`ASSERT
(
ï
 > 0);

110 
	`ASSERT
(
c
 !
NULL
);

111 
	`ASSERT
(
c
->
sd
 > 0);

112 
	`ASSERT
(
c
->
ªcv_a˘ive
);

114 i‡(!
c
->
£nd_a˘ive
) {

118 
evít
.
evíts
 = (
uöt32_t
)(
EPOLLIN
 | 
EPOLLET
);

119 
evít
.
d©a
.
±r
 = 
c
;

121 
°©us
 = 
	`ïﬁl_˘l
(
ï
, 
EPOLL_CTL_MOD
, 
c
->
sd
, &
evít
);

122 i‡(
°©us
 < 0) {

123 
	`log_îr‹
("ïﬁ»˘»⁄É %d sd %d faûed: %s", 
ï
, 
c
->
sd
,

124 
	`°ªº‹
(
î∫o
));

126 
c
->
£nd_a˘ive
 = 0;

129  
°©us
;

130 
	}
}

133 
	$evít_add_c⁄n
(
ï
, 
c⁄n
 *
c
)

135 
°©us
;

136 
ïﬁl_evít
 
evít
;

138 
	`ASSERT
(
ï
 > 0);

139 
	`ASSERT
(
c
 !
NULL
);

140 
	`ASSERT
(
c
->
sd
 > 0);

142 
evít
.
evíts
 = (
uöt32_t
)(
EPOLLIN
 | 
EPOLLOUT
 | 
EPOLLET
);

143 
evít
.
d©a
.
±r
 = 
c
;

145 
°©us
 = 
	`ïﬁl_˘l
(
ï
, 
EPOLL_CTL_ADD
, 
c
->
sd
, &
evít
);

146 i‡(
°©us
 < 0) {

147 
	`log_îr‹
("ïﬁ»˘»⁄É %d sd %d faûed: %s", 
ï
, 
c
->
sd
,

148 
	`°ªº‹
(
î∫o
));

150 
c
->
£nd_a˘ive
 = 1;

151 
c
->
ªcv_a˘ive
 = 1;

154  
°©us
;

155 
	}
}

158 
	$evít_dñ_c⁄n
(
ï
, 
c⁄n
 *
c
)

160 
°©us
;

162 
	`ASSERT
(
ï
 > 0);

163 
	`ASSERT
(
c
 !
NULL
);

164 
	`ASSERT
(
c
->
sd
 > 0);

166 
°©us
 = 
	`ïﬁl_˘l
(
ï
, 
EPOLL_CTL_DEL
, 
c
->
sd
, 
NULL
);

167 i‡(
°©us
 < 0) {

168 
	`log_îr‹
("ïﬁ»˘»⁄É %d sd %d faûed: %s", 
ï
, 
c
->
sd
,

169 
	`°ªº‹
(
î∫o
));

171 
c
->
ªcv_a˘ive
 = 0;

172 
c
->
£nd_a˘ive
 = 0;

175  
°©us
;

176 
	}
}

179 
	$evít_waô
(
ï
, 
ïﬁl_evít
 *
evít
, 
√vít
, 
timeout
)

181 
nsd
;

183 
	`ASSERT
(
ï
 > 0);

184 
	`ASSERT
(
evít
 !
NULL
);

185 
	`ASSERT
(
√vít
 > 0);

188 
nsd
 = 
	`ïﬁl_waô
(
ï
, 
evít
, 
√vít
, 
timeout
);

189 i‡(
nsd
 > 0) {

190  
nsd
;

193 i‡(
nsd
 == 0) {

194 i‡(
timeout
 == -1) {

195 
	`log_îr‹
("epoll wait onÉ %d with %dÉventsánd %dÅimeout "

196 "ªtu∫edÇÿevíts", 
ï
, 
√vít
, 
timeout
);

203 i‡(
î∫o
 =
EINTR
) {

207 
	`log_îr‹
("ïﬁ»waô o¿ê%d wôh %dÉvít†Áûed: %s", 
ï
, 
√vít
,

208 
	`°ªº‹
(
î∫o
));

213 
	`NOT_REACHED
();

214 
	}
}

	@/home/hx/fatcache/src/fc_event.h

18 #i‚de‡
_FC_EVENT_H_


19 
	#_FC_EVENT_H_


	)

21 
	~<fc_c‹e.h
>

23 
evít_öô
(
c⁄ãxt
 *
˘x
, 
size
);

24 
evít_deöô
(
c⁄ãxt
 *
˘x
);

26 
evít_add_out
(
ï
, 
c⁄n
 *
c
);

27 
evít_dñ_out
(
ï
, 
c⁄n
 *
c
);

28 
evít_add_c⁄n
(
ï
, 
c⁄n
 *
c
);

29 
evít_dñ_c⁄n
(
ï
, 
c⁄n
 *
c
);

31 
evít_waô
(
ï
, 
ïﬁl_evít
 *
evít
, 
√vít
, 
timeout
);

	@/home/hx/fatcache/src/fc_item.c

18 
	~<°dlib.h
>

19 
	~<°dio.h
>

21 
	~<fc_c‹e.h
>

23 
£âögs
 settings;

25 
uöt64_t
 
	gˇs_id
;

31 
boﬁ


32 
	$ôem_expúed
(
ôem
 *
ô
)

34 
	`ASSERT
(
ô
->
magic
 =
ITEM_MAGIC
);

36  (
ô
->
expúy
 !0 && it->expúy < 
	`time_now
()Ë? 
åue
 : 
Ál£
;

37 
	}
}

42 
¶ab
 *

43 
	$ôem_to_¶ab
(
ôem
 *
ô
)

45 
¶ab
 *slab;

47 
	`ASSERT
(
ô
->
magic
 =
ITEM_MAGIC
);

48 
	`ASSERT
(
ô
->
off£t
 < 
£âögs
.
¶ab_size
);

50 
¶ab
 = (¶ab *)((
uöt8_t
 *)
ô
 - it->
off£t
);

52 
	`ASSERT
(
¶ab
->
magic
 =
SLAB_MAGIC
);

54  
¶ab
;

55 
	}
}

57 
uöt8_t


58 
	$ôem_¶abcid
(
uöt8_t
 
nkey
, 
uöt32_t
 
nd©a
)

60 
size_t
 
¡ŸÆ
;

61 
uöt8_t
 
cid
;

63 
¡ŸÆ
 = 
	`ôem_¡ŸÆ
(
nkey
, 
nd©a
);

65 
cid
 = 
	`¶ab_cid
(
¡ŸÆ
);

66 i‡(
cid
 =
SLABCLASS_INVALID_ID
) {

67 
	`log_debug
(
LOG_NOTICE
, "¶ab cœs†id ouào‡øngêwôh %"
PRIu8
" bytes "

68 "key, %"
PRIu32
" byã†vÆuê™d %zu iãm chunk size", 
nkey
,

69 
nd©a
, 
¡ŸÆ
);

72  
cid
;

73 
	}
}

75 
ôem
 *

76 
	$ôem_gë
(
uöt8_t
 *
key
, uöt8_à
nkey
, uöt8_à
cid
, 
uöt32_t
 
nd©a
,

77 
ªl_time_t
 
expúy
, 
uöt32_t
 
Êags
, 
uöt8_t
 *
md
, uöt32_à
hash
)

79 
ôem
 *
ô
;

81 
	`ASSERT
(
	`¶ab_vÆid_id
(
cid
));

83 
ô
 = 
	`¶ab_gë_ôem
(
cid
);

84 i‡(
ô
 =
NULL
) {

85 
	`log_w¨n
("£rvîÉº‹ o¿Æloˇtög iãm i¿¶ab %"
PRIu8
, 
cid
);

86  
NULL
;

89 
ô
->
magic
 = 
ITEM_MAGIC
;

91 
ô
->
cid
 = cid;

92 
ô
->
nkey
 =Çkey;

93 
ô
->
nd©a
 =Çdata;

94 
ô
->
expúy
 =Éxpiry;

95 
ô
->
Êags
 = flags;

96 
	`fc_mem˝y
(
ô
->
md
, md, (it->md));

97 
ô
->
hash
 = hash;

99 
	`fc_mem˝y
(
	`ôem_key
(
ô
), 
key
, 
nkey
);

101 
	`log_debug
(
LOG_VERB
, "gë ià'%.*s'áàoff£à%"
PRIu32
" wôh cid %"
PRIu8


102 "Éxpúy %u", 
ô
->
nkey
, 
	`ôem_key
(ô), it->
off£t
, it->
cid
,

103 
ô
->
expúy
);

105 
	`ôemx_putx
(
ô
->
hash
, it->
md
, it->
sid
, it->
off£t
, ++
ˇs_id
);

107  
ô
;

108 
	}
}

111 
	$ôem_put
(
ôem
 *
ô
)

113 
	`ASSERT
(
ô
->
magic
 =
ITEM_MAGIC
);

115 
	`¶ab_put_ôem
(
ô
);

116 
	}
}

119 
	$ôem_öô
()

121 
ˇs_id
 = 0ULL;

122 
	}
}

125 
	$ôem_deöô
()

127 
	}
}

	@/home/hx/fatcache/src/fc_item.h

18 #i‚de‡
_FC_ITEM_H_


19 
	#_FC_ITEM_H_


	)

21 
	~<fc_¶ab.h
>

23 
	sôem
 {

24 
uöt32_t
 
	mmagic
;

25 
uöt32_t
 
	moff£t
;

26 
uöt32_t
 
	msid
;

27 
uöt8_t
 
	mcid
;

28 
uöt8_t
 
	munu£d
[2];

29 
uöt8_t
 
	mnkey
;

30 
uöt32_t
 
	mnd©a
;

31 
ªl_time_t
 
	mexpúy
;

32 
uöt32_t
 
	mÊags
;

33 
uöt8_t
 
	mmd
[20];

34 
uöt32_t
 
	mhash
;

35 
uöt8_t
 
	míd
[1];

38 
	#ITEM_MAGIC
 0x„edÁ˚

	)

39 
	#ITEM_HDR_SIZE
 
	`off£tof
(
ôem
, 
íd
)

	)

53 
	#ITEM_MIN_PAYLOAD_SIZE
 (("k"Ë+ (
uöt64_t
))

	)

54 
	#ITEM_MIN_CHUNK_SIZE
 \

55 
	`FC_ALIGN
(
ITEM_HDR_SIZE
 + 
ITEM_MIN_PAYLOAD_SIZE
, 
FC_ALIGNMENT
)

	)

57 
	#ITEM_PAYLOAD_SIZE
 32

	)

58 
	#ITEM_CHUNK_SIZE
 \

59 
	`FC_ALIGN
(
ITEM_HDR_SIZE
 + 
ITEM_PAYLOAD_SIZE
, 
FC_ALIGNMENT
)

	)

61 
ölöe
 
uöt8_t
 *

62 
	$ôem_key
(
ôem
 *
ô
)

64 
	`ASSERT
(
ô
->
magic
 =
ITEM_MAGIC
);

66  
ô
->
íd
;

67 
	}
}

69 
ölöe
 
size_t


70 
	$ôem_¡ŸÆ
(
uöt8_t
 
nkey
, 
uöt32_t
 
nd©a
)

72  
ITEM_HDR_SIZE
 + 
nkey
 + 
nd©a
;

73 
	}
}

75 
ölöe
 
size_t


76 
	$ôem_size
(
ôem
 *
ô
)

78 
	`ASSERT
(
ô
->
magic
 =
ITEM_MAGIC
);

80  
	`ôem_¡ŸÆ
(
ô
->
nkey
, it->
nd©a
);

81 
	}
}

83 
ölöe
 
uöt8_t
 *

84 
	$ôem_d©a
(
ôem
 *
ô
)

86 
	`ASSERT
(
ô
->
magic
 =
ITEM_MAGIC
);

88  
ô
->
íd
 + it->
nkey
;

89 
	}
}

91 
boﬁ
 
ôem_expúed
(
ôem
 *
ô
);

92 
¶ab
 *
ôem_to_¶ab
(
ôem
 *
ô
);

93 
uöt8_t
 
ôem_¶abcid
(uöt8_à
nkey
, 
uöt32_t
 
nd©a
);

95 
ôem
 *
ôem_gë
(
uöt8_t
 *
key
, uöt8_à
nkey
, uöt8_à
cid
, 
uöt32_t
 
nd©a
, 
ªl_time_t
 
expúy
, uöt32_à
d©aÊags
, uöt8_à*
md
, uöt32_à
hash
);

96 
ôem_put
(
ôem
 *
ô
);

98 
ôem_öô
();

99 
ôem_deöô
();

	@/home/hx/fatcache/src/fc_itemx.c

18 
	~<fc_c‹e.h
>

20 
	#HASHSIZE
(
_n
Ë(1ULL << (_n))

	)

21 
	#HASHMASK
(
_n
Ë(
	`HASHSIZE
(_nË- 1)

	)

23 
£âögs
 settings;

25 
uöt64_t
 
	gnôx
;

26 
uöt64_t
 
	gnôx_èbÀ
;

27 
ôemx_tqh
 *
	gôx_èbÀ
;

29 
uöt64_t
 
	gn‰ì_ôemxq
;

30 
ôemx_tqh
 
	g‰ì_ôemxq
;

32 
ôemx
 *
	gi°¨t
;

33 
ôemx
 *
	gõnd
;

39 
boﬁ


40 
	$ôemx_em±y
()

42 i‡(
	`STAILQ_EMPTY
(&
‰ì_ôemxq
)) {

43 
	`ASSERT
(
n‰ì_ôemxq
 == 0);

44  
åue
;

47 
	`ASSERT
(
n‰ì_ôemxq
 > 0);

49  
Ál£
;

50 
	}
}

52 
ôemx
 *

53 
	$ôemx_gë
()

55 
ôemx
 *
ôx
;

57 
	`ASSERT
(!
	`ôemx_em±y
());

59 
ôx
 = 
	`STAILQ_FIRST
(&
‰ì_ôemxq
);

60 
n‰ì_ôemxq
--;

61 
	`STAILQ_REMOVE_HEAD
(&
‰ì_ôemxq
, 
tqe
);

63 
	`STAILQ_NEXT
(
ôx
, 
tqe
Ë
NULL
;

65 
ôx
->
sid
 = 0;

66 
ôx
->
off£t
 = 0;

67 
ôx
->
ˇs
 = 0;

69 
	`log_debug
(
LOG_VVERB
, "gë itx %p", 
ôx
);

71  
ôx
;

72 
	}
}

75 
	$ôemx_put
(
ôemx
 *
ôx
)

77 
	`log_debug
(
LOG_VVERB
, "puàôx %p", 
ôx
);

79 
n‰ì_ôemxq
++;

80 
	`STAILQ_INSERT_HEAD
(&
‰ì_ôemxq
, 
ôx
, 
tqe
);

81 
	}
}

83 
r°©us_t


84 
	$ôemx_öô
()

86 
ôemx
 *
ôx
;

87 
uöt64_t
 
n
;

88 
uöt64_t
 
i
;

90 
nôx
 = 0ULL;

91 
nôx_èbÀ
 = 0ULL;

92 
ôx_èbÀ
 = 
NULL
;

94 
n‰ì_ôemxq
 = 0;

95 
	`STAILQ_INIT
(&
‰ì_ôemxq
);

97 
i°¨t
 = 
NULL
;

98 
õnd
 = 
NULL
;

101 
nôx_èbÀ
 = 
	`HASHSIZE
(
£âögs
.
hash_powî
);

102 
ôx_èbÀ
 = 
	`fc_Æloc
((*ôx_èbÀË* 
nôx_èbÀ
);

103 i‡(
ôx_èbÀ
 =
NULL
) {

104  
FC_ENOMEM
;

106 
i
 = 0ULL; i < 
nôx_èbÀ
; i++) {

107 
	`STAILQ_INIT
(&
ôx_èbÀ
[
i
]);

110 
n
 = 
£âögs
.
max_ödex_mem‹y
 / (
ôemx
);

113 
ôx
 = 
	`fc_mm≠
(
£âögs
.
max_ödex_mem‹y
);

114 i‡(
ôx
 =
NULL
) {

115  
FC_ENOMEM
;

117 
i°¨t
 = 
ôx
;

118 
õnd
 = 
ôx
 + 
n
;

120 
ôx
 = 
i°¨t
; itx < 
õnd
; itx++) {

121 
	`ôemx_put
(
ôx
);

124  
FC_OK
;

125 
	}
}

128 
	$ôemx_deöô
()

130 
ôemx
 *
ôx
;

132 !
	`STAILQ_EMPTY
(&
‰ì_ôemxq
)) {

133 
	`ASSERT
(
n‰ì_ôemxq
 > 0);

135 
ôx
 = 
	`STAILQ_FIRST
(&
‰ì_ôemxq
);

136 
n‰ì_ôemxq
--;

137 
	`STAILQ_REMOVE_HEAD
(&
‰ì_ôemxq
, 
tqe
);

139 
	`ASSERT
(
n‰ì_ôemxq
 == 0);

141 i‡(
i°¨t
 !
NULL
) {

142 
	`fc_munm≠
(
i°¨t
, 
£âögs
.
max_ödex_mem‹y
);

145 i‡(
ôx_èbÀ
 !
NULL
) {

146 
	`fc_‰ì
(
ôx_èbÀ
);

148 
	}
}

150 
ôemx_tqh
 *

151 
	$ôemx_buckë
(
uöt32_t
 
hash
)

153 
ôemx_tqh
 *
buckë
;

154 
uöt64_t
 
idx
;

156 
idx
 = 
hash
 & 
	`HASHMASK
(
£âögs
.
hash_powî
);

157 
buckë
 = &
ôx_èbÀ
[
idx
];

159  
buckë
;

160 
	}
}

162 
ôemx
 *

163 
	$ôemx_gëx
(
uöt32_t
 
hash
, 
uöt8_t
 *
md
)

165 
ôemx_tqh
 *
buckë
;

166 
ôemx
 *
ôx
;

168 
buckë
 = 
	`ôemx_buckë
(
hash
);

170 
	`STAILQ_FOREACH
(
ôx
, 
buckë
, 
tqe
) {

171 i‡(
	`memcmp
(
ôx
->
md
, md, (itx->md)) == 0) {

176  
ôx
;

177 
	}
}

180 
	$ôemx_putx
(
uöt32_t
 
hash
, 
uöt8_t
 *
md
, uöt32_à
sid
, uöt32_à
off£t
,

181 
uöt64_t
 
ˇs
)

183 
ôemx
 *
ôx
;

184 
ôemx_tqh
 *
buckë
;

186 
	`ASSERT
(!
	`ôemx_em±y
());

188 
ôx
 = 
	`ôemx_gë
();

189 
ôx
->
sid
 = sid;

190 
ôx
->
off£t
 = offset;

191 
ôx
->
ˇs
 = cas;

192 
	`fc_mem˝y
(
ôx
->
md
, md, (itx->md));

194 
	`ASSERT
(
	`ôemx_gëx
(
hash
, 
md
Ë=
NULL
);

196 
buckë
 = 
	`ôemx_buckë
(
hash
);

197 
nôx
++;

198 
	`STAILQ_INSERT_HEAD
(
buckë
, 
ôx
, 
tqe
);

199 
	}
}

201 
boﬁ


202 
	$ôemx_ªmovex
(
uöt32_t
 
hash
, 
uöt8_t
 *
md
)

204 
ôemx_tqh
 *
buckë
;

205 
ôemx
 *
ôx
;

207 
ôx
 = 
	`ôemx_gëx
(
hash
, 
md
);

208 i‡(
ôx
 =
NULL
) {

209  
Ál£
;

212 
buckë
 = 
	`ôemx_buckë
(
hash
);

213 
nôx
--;

214 
	`STAILQ_REMOVE
(
buckë
, 
ôx
, 
ôemx
, 
tqe
);

216 
	`ôemx_put
(
ôx
);

218  
åue
;

219 
	}
}

	@/home/hx/fatcache/src/fc_itemx.h

18 #i‚de‡
_FC_ITEMX_H_


19 
	#_FC_ITEMX_H_


	)

21 
	#ITEMX_HASH_POWER
 20

	)

23 
	sôemx
 {

24 
STAILQ_ENTRY
(
ôemx
Ë
	mtqe
;

25 
uöt8_t
 
	mmd
[20];

26 
uöt32_t
 
	msid
;

27 
uöt32_t
 
	moff£t
;

28 
uöt64_t
 
	mˇs
;

29 } 
__©åibuã__
 ((
__∑cked__
));

31 
STAILQ_HEAD
(
ôemx_tqh
, 
ôemx
);

33 
r°©us_t
 
ôemx_öô
();

34 
ôemx_deöô
();

36 
boﬁ
 
ôemx_em±y
();

37 
ôemx
 *
ôemx_gëx
(
uöt32_t
 
hash
, 
uöt8_t
 *
md
);

38 
ôemx_putx
(
uöt32_t
 
hash
, 
uöt8_t
 *
md
, uöt32_à
sid
, uöt32_à
ioff
, 
uöt64_t
 
ˇs
);

39 
boﬁ
 
ôemx_ªmovex
(
uöt32_t
 
hash
, 
uöt8_t
 *
md
);

	@/home/hx/fatcache/src/fc_log.c

18 
	~<°dlib.h
>

19 
	~<°d¨g.h
>

20 
	~<˘y≥.h
>

21 
	~<time.h
>

22 
	~<sys/°©.h
>

23 
	~<f˙é.h
>

25 
	~<fc_c‹e.h
>

27 
loggî
 
	gloggî
;

30 
	$log_öô
(
Àvñ
, *
«me
)

32 
loggî
 *
l
 = &logger;

34 
l
->
Àvñ
 = 
	`MAX
(
LOG_EMERG
, 
	`MIN
÷evñ, 
LOG_PVERB
));

35 
l
->
«me
 =Çame;

36 i‡(
«me
 =
NULL
 || !
	`°æí
(name)) {

37 
l
->
fd
 = 
STDERR_FILENO
;

39 
l
->
fd
 = 
	`›í
(
«me
, 
O_WRONLY
 | 
O_APPEND
 | 
O_CREAT
, 0644);

40 i‡(
l
->
fd
 < 0) {

41 
	`log_°dîr
("›íögÜog fûê'%s' faûed: %s", 
«me
,

42 
	`°ªº‹
(
î∫o
));

48 
	}
}

51 
	$log_deöô
()

53 
loggî
 *
l
 = &logger;

55 i‡(
l
->
fd
 !
STDERR_FILENO
) {

56 
	`˛o£
(
l
->
fd
);

58 
	}
}

61 
	$log_ª›í
()

63 
loggî
 *
l
 = &logger;

65 i‡(
l
->
fd
 !
STDERR_FILENO
) {

66 
	`˛o£
(
l
->
fd
);

67 
l
->
fd
 = 
	`›í
÷->
«me
, 
O_WRONLY
 | 
O_APPEND
 | 
O_CREAT
, 0644);

68 i‡(
l
->
fd
 < 0) {

69 
	`log_°dîr
("ª›íögÜog fûê'%s' faûed, ign‹ed: %s", 
l
->
«me
,

70 
	`°ªº‹
(
î∫o
));

73 
	}
}

76 
	$log_Àvñ_up
()

78 
loggî
 *
l
 = &logger;

80 i‡(
l
->
Àvñ
 < 
LOG_PVERB
) {

81 
l
->
Àvñ
++;

82 
	`loga
("u∞logÜevñÅÿ%d", 
l
->
Àvñ
);

84 
	}
}

87 
	$log_Àvñ_down
()

89 
loggî
 *
l
 = &logger;

91 i‡(
l
->
Àvñ
 > 
LOG_EMERG
) {

92 
l
->
Àvñ
--;

93 
	`loga
("dow¿logÜevñÅÿ%d", 
l
->
Àvñ
);

95 
	}
}

98 
	$log_Àvñ_£t
(
Àvñ
)

100 
loggî
 *
l
 = &logger;

102 
l
->
Àvñ
 = 
	`MAX
(
LOG_EMERG
, 
	`MIN
÷evñ, 
LOG_PVERB
));

103 
	`loga
("£àlogÜevñÅÿ%d", 
l
->
Àvñ
);

104 
	}
}

107 
	$log_loggabÀ
(
Àvñ
)

109 
loggî
 *
l
 = &logger;

111 i‡(
Àvñ
 > 
l
->level) {

116 
	}
}

119 
	$_log
(c⁄° *
fûe
, 
löe
, 
∑nic
, c⁄° *
fmt
, ...)

121 
loggî
 *
l
 = &logger;

122 
Àn
, 
size
, 
î∫o_ßve
;

123 
buf
[
LOG_MAX_LEN
], *
time°r
;

124 
va_li°
 
¨gs
;

125 
tm
 *
loˇl
;

126 
time_t
 
t
;

127 
ssize_t
 
n
;

129 i‡(
l
->
fd
 < 0) {

133 
î∫o_ßve
 = 
î∫o
;

134 
Àn
 = 0;

135 
size
 = 
LOG_MAX_LEN
;

137 
t
 = 
	`time
(
NULL
);

138 
loˇl
 = 
	`loˇ…ime
(&
t
);

139 
time°r
 = 
	`as˘ime
(
loˇl
);

141 
Àn
 +
	`fc_s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "[%.*s] %s:%d ",

142 
	`°æí
(
time°r
Ë- 1,Åime°r, 
fûe
, 
löe
);

144 
	`va_°¨t
(
¨gs
, 
fmt
);

145 
Àn
 +
	`fc_vs˙¥ötf
(
buf
 +Üí, 
size
 -Üí, 
fmt
, 
¨gs
);

146 
	`va_íd
(
¨gs
);

148 
buf
[
Àn
++] = '\n';

150 
n
 = 
	`wrôe
(
l
->
fd
, 
buf
, 
Àn
);

151 i‡(
n
 < 0) {

152 
l
->
√º‹
++;

155 
î∫o
 = 
î∫o_ßve
;

157 i‡(
∑nic
) {

158 
	`ab‹t
();

160 
	}
}

163 
	$_log_°dîr
(c⁄° *
fmt
, ...)

165 
loggî
 *
l
 = &logger;

166 
Àn
, 
size
, 
î∫o_ßve
;

167 
buf
[4 * 
LOG_MAX_LEN
];

168 
va_li°
 
¨gs
;

169 
ssize_t
 
n
;

171 
î∫o_ßve
 = 
î∫o
;

172 
Àn
 = 0;

173 
size
 = 4 * 
LOG_MAX_LEN
;

175 
	`va_°¨t
(
¨gs
, 
fmt
);

176 
Àn
 +
	`fc_vs˙¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

177 
	`va_íd
(
¨gs
);

179 
buf
[
Àn
++] = '\n';

181 
n
 = 
	`wrôe
(
STDERR_FILENO
, 
buf
, 
Àn
);

182 i‡(
n
 < 0) {

183 
l
->
√º‹
++;

186 
î∫o
 = 
î∫o_ßve
;

187 
	}
}

194 
	$_log_hexdump
(*
d©a
, 
d©Æí
)

196 
loggî
 *
l
 = &logger;

197 
buf
[8 * 
LOG_MAX_LEN
];

198 
i
, 
off
, 
Àn
, 
size
, 
î∫o_ßve
;

199 
ssize_t
 
n
;

201 i‡(
l
->
fd
 < 0) {

206 
î∫o_ßve
 = 
î∫o
;

207 
off
 = 0;

208 
Àn
 = 0;

209 
size
 = 8 * 
LOG_MAX_LEN
;

211 
d©Æí
 !0 && (
Àn
 < 
size
 - 1)) {

212 *
ßve
, *
°r
;

213 
c
;

214 
ßvñí
;

216 
Àn
 +
	`fc_s˙¥ötf
(
buf
 +Üí, 
size
 -Üí, "%08x ", 
off
);

218 
ßve
 = 
d©a
;

219 
ßvñí
 = 
d©Æí
;

221 
i
 = 0; 
d©Æí
 !0 && i < 16; 
d©a
++, datalen--, i++) {

222 
c
 = ()(*
d©a
);

223 
°r
 = (
i
 == 7) ? " " : " ";

224 
Àn
 +
	`fc_s˙¥ötf
(
buf
 +Üí, 
size
 -Üí, "%02x%s", 
c
, 
°r
);

226  ; 
i
 < 16; i++) {

227 
°r
 = (
i
 == 7) ? " " : " ";

228 
Àn
 +
	`fc_s˙¥ötf
(
buf
 +Üí, 
size
 -Üí, " %s", 
°r
);

231 
d©a
 = 
ßve
;

232 
d©Æí
 = 
ßvñí
;

234 
Àn
 +
	`fc_s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, " |");

236 
i
 = 0; 
d©Æí
 !0 && i < 16; 
d©a
++, datalen--, i++) {

237 
c
 = ()(
	`i•röt
(*
d©a
) ? *data : '.');

238 
Àn
 +
	`fc_s˙¥ötf
(
buf
 +Üí, 
size
 -Üí, "%c", 
c
);

240 
Àn
 +
	`fc_s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "|\n");

242 
off
 += 16;

245 
n
 = 
	`fc_wrôe
(
l
->
fd
, 
buf
, 
Àn
);

246 i‡(
n
 < 0) {

247 
l
->
√º‹
++;

250 
î∫o
 = 
î∫o_ßve
;

251 
	}
}

	@/home/hx/fatcache/src/fc_log.h

18 #i‚de‡
_FC_LOG_H_


19 
	#_FC_LOG_H_


	)

21 
	sloggî
 {

22 *
	m«me
;

23 
	mÀvñ
;

24 
	mfd
;

25 
	m√º‹
;

28 
	#LOG_EMERG
 0

	)

29 
	#LOG_ALERT
 1

	)

30 
	#LOG_CRIT
 2

	)

31 
	#LOG_ERR
 3

	)

32 
	#LOG_WARN
 4

	)

33 
	#LOG_NOTICE
 5

	)

34 
	#LOG_INFO
 6

	)

35 
	#LOG_DEBUG
 7

	)

36 
	#LOG_VERB
 8

	)

37 
	#LOG_VVERB
 9

	)

38 
	#LOG_VVVERB
 10

	)

39 
	#LOG_PVERB
 11

	)

41 
	#LOG_MAX_LEN
 256

	)

54 #i‡
deföed
 
FC_DEBUG_LOG
 && FC_DEBUG_LOG == 1

56 
	#log_debug
(
_Àvñ
, ...) do { \

57 i‡(
	`log_loggabÀ
(
_Àvñ
) != 0) { \

58 
	`_log
(
__FILE__
, 
__LINE__
, 0, 
__VA_ARGS__
); \

60 } 0)

	)

62 
	#log_hexdump
(
_Àvñ
, 
_d©a
, 
_d©Æí
, ...) do { \

63 i‡(
	`log_loggabÀ
(
_Àvñ
) != 0) { \

64 
	`_log
(
__FILE__
,
__LINE__
, 0, 
__VA_ARGS__
); \

65 
	`_log_hexdump
((*)(
_d©a
), ()(
_d©Æí
)); \

67 } 0)

	)

71 
	#log_debug
(
_Àvñ
, ...)

	)

72 
	#log_hexdump
(
_Àvñ
, 
_d©a
, 
_d©Æí
, ...)

	)

76 
	#log_°dîr
(...) do { \

77 
	`_log_°dîr
(
__VA_ARGS__
); \

78 } 0)

	)

80 
	#loga
(...) do { \

81 
	`_log
(
__FILE__
, 
__LINE__
, 0, 
__VA_ARGS__
); \

82 } 0)

	)

84 
	#loga_hexdump
(
_d©a
, 
_d©Æí
, ...) do { \

85 
	`_log
(
__FILE__
,
__LINE__
, 0, 
__VA_ARGS__
); \

86 
	`_log_hexdump
((*)(
_d©a
), ()(
_d©Æí
)); \

88 

	)

89 
	#log_îr‹
(...) do { \

90 i‡(
	`log_loggabÀ
(
LOG_ALERT
) != 0) { \

91 
	`_log
(
__FILE__
, 
__LINE__
, 0, 
__VA_ARGS__
); \

93 } 0)

	)

95 
	#log_w¨n
(...) do { \

96 i‡(
	`log_loggabÀ
(
LOG_WARN
) != 0) { \

97 
	`_log
(
__FILE__
, 
__LINE__
, 0, 
__VA_ARGS__
); \

99 } 0)

	)

101 
	#log_∑nic
(...) do { \

102 i‡(
	`log_loggabÀ
(
LOG_EMERG
) != 0) { \

103 
	`_log
(
__FILE__
, 
__LINE__
, 1, 
__VA_ARGS__
); \

105 } 0)

	)

107 
log_öô
(
Àvñ
, *
fûíame
);

108 
log_deöô
();

109 
log_Àvñ_up
();

110 
log_Àvñ_down
();

111 
log_Àvñ_£t
(
Àvñ
);

112 
log_ª›í
();

113 
log_loggabÀ
(
Àvñ
);

114 
_log
(c⁄° *
fûe
, 
löe
, 
∑nic
, c⁄° *
fmt
, ...);

115 
_log_°dîr
(c⁄° *
fmt
, ...);

116 
_log_hexdump
(*
d©a
, 
d©Æí
);

	@/home/hx/fatcache/src/fc_mbuf.c

18 
	~<°dlib.h
>

19 
	~<°rög.h
>

21 
	~<fc_c‹e.h
>

23 
uöt32_t
 
	gn‰ì_mbufq
;

24 
mhdr
 
	g‰ì_mbufq
;

26 
size_t
 
	gmbuf_chunk_size
;

27 
size_t
 
	gmbuf_off£t
;

29 
mbuf
 *

30 
	$_mbuf_gë
()

32 
mbuf
 *mbuf;

33 
uöt8_t
 *
buf
;

35 i‡(!
	`STAILQ_EMPTY
(&
‰ì_mbufq
)) {

36 
	`ASSERT
(
n‰ì_mbufq
 > 0);

38 
mbuf
 = 
	`STAILQ_FIRST
(&
‰ì_mbufq
);

39 
n‰ì_mbufq
--;

40 
	`STAILQ_REMOVE_HEAD
(&
‰ì_mbufq
, 
√xt
);

42 
	`ASSERT
(
mbuf
->
magic
 =
MBUF_MAGIC
);

43 
d⁄e
;

46 
buf
 = 
	`fc_Æloc
(
mbuf_chunk_size
);

47 i‡(
buf
 =
NULL
) {

48  
NULL
;

70 
mbuf
 = (mbu‡*)(
buf
 + 
mbuf_off£t
);

71 
mbuf
->
magic
 = 
MBUF_MAGIC
;

73 
d⁄e
:

74 
	`STAILQ_NEXT
(
mbuf
, 
√xt
Ë
NULL
;

75  
mbuf
;

76 
	}
}

78 
mbuf
 *

79 
	$mbuf_gë
()

81 
mbuf
 *mbuf;

82 
uöt8_t
 *
buf
;

84 
mbuf
 = 
	`_mbuf_gë
();

85 i‡(
mbuf
 =
NULL
) {

86  
NULL
;

89 
buf
 = (
uöt8_t
 *)
mbuf
 - 
mbuf_off£t
;

90 
mbuf
->
°¨t
 = 
buf
;

91 
mbuf
->
íd
 = 
buf
 + 
mbuf_off£t
;

93 
	`ASSERT
(
mbuf
->
íd
 - mbuf->
°¨t
 =()
mbuf_off£t
);

94 
	`ASSERT
(
mbuf
->
°¨t
 < mbuf->
íd
);

96 
mbuf
->
pos
 = mbuf->
°¨t
;

97 
mbuf
->
œ°
 = mbuf->
°¨t
;

99 
	`log_debug
(
LOG_VVERB
, "gë mbu‡%p", 
mbuf
);

101  
mbuf
;

102 
	}
}

105 
	$mbuf_‰ì
(
mbuf
 *mbuf)

107 
uöt8_t
 *
buf
;

109 
	`log_debug
(
LOG_VVERB
, "puàmbu‡%∞À¿%d", 
mbuf
, mbuf->
œ°
 - mbuf->
pos
);

111 
	`ASSERT
(
	`STAILQ_NEXT
(
mbuf
, 
√xt
Ë=
NULL
);

112 
	`ASSERT
(
mbuf
->
magic
 =
MBUF_MAGIC
);

114 
buf
 = (
uöt8_t
 *)
mbuf
 - 
mbuf_off£t
;

115 
	`fc_‰ì
(
buf
);

116 
	}
}

119 
	$mbuf_put
(
mbuf
 *mbuf)

121 
	`log_debug
(
LOG_VVERB
, "puàmbu‡%∞À¿%d", 
mbuf
, mbuf->
œ°
 - mbuf->
pos
);

123 
	`ASSERT
(
	`STAILQ_NEXT
(
mbuf
, 
√xt
Ë=
NULL
);

124 
	`ASSERT
(
mbuf
->
magic
 =
MBUF_MAGIC
);

126 
n‰ì_mbufq
++;

127 
	`STAILQ_INSERT_HEAD
(&
‰ì_mbufq
, 
mbuf
, 
√xt
);

128 
	}
}

135 
	$mbuf_ªwöd
(
mbuf
 *mbuf)

137 
mbuf
->
pos
 = mbuf->
°¨t
;

138 
mbuf
->
œ°
 = mbuf->
°¨t
;

139 
	}
}

145 
uöt32_t


146 
	$mbuf_Àngth
(
mbuf
 *mbuf)

148 
	`ASSERT
(
mbuf
->
œ°
 >mbuf->
pos
);

150  (
uöt32_t
)(
mbuf
->
œ°
 - mbuf->
pos
);

151 
	}
}

157 
uöt32_t


158 
	$mbuf_size
(
mbuf
 *mbuf)

160 
	`ASSERT
(
mbuf
->
íd
 >mbuf->
œ°
);

162  (
uöt32_t
)(
mbuf
->
íd
 - mbuf->
œ°
);

163 
	}
}

169 
size_t


170 
	$mbuf_d©a_size
()

172  
mbuf_off£t
;

173 
	}
}

179 
boﬁ


180 
	$mbuf_c⁄èös
(
mbuf
 *mbuf, 
uöt8_t
 *
p
)

182 
	`ASSERT
(
p
 !
NULL
);

184 i‡(
p
 >
mbuf
->
°¨t
 &&Ö < mbuf->
œ°
) {

185 
	`ASSERT
(
p
 < 
mbuf
->
íd
);

186  
åue
;

189  
Ál£
;

190 
	}
}

196 
	$mbuf_ö£π
(
mhdr
 *mhdr, 
mbuf
 *mbuf)

198 
	`STAILQ_INSERT_TAIL
(
mhdr
, 
mbuf
, 
√xt
);

199 
	`log_debug
(
LOG_VVERB
, "ö£π mbu‡%∞À¿%d", 
mbuf
, mbuf->
œ°
 - mbuf->
pos
);

200 
	}
}

206 
	$mbuf_ªmove
(
mhdr
 *mhdr, 
mbuf
 *mbuf)

208 
	`log_debug
(
LOG_VVERB
, "ªmovêmbu‡%∞À¿%d", 
mbuf
, mbuf->
œ°
 - mbuf->
pos
);

210 
	`STAILQ_REMOVE
(
mhdr
, 
mbuf
, mbuf, 
√xt
);

211 
	`STAILQ_NEXT
(
mbuf
, 
√xt
Ë
NULL
;

212 
	}
}

221 
	$mbuf_c›y
(
mbuf
 *mbuf, 
uöt8_t
 *
pos
, 
size_t
 
size
)

223 i‡(
size
 == 0) {

228 
	`ASSERT
(!
	`mbuf_fuŒ
(
mbuf
Ë&& 
size
 <
	`mbuf_size
(mbuf));

231 
	`ASSERT
(
pos
 < 
mbuf
->
°¨t
 ||Öo†>mbuf->
íd
);

233 
	`fc_mem˝y
(
mbuf
->
œ°
, 
pos
, 
size
);

234 
mbuf
->
œ°
 +
size
;

235 
	}
}

241 
r°©us_t


242 
	$mbuf_c›y_‰om
(
mhdr
 *mhdr, 
uöt8_t
 *
pos
, 
size_t
 
size
)

244 
mbuf
 *mbuf;

245 
size_t
 
n
;

247 i‡(
size
 == 0) {

248  
FC_OK
;

251 
	`STAILQ_FOREACH
(
mbuf
, 
mhdr
, 
√xt
) {

252 
	`ASSERT
(
mbuf
->
magic
 =
MBUF_MAGIC
);

256 
mbuf
 = 
	`STAILQ_LAST
(
mhdr
, mbuf, 
√xt
);

257 i‡(
mbuf
 =
NULL
 || 
	`mbuf_fuŒ
(mbuf)) {

258 
mbuf
 = 
	`mbuf_gë
();

259 i‡(
mbuf
 =
NULL
) {

260  
FC_ENOMEM
;

262 
	`STAILQ_INSERT_TAIL
(
mhdr
, 
mbuf
, 
√xt
);

265 
n
 = 
	`MIN
(
	`mbuf_size
(
mbuf
), 
size
);

267 
	`mbuf_c›y
(
mbuf
, 
pos
, 
n
);

268 
pos
 +
n
;

269 
size
 -
n
;

271 } 
size
 > 0);

273  
FC_OK
;

274 
	}
}

281 
	$mbuf_c›y_to
(
mhdr
 *mhdr, 
uöt8_t
 *
m¨kî
, uöt8_à*
pos
, 
size_t
 
size
)

283 
mbuf
 *mbuf;

284 
size_t
 
n
;

286 i‡(
size
 == 0) {

290 
mbuf
 = 
	`STAILQ_FIRST
(
mhdr
); mbu‡!
NULL
;

291 
mbuf
 = 
	`STAILQ_NEXT
(mbuf, 
√xt
)) {

293 i‡(
	`mbuf_c⁄èös
(
mbuf
, 
m¨kî
)) {

294 
n
 = 
	`MIN
(
size
, 
mbuf
->
œ°
 - 
m¨kî
);

296 
	`fc_mem˝y
(
pos
, 
m¨kî
, 
n
);

297 
pos
 +
n
;

298 
size
 -
n
;

303 
	`ASSERT
(
mbuf
 !
NULL
);

305 
mbuf
 = 
	`STAILQ_NEXT
(mbuf, 
√xt
); mbu‡!
NULL
 && 
size
 > 0;

306 
mbuf
 = 
	`STAILQ_NEXT
(mbuf, 
√xt
)) {

307 
n
 = 
	`MIN
(
size
, 
	`mbuf_Àngth
(
mbuf
));

309 
	`fc_mem˝y
(
pos
, 
mbuf
->pos, 
n
);

310 
pos
 +
n
;

311 
size
 -
n
;

313 
	}
}

322 
mbuf
 *

323 
	$mbuf_•lô
(
mhdr
 *
h
, 
uöt8_t
 *
pos
, 
mbuf_c›y_t
 
cb
, *
cb¨g
)

325 
mbuf
 *mbuf, *
nbuf
;

326 
size_t
 
size
;

328 
	`ASSERT
(!
	`STAILQ_EMPTY
(
h
));

330 
mbuf
 = 
	`STAILQ_LAST
(
h
, mbuf, 
√xt
);

331 
	`ASSERT
(
pos
 >
mbuf
->po†&&Öo†<mbuf->
œ°
);

333 
nbuf
 = 
	`mbuf_gë
();

334 i‡(
nbuf
 =
NULL
) {

335  
NULL
;

338 i‡(
cb
 !
NULL
) {

340 
	`cb
(
nbuf
, 
cb¨g
);

344 
size
 = (
size_t
)(
mbuf
->
œ°
 - 
pos
);

345 
	`mbuf_c›y
(
nbuf
, 
pos
, 
size
);

348 
mbuf
->
œ°
 = 
pos
;

350 
	`log_debug
(
LOG_VVERB
, "•lô i¡ÿmbu‡%∞À¿%"
PRIu32
"ándÇbuf %pÜen "

351 "%"
PRIu32
" c›õd %zu byãs", 
mbuf
, 
	`mbuf_Àngth
(mbuf), 
nbuf
,

352 
	`mbuf_Àngth
(
nbuf
), 
size
);

354  
nbuf
;

355 
	}
}

358 
	$mbuf_öô
()

360 
n‰ì_mbufq
 = 0;

361 
	`STAILQ_INIT
(&
‰ì_mbufq
);

363 
mbuf_chunk_size
 = 
MBUF_SIZE
;

364 
mbuf_off£t
 = 
mbuf_chunk_size
 - 
MBUF_HSIZE
;

366 
	`log_debug
(
LOG_DEBUG
, "mbuf hsize %d chunk size %zu offset %zuÜength %zu",

367 
MBUF_HSIZE
, 
mbuf_chunk_size
, 
mbuf_off£t
, mbuf_offset);

368 
	}
}

371 
	$mbuf_deöô
()

373 !
	`STAILQ_EMPTY
(&
‰ì_mbufq
)) {

374 
mbuf
 *mbu‡
	`STAILQ_FIRST
(&
‰ì_mbufq
);

375 
	`mbuf_ªmove
(&
‰ì_mbufq
, 
mbuf
);

376 
	`mbuf_‰ì
(
mbuf
);

377 
n‰ì_mbufq
--;

379 
	`ASSERT
(
n‰ì_mbufq
 == 0);

380 
	}
}

	@/home/hx/fatcache/src/fc_mbuf.h

18 #i‚de‡
_FC_MBUF_H_


19 
	#_FC_MBUF_H_


	)

21 
	~<fc_c‹e.h
>

23 (*
	tmbuf_c›y_t
)(
	tmbuf
 *, *);

25 
	smbuf
 {

26 
uöt32_t
 
magic
;

27 
	`STAILQ_ENTRY
(
mbuf
Ë
√xt
;

28 
uöt8_t
 *
pos
;

29 
uöt8_t
 *
œ°
;

30 
uöt8_t
 *
°¨t
;

31 
uöt8_t
 *
íd
;

34 
	`STAILQ_HEAD
(
mhdr
, 
mbuf
);

36 
	#MBUF_MAGIC
 0xdódbìf

	)

37 
	#MBUF_MIN_SIZE
 512

	)

38 
	#MBUF_MAX_SIZE
 65536

	)

39 
	#MBUF_SIZE
 8192

	)

40 
	#MBUF_HSIZE
 (
mbuf
)

	)

42 
ölöe
 
boﬁ


43 
	$mbuf_em±y
(
mbuf
 *mbuf)

45  
mbuf
->
pos
 =mbuf->
œ°
 ? 
åue
 : 
Ál£
;

46 
	}
}

48 
ölöe
 
boﬁ


49 
	$mbuf_fuŒ
(
mbuf
 *mbuf)

51  
mbuf
->
œ°
 =mbuf->
íd
 ? 
åue
 : 
Ál£
;

52 
	}
}

54 
mbuf_öô
();

55 
mbuf_deöô
();

56 
mbuf
 *
mbuf_gë
();

57 
mbuf_put
(
mbuf
 *mbuf);

58 
mbuf_ªwöd
(
mbuf
 *mbuf);

59 
uöt32_t
 
mbuf_Àngth
(
mbuf
 *mbuf);

60 
uöt32_t
 
mbuf_size
(
mbuf
 *mbuf);

61 
size_t
 
mbuf_d©a_size
();

62 
boﬁ
 
mbuf_c⁄èös
(
mbuf
 *mbuf, 
uöt8_t
 *
p
);

63 
mbuf_ö£π
(
mhdr
 *mhdr, 
mbuf
 *mbuf);

64 
mbuf_ªmove
(
mhdr
 *mhdr, 
mbuf
 *mbuf);

65 
mbuf_c›y
(
mbuf
 *mbuf, 
uöt8_t
 *
pos
, 
size_t
 
size
);

66 
r°©us_t
 
mbuf_c›y_‰om
(
mhdr
 *mhdr, 
uöt8_t
 *
pos
, 
size_t
 
size
);

67 
mbuf_c›y_to
(
mhdr
 *mhdr, 
uöt8_t
 *
m¨kî
, uöt8_à*
pos
, 
size_t
 
size
);

68 
mbuf
 *
mbuf_•lô
(
mhdr
 *
h
, 
uöt8_t
 *
pos
, 
mbuf_c›y_t
 
cb
, *
cb¨g
);

	@/home/hx/fatcache/src/fc_memcache.c

18 
	~<˘y≥.h
>

20 
	~<fc_c‹e.h
>

21 
	~<fc_memˇche.h
>

33 
	#MEMCACHE_MAX_KEY_LENGTH
 250

	)

39 
boﬁ


40 
	$memˇche_°‹age
(
msg
 *
r
)

42 
r
->
ty≥
) {

43 
MSG_REQ_SET
:

44 
MSG_REQ_CAS
:

45 
MSG_REQ_ADD
:

46 
MSG_REQ_REPLACE
:

47 
MSG_REQ_APPEND
:

48 
MSG_REQ_PREPEND
:

49  
åue
;

55  
Ál£
;

56 
	}
}

62 
boﬁ


63 
	$memˇche_ˇs
(
msg
 *
r
)

65 i‡(
r
->
ty≥
 =
MSG_REQ_CAS
) {

66  
åue
;

69  
Ál£
;

70 
	}
}

76 
boﬁ


77 
	$memˇche_ªåõvÆ
(
msg
 *
r
)

79 
r
->
ty≥
) {

80 
MSG_REQ_GET
:

81 
MSG_REQ_GETS
:

82  
åue
;

88  
Ál£
;

89 
	}
}

95 
boﬁ


96 
	$memˇche_¨ôhmëic
(
msg
 *
r
)

98 
r
->
ty≥
) {

99 
MSG_REQ_INCR
:

100 
MSG_REQ_DECR
:

101  
åue
;

107  
Ál£
;

108 
	}
}

114 
boﬁ


115 
	$memˇche_dñëe
(
msg
 *
r
)

117 i‡(
r
->
ty≥
 =
MSG_REQ_DELETE
) {

118  
åue
;

121  
Ál£
;

122 
	}
}

128 
boﬁ


129 
	$memˇche_key
(
msg
 *
r
)

131 
r
->
ty≥
) {

132 
MSG_REQ_GET
:

133 
MSG_REQ_GETS
:

134 
MSG_REQ_DELETE
:

135 
MSG_REQ_CAS
:

136 
MSG_REQ_SET
:

137 
MSG_REQ_ADD
:

138 
MSG_REQ_REPLACE
:

139 
MSG_REQ_APPEND
:

140 
MSG_REQ_PREPEND
:

141 
MSG_REQ_INCR
:

142 
MSG_REQ_DECR
:

143  
åue
;

149  
Ál£
;

150 
	}
}

156 
boﬁ


157 
	$memˇche_quô
(
msg
 *
r
)

159 i‡(
r
->
ty≥
 =
MSG_REQ_QUIT
) {

160  
åue
;

163  
Ál£
;

164 
	}
}

170 
boﬁ


171 
	$memˇche_vîsi⁄
(
msg
 *
r
)

173 i‡(
r
->
ty≥
 =
MSG_REQ_VERSION
) {

174  
åue
;

177  
Ál£
;

178 
	}
}

181 
	$memˇche_∑r£_ªq
(
msg
 *
r
)

183 
mbuf
 *
b
;

184 
uöt8_t
 *
p
, *
m
;

185 
uöt8_t
 
ch
;

187 
SW_START
,

188 
SW_REQ_TYPE
,

189 
SW_SPACES_BEFORE_KEY
,

190 
SW_KEY
,

191 
SW_SPACES_BEFORE_KEYS
,

192 
SW_SPACES_BEFORE_FLAGS
,

193 
SW_FLAGS
,

194 
SW_SPACES_BEFORE_EXPIRY
,

195 
SW_EXPIRY
,

196 
SW_SPACES_BEFORE_VLEN
,

197 
SW_VLEN
,

198 
SW_SPACES_BEFORE_CAS
,

199 
SW_CAS
,

200 
SW_RUNTO_VAL
,

201 
SW_VAL
,

202 
SW_SPACES_BEFORE_NUM
,

203 
SW_NUM
,

204 
SW_RUNTO_CRLF
,

205 
SW_CRLF
,

206 
SW_NOREPLY
,

207 
SW_AFTER_NOREPLY
,

208 
SW_ALMOST_DONE
,

209 
SW_SENTINEL


210 } 
°©e
;

212 
°©e
 = 
r
->state;

213 
b
 = 
	`STAILQ_LAST
(&
r
->
mhdr
, 
mbuf
, 
√xt
);

215 
	`ASSERT
(
r
->
ªque°
);

216 
	`ASSERT
(
°©e
 >
SW_START
 && sèã < 
SW_SENTINEL
);

217 
	`ASSERT
(
b
 !
NULL
);

218 
	`ASSERT
(
b
->
pos
 <b->
œ°
);

221 
	`ASSERT
(
r
->
pos
 !
NULL
);

222 
	`ASSERT
(
r
->
pos
 >
b
->po†&&Ñ->po†<b->
œ°
);

224 
p
 = 
r
->
pos
;Ö < 
b
->
œ°
;Ö++) {

225 
ch
 = *
p
;

227 
°©e
) {

229 
SW_START
:

230 i‡(
ch
 == ' ') {

234 i‡(!
	`i¶owî
(
ch
)) {

235 
îr‹
;

239 
r
->
tokí
 = 
p
;

240 
°©e
 = 
SW_REQ_TYPE
;

244 
SW_REQ_TYPE
:

245 i‡(
ch
 =' ' || ch =
CR
) {

247 
m
 = 
r
->
tokí
;

248 
r
->
tokí
 = 
NULL
;

249 
r
->
ty≥
 = 
MSG_UNKNOWN
;

251 
p
 - 
m
) {

254 i‡(
	`°r4cmp
(
m
, 'g', 'e', 't', ' ')) {

255 
r
->
ty≥
 = 
MSG_REQ_GET
;

259 i‡(
	`°r4cmp
(
m
, 's', 'e', 't', ' ')) {

260 
r
->
ty≥
 = 
MSG_REQ_SET
;

264 i‡(
	`°r4cmp
(
m
, 'a', 'd', 'd', ' ')) {

265 
r
->
ty≥
 = 
MSG_REQ_ADD
;

269 i‡(
	`°r4cmp
(
m
, 'c', 'a', 's', ' ')) {

270 
r
->
ty≥
 = 
MSG_REQ_CAS
;

277 i‡(
	`°r4cmp
(
m
, 'g', 'e', 't', 's')) {

278 
r
->
ty≥
 = 
MSG_REQ_GETS
;

282 i‡(
	`°r4cmp
(
m
, 'i', 'n', 'c', 'r')) {

283 
r
->
ty≥
 = 
MSG_REQ_INCR
;

287 i‡(
	`°r4cmp
(
m
, 'd', 'e', 'c', 'r')) {

288 
r
->
ty≥
 = 
MSG_REQ_DECR
;

292 i‡(
	`°r4cmp
(
m
, 'q', 'u', 'i', 't')) {

293 
r
->
ty≥
 = 
MSG_REQ_QUIT
;

294 
r
->
quô
 = 1;

301 i‡(
	`°r6cmp
(
m
, 'a', 'p', 'p', 'e', 'n', 'd')) {

302 
r
->
ty≥
 = 
MSG_REQ_APPEND
;

306 i‡(
	`°r6cmp
(
m
, 'd', 'e', 'l', 'e', 't', 'e')) {

307 
r
->
ty≥
 = 
MSG_REQ_DELETE
;

314 i‡(
	`°r7cmp
(
m
, 'p', 'r', 'e', 'p', 'e', 'n', 'd')) {

315 
r
->
ty≥
 = 
MSG_REQ_PREPEND
;

319 i‡(
	`°r7cmp
(
m
, 'r', 'e', 'p', 'l', 'a', 'c', 'e')) {

320 
r
->
ty≥
 = 
MSG_REQ_REPLACE
;

324 i‡(
	`°r7cmp
(
m
, 'v', 'e', 'r', 's', 'i', 'o', 'n')) {

325 
r
->
ty≥
 = 
MSG_REQ_VERSION
;

332 i‡(
	`memˇche_key
(
r
)) {

333 i‡(
ch
 =
CR
) {

334 
îr‹
;

336 
°©e
 = 
SW_SPACES_BEFORE_KEY
;

337 } i‡(
	`memˇche_quô
(
r
Ë|| 
	`memˇche_vîsi⁄
(r)) {

338 
p
 =Ö - 1;

339 
°©e
 = 
SW_CRLF
;

341 
îr‹
;

343 } i‡(!
	`i¶owî
(
ch
)) {

344 
îr‹
;

349 
SW_SPACES_BEFORE_KEY
:

350 i‡(
ch
 != ' ') {

351 
p
 =Ö - 1;

352 
°©e
 = 
SW_KEY
;

357 
SW_KEY
:

358 i‡(
r
->
tokí
 =
NULL
) {

359 
r
->
tokí
 = 
p
;

360 
r
->
key_°¨t
 = 
p
;

363 i‡(
ch
 =' ' || ch =
CR
) {

364 i‡((
p
 - 
r
->
key_°¨t
Ë> 
MEMCACHE_MAX_KEY_LENGTH
) {

365 
	`log_îr‹
("∑r£d badÑeq %"
PRIu64
" ofÅype %d with key "

367 "maximum keyÜígth", 
r
->
id
,Ñ->
ty≥
, 16,

368 
r
->
key_°¨t
, 
p
 -Ñ->key_start);

369 
îr‹
;

371 
r
->
key_íd
 = 
p
;

372 
r
->
tokí
 = 
NULL
;

375 i‡(
	`memˇche_°‹age
(
r
)) {

376 
°©e
 = 
SW_SPACES_BEFORE_FLAGS
;

377 } i‡(
	`memˇche_¨ôhmëic
(
r
)) {

378 
°©e
 = 
SW_SPACES_BEFORE_NUM
;

379 } i‡(
	`memˇche_dñëe
(
r
)) {

380 
°©e
 = 
SW_RUNTO_CRLF
;

381 } i‡(
	`memˇche_ªåõvÆ
(
r
)) {

382 
°©e
 = 
SW_SPACES_BEFORE_KEYS
;

384 
°©e
 = 
SW_RUNTO_CRLF
;

387 i‡(
ch
 =
CR
) {

388 i‡(
	`memˇche_°‹age
(
r
Ë|| 
	`memˇche_¨ôhmëic
(r)) {

389 
îr‹
;

391 
p
 =Ö - 1;

397 
SW_SPACES_BEFORE_KEYS
:

398 
	`ASSERT
(
	`memˇche_ªåõvÆ
(
r
));

399 
ch
) {

403 
CR
:

404 
°©e
 = 
SW_ALMOST_DONE
;

408 
r
->
tokí
 = 
p
;

409 
‰agmít
;

414 
SW_SPACES_BEFORE_FLAGS
:

415 i‡(
ch
 != ' ') {

416 i‡(!
	`isdigô
(
ch
)) {

417 
îr‹
;

419 
p
 =Ö - 1;

420 
°©e
 = 
SW_FLAGS
;

425 
SW_FLAGS
:

426 i‡(
r
->
tokí
 =
NULL
) {

428 
r
->
tokí
 = 
p
;

429 
r
->
Êags
 = 0;

432 i‡(
	`isdigô
(
ch
)) {

433 
r
->
Êags
 =Ñ->Êag†* 10 + (
uöt32_t
)(
ch
 - '0');

434 } i‡(
ch
 == ' ') {

436 
r
->
tokí
 = 
NULL
;

437 
°©e
 = 
SW_SPACES_BEFORE_EXPIRY
;

439 
îr‹
;

444 
SW_SPACES_BEFORE_EXPIRY
:

445 i‡(
ch
 != ' ') {

446 i‡(!
	`isdigô
(
ch
)) {

447 
îr‹
;

449 
p
 =Ö - 1;

450 
°©e
 = 
SW_EXPIRY
;

455 
SW_EXPIRY
:

456 i‡(
r
->
tokí
 =
NULL
) {

458 
r
->
tokí
 = 
p
;

459 
r
->
expúy
 = 0;

462 i‡(
	`isdigô
(
ch
)) {

463 
r
->
expúy
 =Ñ->expúy * 10 + (
uöt32_t
)(
ch
 - '0');

464 } i‡(
ch
 == ' ') {

466 
r
->
tokí
 = 
NULL
;

467 
°©e
 = 
SW_SPACES_BEFORE_VLEN
;

469 
îr‹
;

474 
SW_SPACES_BEFORE_VLEN
:

475 i‡(
ch
 != ' ') {

476 i‡(!
	`isdigô
(
ch
)) {

477 
îr‹
;

479 
p
 =Ö - 1;

480 
°©e
 = 
SW_VLEN
;

485 
SW_VLEN
:

486 i‡(
r
->
tokí
 =
NULL
) {

488 
r
->
tokí
 = 
p
;

489 
r
->
vÀn
 = 0;

492 i‡(
	`isdigô
(
ch
)) {

493 
r
->
vÀn
 =Ñ->vÀ¿* 10 + (
uöt32_t
)(
ch
 - '0');

494 } i‡(
	`memˇche_ˇs
(
r
)) {

495 i‡(
ch
 != ' ') {

496 
îr‹
;

499 
r
->
rvÀn
 =Ñ->
vÀn
;

500 
p
 =Ö - 1;

501 
r
->
tokí
 = 
NULL
;

502 
°©e
 = 
SW_SPACES_BEFORE_CAS
;

503 } i‡(
ch
 =' ' || ch =
CR
) {

505 
r
->
rvÀn
 =Ñ->
vÀn
;

506 
p
 =Ö - 1;

507 
r
->
tokí
 = 
NULL
;

508 
°©e
 = 
SW_RUNTO_CRLF
;

510 
îr‹
;

515 
SW_SPACES_BEFORE_CAS
:

516 i‡(
ch
 != ' ') {

517 i‡(!
	`isdigô
(
ch
)) {

518 
îr‹
;

520 
p
 =Ö - 1;

521 
°©e
 = 
SW_CAS
;

526 
SW_CAS
:

527 i‡(
r
->
tokí
 =
NULL
) {

529 
r
->
tokí
 = 
p
;

530 
r
->
ˇs
 = 0;

533 i‡(
	`isdigô
(
ch
)) {

534 
r
->
ˇs
 =Ñ->ˇ†* 10ULL + (
uöt64_t
)(
ch
 - '0');

535 } i‡(
ch
 =' ' || ch =
CR
) {

537 
p
 =Ö - 1;

538 
r
->
tokí
 = 
NULL
;

539 
°©e
 = 
SW_RUNTO_CRLF
;

541 
îr‹
;

546 
SW_RUNTO_VAL
:

547 
ch
) {

548 
LF
:

550 
°©e
 = 
SW_VAL
;

554 
îr‹
;

559 
SW_VAL
:

560 i‡(
r
->
vÆue
 =
NULL
) {

561 
r
->
vÆue
 = 
p
;

563 
m
 = 
p
 + 
r
->
rvÀn
;

564 i‡(
m
 >
b
->
œ°
) {

565 
	`ASSERT
(
r
->
rvÀn
 >(
uöt32_t
)(
b
->
œ°
 - 
p
));

566 
r
->
rvÀn
 -(
uöt32_t
)(
b
->
œ°
 - 
p
);

567 
m
 = 
b
->
œ°
 - 1;

568 
p
 = 
m
;

571 *
m
) {

572 
CR
:

574 
p
 = 
m
;

575 
°©e
 = 
SW_ALMOST_DONE
;

579 
îr‹
;

584 
SW_SPACES_BEFORE_NUM
:

585 i‡(
ch
 != ' ') {

586 i‡(!
	`isdigô
(
ch
)) {

587 
îr‹
;

589 
p
 =Ö - 1;

590 
°©e
 = 
SW_NUM
;

595 
SW_NUM
:

596 i‡(
r
->
tokí
 =
NULL
) {

598 
r
->
tokí
 = 
p
;

599 
r
->
num
 = 0;

602 i‡(
	`isdigô
(
ch
)) {

603 
r
->
num
 =Ñ->num * 10ULL + (
uöt64_t
)(
ch
 - '0');

604 } i‡(
ch
 =' ' || ch =
CR
) {

605 
r
->
tokí
 = 
NULL
;

607 
p
 =Ö - 1;

608 
°©e
 = 
SW_RUNTO_CRLF
;

610 
îr‹
;

615 
SW_RUNTO_CRLF
:

616 
ch
) {

621 i‡(
	`memˇche_°‹age
(
r
Ë|| 
	`memˇche_¨ôhmëic
‘Ë|| 
	`memˇche_dñëe
(r)) {

622 
p
 =Ö - 1;

623 
°©e
 = 
SW_NOREPLY
;

625 
îr‹
;

630 
CR
:

631 i‡(
	`memˇche_°‹age
(
r
)) {

632 
°©e
 = 
SW_RUNTO_VAL
;

634 
°©e
 = 
SW_ALMOST_DONE
;

640 
îr‹
;

645 
SW_NOREPLY
:

646 i‡(
r
->
tokí
 =
NULL
) {

648 
r
->
tokí
 = 
p
;

651 
ch
) {

653 
CR
:

654 
m
 = 
r
->
tokí
;

655 i‡(((
p
 - 
m
Ë=7Ë&& 
	`°r7cmp
(m, 'n', 'o', 'r', 'e', 'p', 'l', 'y')) {

656 
	`ASSERT
(
	`memˇche_°‹age
(
r
Ë|| 
	`memˇche_¨ôhmëic
‘Ë|| 
	`memˇche_dñëe
(r));

657 
r
->
tokí
 = 
NULL
;

659 
r
->
n‹ïly
 = 1;

660 
°©e
 = 
SW_AFTER_NOREPLY
;

661 
p
 =Ö - 1;

663 
îr‹
;

669 
SW_AFTER_NOREPLY
:

670 
ch
) {

674 
CR
:

675 i‡(
	`memˇche_°‹age
(
r
)) {

676 
°©e
 = 
SW_RUNTO_VAL
;

678 
°©e
 = 
SW_ALMOST_DONE
;

683 
îr‹
;

688 
SW_CRLF
:

689 
ch
) {

693 
CR
:

694 
°©e
 = 
SW_ALMOST_DONE
;

698 
îr‹
;

703 
SW_ALMOST_DONE
:

704 
ch
) {

705 
LF
:

707 
d⁄e
;

710 
îr‹
;

715 
SW_SENTINEL
:

717 
	`NOT_REACHED
();

736 
	`ASSERT
(
p
 =
b
->
œ°
);

737 
r
->
pos
 = 
p
;

738 
r
->
°©e
 = state;

740 i‡(
b
->
œ°
 =b->
íd
 && 
r
->
tokí
 !
NULL
) {

741 
r
->
pos
 =Ñ->
tokí
;

742 
r
->
tokí
 = 
NULL
;

743 
r
->
ªsu…
 = 
MSG_PARSE_REPAIR
;

745 
r
->
ªsu…
 = 
MSG_PARSE_AGAIN
;

748 
	`log_hexdump
(
LOG_VERB
, 
b
->
pos
, 
	`mbuf_Àngth
(b), "∑r£dÑeq %"
PRIu64
"Ñes %d "

749 "ty≥ %d sèã %dÑpo†%d o‡%d", 
r
->
id
,Ñ->
ªsu…
,Ñ->
ty≥
,

750 
r
->
°©e
,Ñ->
pos
 - 
b
->pos, b->
œ°
 - b->pos);

753 
‰agmít
:

754 
	`ASSERT
(
p
 !
b
->
œ°
);

755 
	`ASSERT
(
r
->
tokí
 !
NULL
);

756 
r
->
pos
 =Ñ->
tokí
;

757 
r
->
tokí
 = 
NULL
;

758 
r
->
°©e
 = state;

759 
r
->
ªsu…
 = 
MSG_PARSE_FRAGMENT
;

761 
	`log_hexdump
(
LOG_VERB
, 
b
->
pos
, 
	`mbuf_Àngth
(b), "∑r£dÑeq %"
PRIu64
"Ñes %d "

762 "ty≥ %d sèã %dÑpo†%d o‡%d", 
r
->
id
,Ñ->
ªsu…
,Ñ->
ty≥
,

763 
r
->
°©e
,Ñ->
pos
 - 
b
->pos, b->
œ°
 - b->pos);

766 
d⁄e
:

767 
	`ASSERT
(
r
->
ty≥
 > 
MSG_UNKNOWN
 &&Ñ->ty≥ < 
MSG_SENTINEL
);

768 
r
->
pos
 = 
p
 + 1;

769 
	`ASSERT
(
r
->
pos
 <
b
->
œ°
);

770 
r
->
°©e
 = 
SW_START
;

771 
r
->
ªsu…
 = 
MSG_PARSE_OK
;

773 
	`log_hexdump
(
LOG_VERB
, 
b
->
pos
, 
	`mbuf_Àngth
(b), "∑r£dÑeq %"
PRIu64
"Ñes %d "

774 "ty≥ %d sèã %dÑpo†%d o‡%d", 
r
->
id
,Ñ->
ªsu…
,Ñ->
ty≥
,

775 
r
->
°©e
,Ñ->
pos
 - 
b
->pos, b->
œ°
 - b->pos);

778 
îr‹
:

779 
r
->
ªsu…
 = 
MSG_PARSE_ERROR
;

780 
r
->
°©e
 = state;

781 
î∫o
 = 
EINVAL
;

783 
	`log_hexdump
(
LOG_INFO
, 
b
->
pos
, 
	`mbuf_Àngth
(b), "∑r£d badÑeq %"
PRIu64
" "

784 "ª†%dÅy≥ %d sèã %d", 
r
->
id
,Ñ->
ªsu…
,Ñ->
ty≥
,

785 
r
->
°©e
);

786 
	}
}

793 
	$memˇche_¥e_•lôc›y
(
mbuf
 *mbuf, *
¨g
)

795 
msg
 *
r
 = 
¨g
;

796 
°rög
 
gë
 = 
	`°rög
("get ");

797 
°rög
 
gës
 = 
	`°rög
("gets ");

799 
	`ASSERT
(
r
->
ªque°
);

800 
	`ASSERT
(
	`mbuf_em±y
(
mbuf
));

802 
r
->
ty≥
) {

803 
MSG_REQ_GET
:

804 
	`mbuf_c›y
(
mbuf
, 
gë
.
d©a
, gë.
Àn
);

807 
MSG_REQ_GETS
:

808 
	`mbuf_c›y
(
mbuf
, 
gës
.
d©a
, gës.
Àn
);

812 
	`NOT_REACHED
();

814 
	}
}

820 
r°©us_t


821 
	$memˇche_po°_•lôc›y
(
msg
 *
r
)

823 
mbuf
 *mbuf;

824 
°rög
 
¸lf
 = 
	`°rög
(
CRLF
);

826 
	`ASSERT
(
r
->
ªque°
);

827 
	`ASSERT
(!
	`STAILQ_EMPTY
(&
r
->
mhdr
));

829 
mbuf
 = 
	`STAILQ_LAST
(&
r
->
mhdr
, mbuf, 
√xt
);

830 
	`mbuf_c›y
(
mbuf
, 
¸lf
.
d©a
, cæf.
Àn
);

832  
FC_OK
;

833 
	}
}

	@/home/hx/fatcache/src/fc_memcache.h

18 #i‚de‡
_FC_MEMCACHE_H_


19 
	#_FC_MEMCACHE_H_


	)

21 
	~<fc_c‹e.h
>

23 
	#°r¸lf
(
m
) \

24 (*(
m
Ë='\r' && *((mË+ 1Ë='\n')

	)

26 #ifde‡
FC_LITTLE_ENDIAN


28 
	#°r4cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

29 (*(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
))

	)

31 
	#°r5cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
) \

32 (
	`°r4cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
Ë&& (m[4] =
c4
))

	)

34 
	#°r6cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
) \

35 (
	`°r4cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) && \

36 (((
uöt32_t
 *Ë
m
)[1] & 0xffffË=((
c5
 << 8Ë| 
c4
))

	)

38 
	#°r7cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
) \

39 (
	`°r6cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
Ë&& (m[6] =
c6
))

	)

41 
	#°r8cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) \

42 (
	`°r4cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) && \

43 (((
uöt32_t
 *Ë
m
)[1] =((
c7
 << 24Ë| (
c6
 << 16Ë| (
c5
 << 8Ë| 
c4
)))

	)

45 
	#°r9cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
) \

46 (
	`°r8cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
Ë&& m[8] =
c8
)

	)

48 
	#°r10cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
, 
c9
) \

49 (
	`°r8cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) && \

50 (((
uöt32_t
 *Ë
m
)[2] & 0xffffË=((
c9
 << 8Ë| 
c8
))

	)

52 
	#°r11cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
, 
c9
, 
c10
) \

53 (
	`°r10cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
, 
c9
Ë&& (m[10] =
c10
))

	)

55 
	#°r12cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
, 
c9
, 
c10
, 
c11
) \

56 (
	`°r8cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) && \

57 (((
uöt32_t
 *Ë
m
)[2] =((
c11
 << 24Ë| (
c10
 << 16Ë| (
c9
 << 8Ë| 
c8
)))

	)

61 
	#°r4cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

62 (
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
)

	)

64 
	#°r5cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
) \

65 (
	`°r4cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
Ë&& (m[4] =
c4
))

	)

67 
	#°r6cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
) \

68 (
	`°r5cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
Ë&& m[5] =
c5
)

	)

70 
	#°r7cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
) \

71 (
	`°r6cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
Ë&& m[6] =
c6
)

	)

73 
	#°r8cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) \

74 (
	`°r7cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
Ë&& m[7] =
c7
)

	)

76 
	#°r9cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
) \

77 (
	`°r8cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
Ë&& m[8] =
c8
)

	)

79 
	#°r10cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
, 
c9
) \

80 (
	`°r9cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
Ë&& m[9] =
c9
)

	)

82 
	#°r11cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
, 
c9
, 
c10
) \

83 (
	`°r10cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
, 
c9
Ë&& m[10] =
c10
)

	)

85 
	#°r12cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
, 
c9
, 
c10
, 
c11
) \

86 (
	`°r11cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
, 
c9
, 
c10
Ë&& m[11] =
c11
)

	)

90 
memˇche_∑r£_ªq
(
msg
 *
r
);

91 
memˇche_¥e_•lôc›y
(
mbuf
 *mbuf, *
¨g
);

92 
r°©us_t
 
memˇche_po°_•lôc›y
(
msg
 *
r
);

	@/home/hx/fatcache/src/fc_message.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

21 
	~<sys/uio.h
>

23 
	~<fc_c‹e.h
>

25 #i‡(
IOV_MAX
 > 128)

26 
	#FC_IOV_MAX
 128

	)

28 
	#FC_IOV_MAX
 
IOV_MAX


	)

31 
	#DEFINE_ACTION
(
_hash
, 
_«me
Ë
	`°rög
(_«me),

	)

32 
°rög
 
	gmsg_°rögs
[] = {

33 
MSG_CODEC
–
DEFINE_ACTION
 )

34 
nuŒ_°rög


36 #unde‡
DEFINE_ACTION


38 
uöt64_t
 
	gmsg_id
;

39 
uöt64_t
 
	g‰ag_id
;

40 
uöt32_t
 
	gn‰ì_msgq
;

41 
msg_tqh
 
	g‰ì_msgq
;

43 
msg
 *

44 
	$_msg_gë
()

46 
msg
 *msg;

48 i‡(!
	`TAILQ_EMPTY
(&
‰ì_msgq
)) {

49 
	`ASSERT
(
n‰ì_msgq
 > 0);

51 
msg
 = 
	`TAILQ_FIRST
(&
‰ì_msgq
);

52 
n‰ì_msgq
--;

53 
	`TAILQ_REMOVE
(&
‰ì_msgq
, 
msg
, 
m_tqe
);

54 
d⁄e
;

57 
msg
 = 
	`fc_Æloc
((*msg));

58 i‡(
msg
 =
NULL
) {

59  
NULL
;

62 
d⁄e
:

64 
msg
->
id
 = ++
msg_id
;

65 
msg
->
≥î
 = 
NULL
;

66 
msg
->
ow√r
 = 
NULL
;

68 
	`STAILQ_INIT
(&
msg
->
mhdr
);

69 
msg
->
mÀn
 = 0;

71 
msg
->
°©e
 = 0;

72 
msg
->
pos
 = 
NULL
;

73 
msg
->
tokí
 = 
NULL
;

75 
msg
->
∑r£r
 = 
memˇche_∑r£_ªq
;

76 
msg
->
ªsu…
 = 
MSG_PARSE_OK
;

78 
msg
->
ty≥
 = 
MSG_UNKNOWN
;

80 
msg
->
key_°¨t
 = 
NULL
;

81 
msg
->
key_íd
 = 
NULL
;

82 
msg
->
hash
 = 0;

85 
msg
->
Êags
 = 0;

86 
msg
->
expúy
 = 0;

87 
msg
->
vÀn
 = 0;

88 
msg
->
rvÀn
 = 0;

89 
msg
->
vÆue
 = 
NULL
;

90 
msg
->
ˇs
 = 0;

91 
msg
->
num
 = 0;

93 
msg
->
‰ag_ow√r
 = 
NULL
;

94 
msg
->
n‰ag
 = 0;

95 
msg
->
‰ag_id
 = 0;

97 
msg
->
îr
 = 0;

98 
msg
->
îr‹
 = 0;

99 
msg
->
ªque°
 = 0;

100 
msg
->
quô
 = 0;

101 
msg
->
n‹ïly
 = 0;

102 
msg
->
d⁄e
 = 0;

103 
msg
->
fú°_‰agmít
 = 0;

104 
msg
->
œ°_‰agmít
 = 0;

105 
msg
->
swÆlow
 = 0;

107  
msg
;

108 
	}
}

110 
msg
 *

111 
	$msg_gë
(
c⁄n
 *c⁄n, 
boﬁ
 
ªque°
)

113 
msg
 *msg;

115 
msg
 = 
	`_msg_gë
();

116 i‡(
msg
 =
NULL
) {

117  
NULL
;

120 
msg
->
ow√r
 = 
c⁄n
;

121 
msg
->
ªque°
 =Ñequest ? 1 : 0;

123 
	`log_debug
(
LOG_VVERB
, "gë msg %∞id %"
PRIu64
"Ñequest %d owner sd %d",

124 
msg
, msg->
id
, msg->
ªque°
, 
c⁄n
->
sd
);

126  
msg
;

127 
	}
}

130 
	$msg_‰ì
(
msg
 *msg)

132 
	`ASSERT
(
	`STAILQ_EMPTY
(&
msg
->
mhdr
));

134 
	`log_debug
(
LOG_VVERB
, "‰ì msg %∞id %"
PRIu64
"", 
msg
, msg->
id
);

135 
	`fc_‰ì
(
msg
);

136 
	}
}

139 
	$msg_put
(
msg
 *msg)

141 
	`log_debug
(
LOG_VVERB
, "puàmsg %∞id %"
PRIu64
"", 
msg
, msg->
id
);

143 !
	`STAILQ_EMPTY
(&
msg
->
mhdr
)) {

144 
mbuf
 *mbu‡
	`STAILQ_FIRST
(&
msg
->
mhdr
);

145 
	`mbuf_ªmove
(&
msg
->
mhdr
, 
mbuf
);

146 
	`mbuf_put
(
mbuf
);

149 
n‰ì_msgq
++;

150 
	`TAILQ_INSERT_HEAD
(&
‰ì_msgq
, 
msg
, 
m_tqe
);

151 
	}
}

153 
boﬁ


154 
	$msg_em±y
(
msg
 *msg)

156  
msg
->
mÀn
 =0 ? 
åue
 : 
Ál£
;

157 
	}
}

159 
r°©us_t


160 
	$msg_∑r£d
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg)

162 
msg
 *
nmsg
;

163 
mbuf
 *mbuf, *
nbuf
;

165 
mbuf
 = 
	`STAILQ_LAST
(&
msg
->
mhdr
, mbuf, 
√xt
);

166 i‡(
msg
->
pos
 =
mbuf
->
œ°
) {

168 
	`ªq_ªcv_d⁄e
(
˘x
, 
c⁄n
, 
msg
, 
NULL
);

169  
FC_OK
;

178 
nbuf
 = 
	`mbuf_•lô
(&
msg
->
mhdr
, msg->
pos
, 
NULL
, NULL);

179 i‡(
nbuf
 =
NULL
) {

180  
FC_ENOMEM
;

183 
nmsg
 = 
	`msg_gë
(
msg
->
ow√r
, msg->
ªque°
);

184 i‡(
nmsg
 =
NULL
) {

185 
	`mbuf_put
(
nbuf
);

186  
FC_ENOMEM
;

188 
	`mbuf_ö£π
(&
nmsg
->
mhdr
, 
nbuf
);

189 
nmsg
->
pos
 = 
nbuf
->pos;

192 
nmsg
->
mÀn
 = 
	`mbuf_Àngth
(
nbuf
);

193 
msg
->
mÀn
 -
nmsg
->mlen;

195 
	`ªq_ªcv_d⁄e
(
˘x
, 
c⁄n
, 
msg
, 
nmsg
);

197  
FC_OK
;

198 
	}
}

200 
r°©us_t


201 
	$msg_‰agmít
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg)

203 
r°©us_t
 
°©us
;

204 
msg
 *
nmsg
;

205 
mbuf
 *
nbuf
;

207 
	`ASSERT
(
msg
->
ªque°
);

209 
nbuf
 = 
	`mbuf_•lô
(&
msg
->
mhdr
, msg->
pos
, 
memˇche_¥e_•lôc›y
, msg);

210 i‡(
nbuf
 =
NULL
) {

211  
FC_ENOMEM
;

214 
°©us
 = 
	`memˇche_po°_•lôc›y
(
msg
);

215 i‡(
°©us
 !
FC_OK
) {

216 
	`mbuf_put
(
nbuf
);

217  
°©us
;

220 
nmsg
 = 
	`msg_gë
(
msg
->
ow√r
, msg->
ªque°
);

221 i‡(
nmsg
 =
NULL
) {

222 
	`mbuf_put
(
nbuf
);

223  
FC_ENOMEM
;

225 
	`mbuf_ö£π
(&
nmsg
->
mhdr
, 
nbuf
);

226 
nmsg
->
pos
 = 
nbuf
->pos;

229 
nmsg
->
mÀn
 = 
	`mbuf_Àngth
(
nbuf
);

230 
msg
->
mÀn
 -
nmsg
->mlen;

270 i‡(
msg
->
‰ag_id
 == 0) {

271 
msg
->
‰ag_id
 = ++frag_id;

272 
msg
->
fú°_‰agmít
 = 1;

273 
msg
->
n‰ag
 = 1;

274 
msg
->
‰ag_ow√r
 = msg;

276 
nmsg
->
‰ag_id
 = 
msg
->frag_id;

277 
msg
->
œ°_‰agmít
 = 0;

278 
nmsg
->
œ°_‰agmít
 = 1;

279 
nmsg
->
‰ag_ow√r
 = 
msg
->frag_owner;

280 
msg
->
‰ag_ow√r
->
n‰ag
++;

282 
	`ªq_ªcv_d⁄e
(
˘x
, 
c⁄n
, 
msg
, 
nmsg
);

284  
FC_OK
;

285 
	}
}

287 
r°©us_t


288 
	$msg_ª∑ú
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg)

290 
mbuf
 *
nbuf
;

292 
nbuf
 = 
	`mbuf_•lô
(&
msg
->
mhdr
, msg->
pos
, 
NULL
, NULL);

293 i‡(
nbuf
 =
NULL
) {

294  
FC_ENOMEM
;

296 
	`mbuf_ö£π
(&
msg
->
mhdr
, 
nbuf
);

297 
msg
->
pos
 = 
nbuf
->pos;

299  
FC_OK
;

300 
	}
}

302 
r°©us_t


303 
	$msg_∑r£
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg)

305 
r°©us_t
 
°©us
;

307 i‡(
	`msg_em±y
(
msg
)) {

309 
	`ªq_ªcv_d⁄e
(
˘x
, 
c⁄n
, 
msg
, 
NULL
);

310  
FC_OK
;

313 
msg
->
	`∑r£r
(msg);

315 
msg
->
ªsu…
) {

316 
MSG_PARSE_OK
:

317 
°©us
 = 
	`msg_∑r£d
(
˘x
, 
c⁄n
, 
msg
);

320 
MSG_PARSE_FRAGMENT
:

321 
°©us
 = 
	`msg_‰agmít
(
˘x
, 
c⁄n
, 
msg
);

324 
MSG_PARSE_REPAIR
:

325 
°©us
 = 
	`msg_ª∑ú
(
˘x
, 
c⁄n
, 
msg
);

328 
MSG_PARSE_AGAIN
:

329 
°©us
 = 
FC_OK
;

333 
°©us
 = 
FC_ERROR
;

334 
c⁄n
->
îr
 = 
î∫o
;

338  
c⁄n
->
îr
 !0 ? 
FC_ERROR
 : 
°©us
;

339 
	}
}

341 
r°©us_t


342 
	$msg_ªcv_chaö
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg)

344 
r°©us_t
 
°©us
;

345 
msg
 *
nmsg
;

346 
mbuf
 *mbuf;

347 
size_t
 
msize
;

348 
ssize_t
 
n
;

350 
mbuf
 = 
	`STAILQ_LAST
(&
msg
->
mhdr
, mbuf, 
√xt
);

351 i‡(
mbuf
 =
NULL
 || 
	`mbuf_fuŒ
(mbuf)) {

352 
mbuf
 = 
	`mbuf_gë
();

353 i‡(
mbuf
 =
NULL
) {

354  
FC_ENOMEM
;

356 
	`mbuf_ö£π
(&
msg
->
mhdr
, 
mbuf
);

357 
msg
->
pos
 = 
mbuf
->pos;

359 
	`ASSERT
(
mbuf
->
íd
 - mbuf->
œ°
 > 0);

361 
msize
 = 
	`mbuf_size
(
mbuf
);

363 
n
 = 
	`c⁄n_ªcv
(
c⁄n
, 
mbuf
->
œ°
, 
msize
);

364 i‡(
n
 < 0) {

365 i‡(
n
 =
FC_EAGAIN
) {

366  
FC_OK
;

368  
FC_ERROR
;

371 
	`ASSERT
((
mbuf
->
œ°
 + 
n
Ë<mbuf->
íd
);

372 
mbuf
->
œ°
 +
n
;

373 
msg
->
mÀn
 +(
uöt32_t
)
n
;

376 
°©us
 = 
	`msg_∑r£
(
˘x
, 
c⁄n
, 
msg
);

377 i‡(
°©us
 !
FC_OK
) {

378  
°©us
;

382 
nmsg
 = 
	`ªq_ªcv_√xt
(
˘x
, 
c⁄n
, 
Ál£
);

383 i‡(
nmsg
 =
NULL
 ||Çmsg =
msg
) {

388 
msg
 = 
nmsg
;

391  
FC_OK
;

392 
	}
}

394 
r°©us_t


395 
	$msg_ªcv
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *conn)

397 
r°©us_t
 
°©us
;

398 
msg
 *msg;

400 
	`ASSERT
(
c⁄n
->
˛õ¡
);

401 
	`ASSERT
(
c⁄n
->
ªcv_a˘ive
);

403 
c⁄n
->
ªcv_ªady
 = 1;

405 
msg
 = 
	`ªq_ªcv_√xt
(
˘x
, 
c⁄n
, 
åue
);

406 i‡(
msg
 =
NULL
) {

407  
FC_OK
;

410 
°©us
 = 
	`msg_ªcv_chaö
(
˘x
, 
c⁄n
, 
msg
);

411 i‡(
°©us
 !
FC_OK
) {

412  
°©us
;

414 } 
c⁄n
->
ªcv_ªady
);

416  
FC_OK
;

417 
	}
}

419 
r°©us_t


420 
	$msg_£nd_chaö
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg)

422 
msg_tqh
 
£nd_msgq
;

423 
msg
 *
nmsg
;

424 
mbuf
 *mbuf, *
nbuf
;

425 
size_t
 
mÀn
;

426 
iovec
 *
ciov
, 
iov
[
FC_IOV_MAX
];

427 
¨øy
 
£ndv
;

428 
size_t
 
n£nd
, 
n£¡
;

429 
size_t
 
limô
;

430 
ssize_t
 
n
;

432 
	`TAILQ_INIT
(&
£nd_msgq
);

434 
	`¨øy_£t
(&
£ndv
, 
iov
, (iov[0]), 
FC_IOV_MAX
);

438 
n£nd
 = 0;

444 
limô
 = 
SSIZE_MAX
;

447 
	`ASSERT
(
c⁄n
->
smsg
 =
msg
);

449 
	`TAILQ_INSERT_TAIL
(&
£nd_msgq
, 
msg
, 
m_tqe
);

451 
mbuf
 = 
	`STAILQ_FIRST
(&
msg
->
mhdr
);

452 
mbuf
 !
NULL
 && 
	`¨øy_n
(&
£ndv
Ë< 
FC_IOV_MAX
 && 
n£nd
 < 
limô
;

453 
mbuf
 = 
nbuf
) {

454 
nbuf
 = 
	`STAILQ_NEXT
(
mbuf
, 
√xt
);

456 i‡(
	`mbuf_em±y
(
mbuf
)) {

460 
mÀn
 = 
	`mbuf_Àngth
(
mbuf
);

461 i‡((
n£nd
 + 
mÀn
Ë> 
limô
) {

462 
mÀn
 = 
limô
 - 
n£nd
;

465 
ciov
 = 
	`¨øy_push
(&
£ndv
);

466 
ciov
->
iov_ba£
 = 
mbuf
->
pos
;

467 
ciov
->
iov_Àn
 = 
mÀn
;

469 
n£nd
 +
mÀn
;

472 i‡(
	`¨øy_n
(&
£ndv
Ë>
FC_IOV_MAX
 || 
n£nd
 >
limô
) {

476 
msg
 = 
	`r•_£nd_√xt
(
˘x
, 
c⁄n
);

477 i‡(
msg
 =
NULL
) {

482 
	`ASSERT
(!
	`TAILQ_EMPTY
(&
£nd_msgq
));

484 
c⁄n
->
smsg
 = 
NULL
;

486 i‡(
n£nd
 != 0) {

487 
n
 = 
	`c⁄n_£ndv
(
c⁄n
, &
£ndv
, 
n£nd
);

489 
	`NOT_REACHED
();

490 
n
 = 0;

492 
n£¡
 = 
n
 > 0 ? (
size_t
)n : 0;

496 
msg
 = 
	`TAILQ_FIRST
(&
£nd_msgq
); msg !
NULL
; msg = 
nmsg
) {

497 
nmsg
 = 
	`TAILQ_NEXT
(
msg
, 
m_tqe
);

499 
	`TAILQ_REMOVE
(&
£nd_msgq
, 
msg
, 
m_tqe
);

501 i‡(
n£¡
 == 0) {

502 i‡(
msg
->
mÀn
 == 0) {

503 
	`r•_£nd_d⁄e
(
˘x
, 
c⁄n
, 
msg
);

509 
mbuf
 = 
	`STAILQ_FIRST
(&
msg
->
mhdr
); mbu‡!
NULL
; mbu‡
nbuf
) {

510 
nbuf
 = 
	`STAILQ_NEXT
(
mbuf
, 
√xt
);

512 i‡(
	`mbuf_em±y
(
mbuf
)) {

516 
mÀn
 = 
	`mbuf_Àngth
(
mbuf
);

517 i‡(
n£¡
 < 
mÀn
) {

519 
mbuf
->
pos
 +
n£¡
;

520 
	`ASSERT
(
mbuf
->
pos
 < mbuf->
œ°
);

521 
n£¡
 = 0;

526 
mbuf
->
pos
 = mbuf->
œ°
;

527 
n£¡
 -
mÀn
;

531 i‡(
mbuf
 =
NULL
) {

532 
	`r•_£nd_d⁄e
(
˘x
, 
c⁄n
, 
msg
);

536 
	`ASSERT
(
	`TAILQ_EMPTY
(&
£nd_msgq
));

538 i‡(
n
 >= 0) {

539  
FC_OK
;

542  (
n
 =
FC_EAGAIN
Ë? 
FC_OK
 : 
FC_ERROR
;

543 
	}
}

545 
r°©us_t


546 
	$msg_£nd
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *conn)

548 
r°©us_t
 
°©us
;

549 
msg
 *msg;

551 
	`ASSERT
(
c⁄n
->
˛õ¡
);

552 
	`ASSERT
(
c⁄n
->
£nd_a˘ive
);

554 
c⁄n
->
£nd_ªady
 = 1;

556 
msg
 = 
	`r•_£nd_√xt
(
˘x
, 
c⁄n
);

557 i‡(
msg
 =
NULL
) {

559  
FC_OK
;

562 
°©us
 = 
	`msg_£nd_chaö
(
˘x
, 
c⁄n
, 
msg
);

563 i‡(
°©us
 !
FC_OK
) {

564  
°©us
;

566 } 
c⁄n
->
£nd_ªady
);

568  
FC_OK
;

569 
	}
}

572 
	$msg_öô
()

574 
	`log_debug
(
LOG_DEBUG
, "msg sizê%d", (
msg
));

575 
msg_id
 = 0;

576 
‰ag_id
 = 0;

577 
n‰ì_msgq
 = 0;

578 
	`TAILQ_INIT
(&
‰ì_msgq
);

579 
	}
}

582 
	$msg_deöô
()

584 
msg
 *msg, *
nmsg
;

586 
msg
 = 
	`TAILQ_FIRST
(&
‰ì_msgq
); msg !
NULL
;

587 
msg
 = 
nmsg
, 
n‰ì_msgq
--) {

588 
	`ASSERT
(
n‰ì_msgq
 > 0);

589 
nmsg
 = 
	`TAILQ_NEXT
(
msg
, 
m_tqe
);

590 
	`msg_‰ì
(
msg
);

592 
	`ASSERT
(
n‰ì_msgq
 == 0);

593 
	}
}

	@/home/hx/fatcache/src/fc_message.h

18 #i‚de‡
_FC_MESSAGE_H_


19 
	#_FC_MESSAGE_H_


	)

21 
	~<fc_c‹e.h
>

23 (*
	tmsg_∑r£_t
)(
	tmsg
 *);

25 
	#MSG_CODEC
(
ACTION
) \

26 
	`ACTION
–
UNKNOWN
, "" ) \

27 
	`ACTION
–
REQ_GET
, "get " ) \

28 
	`ACTION
–
REQ_GETS
, "gets " ) \

29 
	`ACTION
–
REQ_DELETE
, "delete " ) \

30 
	`ACTION
–
REQ_CAS
, "cas " ) \

31 
	`ACTION
–
REQ_SET
, "set " ) \

32 
	`ACTION
–
REQ_ADD
, "add " ) \

33 
	`ACTION
–
REQ_REPLACE
, "replace " ) \

34 
	`ACTION
–
REQ_APPEND
, "append " ) \

35 
	`ACTION
–
REQ_PREPEND
, "prepend " ) \

36 
	`ACTION
–
REQ_INCR
, "incr " ) \

37 
	`ACTION
–
REQ_DECR
, "decr " ) \

38 
	`ACTION
–
REQ_VERSION
, "version " ) \

39 
	`ACTION
–
REQ_QUIT
, "quit " ) \

40 
	`ACTION
–
RSP_NUM
, "" ) \

41 
	`ACTION
–
RSP_VALUE
, "VALUE " ) \

42 
	`ACTION
–
RSP_END
, "END\r\n" ) \

43 
	`ACTION
–
RSP_STORED
, "STORED\r\n" ) \

44 
	`ACTION
–
RSP_NOT_STORED
, "NOT_STORED\r\n" ) \

45 
	`ACTION
–
RSP_EXISTS
, "EXISTS\r\n" ) \

46 
	`ACTION
–
RSP_NOT_FOUND
, "NOT_FOUND\r\n" ) \

47 
	`ACTION
–
RSP_DELETED
, "DELETED\r\n" ) \

48 
	`ACTION
–
RSP_CLIENT_ERROR
, "CLIENT_ERROR " ) \

49 
	`ACTION
–
RSP_SERVER_ERROR
, "SERVER_ERROR " ) \

50 
	`ACTION
–
RSP_VERSION
, "VERSION fatcache\r\n" ) \

51 
	`ACTION
–
CRLF
, "\r\n" ) \

52 
	`ACTION
–
EMPTY
, "" ) \

53 

	)

54 
	#DEFINE_ACTION
(
_hash
, 
_«me
Ë
MSG_
##_hash,

	)

55 
	emsg_ty≥
 {

56 
	`MSG_CODEC
–
DEFINE_ACTION
 )

57 
MSG_SENTINEL


58 } 
	tmsg_ty≥_t
;

59 #unde‡
DEFINE_ACTION


61 
	emsg_∑r£_ªsu…
 {

62 
MSG_PARSE_OK
,

63 
MSG_PARSE_ERROR
,

64 
MSG_PARSE_REPAIR
,

65 
MSG_PARSE_FRAGMENT
,

66 
MSG_PARSE_AGAIN
,

67 } 
	tmsg_∑r£_ªsu…_t
;

69 
	smsg
 {

70 
	`TAILQ_ENTRY
(
msg
Ë
c_tqe
;

71 
	`TAILQ_ENTRY
(
msg
Ë
m_tqe
;

73 
uöt64_t
 
id
;

74 
msg
 *
≥î
;

75 
c⁄n
 *
ow√r
;

77 
mhdr
 mhdr;

78 
uöt32_t
 
mÀn
;

80 
°©e
;

81 
uöt8_t
 *
pos
;

82 
uöt8_t
 *
tokí
;

84 
msg_∑r£_t
 
∑r£r
;

85 
msg_∑r£_ªsu…_t
 
ªsu…
;

87 
msg_ty≥_t
 
ty≥
;

89 
uöt8_t
 *
key_°¨t
;

90 
uöt8_t
 *
key_íd
;

92 
uöt32_t
 
hash
;

93 
uöt8_t
 
md
[20];

95 
uöt32_t
 
Êags
;

96 
uöt32_t
 
expúy
;

97 
uöt32_t
 
vÀn
;

98 
uöt32_t
 
rvÀn
;

99 
uöt8_t
 *
vÆue
;

100 
uöt64_t
 
ˇs
;

101 
uöt64_t
 
num
;

103 
msg
 *
‰ag_ow√r
;

104 
uöt32_t
 
n‰ag
;

105 
uöt64_t
 
‰ag_id
;

107 
îr_t
 
îr
;

108 
îr‹
:1;

109 
ªque°
:1;

110 
quô
:1;

111 
n‹ïly
:1;

112 
d⁄e
:1;

113 
fú°_‰agmít
:1;

114 
œ°_‰agmít
:1;

115 
swÆlow
:1;

118 
	`TAILQ_HEAD
(
msg_tqh
, 
msg
);

120 
boﬁ
 
	`msg_em±y
(
msg
 *msg);

121 
r°©us_t
 
	`msg_ªcv
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *conn);

122 
r°©us_t
 
	`msg_£nd
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *conn);

124 
msg
 *
	`ªq_gë
(
c⁄n
 *conn);

125 
	`ªq_put
(
msg
 *msg);

126 
msg
 *
	`ªq_ªcv_√xt
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
boﬁ
 
Æloc
);

128 
msg
 *
	`msg_gë
(
c⁄n
 *c⁄n, 
boﬁ
 
ªque°
);

129 
	`msg_put
(
msg
 *msg);

131 
	`msg_öô
();

132 
	`msg_deöô
();

134 
msg
 *
	`r•_gë
(
c⁄n
 *conn);

135 
	`r•_put
(
msg
 *msg);

137 
boﬁ
 
	`ªq_d⁄e
(
c⁄n
 *c⁄n, 
msg
 *msg);

138 
msg
 *
	`r•_£nd_√xt
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *conn);

140 
	`ªq_íqueue_omsgq
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg);

141 
	`ªq_dequeue_omsgq
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg);

142 
	`r•_£nd_d⁄e
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg);

143 
	`ªq_ªcv_d⁄e
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg, msg *
nmsg
);

145 
	`ªq_¥o˚ss_îr‹
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg, 
îr
);

148 
	`r•_£nd_°©us
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg, 
msg_ty≥_t
 
r•_ty≥
);

149 
	`r•_£nd_îr‹
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg, 
msg_ty≥_t
 
r•_ty≥
, 
îr
);

150 
	`r•_£nd_vÆue
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg, 
ôem
 *
ô
, 
uöt64_t
 
ˇs
);

151 
	`r•_£nd_num
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg, 
ôem
 *
ô
);

	@/home/hx/fatcache/src/fc_queue.h

50 #i‚de‡
_FC_QUEUE_H_


51 
	#_FC_QUEUE_H_


	)

53 
	~<fc_log.h
>

55 
	#__off£tof
(
ty≥
, 
fõld
Ë((
size_t
)(&(—y≥ *)
NULL
)->fõld))

	)

128 
	#QUEUE_MACRO_SCRUB
 1

	)

130 #i‡
deföed
 
FC_ASSERT_PANIC
 && FC_ASSERT_PANIC == 1

131 
	#QUEUE_MACRO_TRACE
 1

	)

132 
	#QUEUE_MACRO_ASSERT
 1

	)

135 #ifde‡
QUEUE_MACRO_SCRUB


137 
	#QMD_SAVELINK
(
«me
, 
lök
Ë**«mê(*)&÷ök)

	)

139 
	#TRASHIT
(
x
) do { \

140 (
x
Ë(*Ë
NULL
; \

141 } 0)

	)

145 
	#QMD_SAVELINK
(
«me
, 
lök
)

	)

146 
	#TRASHIT
(
x
)

	)

150 #ifde‡
QUEUE_MACRO_TRACE


153 
	sqm_åa˚
 {

154 *
	mœ°fûe
;

155 
	mœ°löe
;

156 *
	m¥evfûe
;

157 
	m¥evlöe
;

160 
	#TRACEBUF
 
qm_åa˚
 
åa˚
;

	)

162 
	#QMD_TRACE_HEAD
(
hód
) do { \

163 (
hód
)->
åa˚
.
¥evlöe
 = (hód)->åa˚.
œ°löe
; \

164 (
hód
)->
åa˚
.
¥evfûe
 = (hód)->åa˚.
œ°fûe
; \

165 (
hód
)->
åa˚
.
œ°löe
 = 
__LINE__
; \

166 (
hód
)->
åa˚
.
œ°fûe
 = 
__FILE__
; \

167 } 0)

	)

169 
	#QMD_TRACE_ELEM
(
ñem
) do { \

170 (
ñem
)->
åa˚
.
¥evlöe
 = (ñem)->åa˚.
œ°löe
; \

171 (
ñem
)->
åa˚
.
¥evfûe
 = (ñem)->åa˚.
œ°fûe
; \

172 (
ñem
)->
åa˚
.
œ°löe
 = 
__LINE__
; \

173 (
ñem
)->
åa˚
.
œ°fûe
 = 
__FILE__
; \

174 } 0)

	)

178 
	#QMD_TRACE_ELEM
(
ñem
)

	)

179 
	#QMD_TRACE_HEAD
(
hód
)

	)

180 
	#TRACEBUF


	)

187 
	#SLIST_HEAD
(
«me
, 
ty≥
) \

188 
	s«me
 { \

189 
ty≥
 *
¶h_fú°
; \

190 }

	)

192 
	#SLIST_HEAD_INITIALIZER
(
hód
) \

193 { 
NULL
 }

	)

195 
	#SLIST_ENTRY
(
ty≥
) \

197 
ty≥
 *
¶e_√xt
; \

198 }

	)

203 
	#SLIST_EMPTY
(
hód
Ë((hód)->
¶h_fú°
 =
NULL
)

	)

205 
	#SLIST_FIRST
(
hód
Ë((hód)->
¶h_fú°
)

	)

207 
	#SLIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

208 (
v¨
Ë
	`SLIST_FIRST
((
hód
)); \

209 (
v¨
); \

210 (
v¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
))

	)

212 
	#SLIST_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

213 (
v¨
Ë
	`SLIST_FIRST
((
hód
)); \

214 (
v¨
Ë&& ((
tv¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
), 1); \

215 (
v¨
Ë(
tv¨
))

	)

217 
	#SLIST_FOREACH_PREVPTR
(
v¨
, 
v¨p
, 
hód
, 
fõld
) \

218 (
v¨p
Ë&
	`SLIST_FIRST
((
hód
)); \

219 ((
v¨
Ë*(
v¨p
)Ë!
NULL
; \

220 (
v¨p
Ë&
	`SLIST_NEXT
((
v¨
), 
fõld
))

	)

222 
	#SLIST_INIT
(
hód
) do { \

223 
	`SLIST_FIRST
((
hód
)Ë
NULL
; \

224 } 0)

	)

226 
	#SLIST_INSERT_AFTER
(
¶i°ñm
, 
ñm
, 
fõld
) do { \

227 
	`SLIST_NEXT
((
ñm
), 
fõld
ËSLIST_NEXT((
¶i°ñm
), field); \

228 
	`SLIST_NEXT
((
¶i°ñm
), 
fõld
Ë(
ñm
); \

229 } 0)

	)

231 
	#SLIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

232 
	`SLIST_NEXT
((
ñm
), 
fõld
Ë
	`SLIST_FIRST
((
hód
)); \

233 
	`SLIST_FIRST
((
hód
)Ë(
ñm
); \

234 } 0)

	)

236 
	#SLIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
¶e_√xt
)

	)

238 
	#SLIST_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

239 i‡(
	`SLIST_FIRST
((
hód
)Ë=(
ñm
)) { \

240 
	`SLIST_REMOVE_HEAD
((
hód
), 
fõld
); \

242 
ty≥
 *
cuªlm
 = 
	`SLIST_FIRST
((
hód
)); \

243 
	`SLIST_NEXT
(
cuªlm
, 
fõld
Ë!(
ñm
)) { \

244 
cuªlm
 = 
	`SLIST_NEXT
(cuªlm, 
fõld
); \

246 
	`SLIST_REMOVE_AFTER
(
cuªlm
, 
fõld
); \

248 } 0)

	)

250 
	#SLIST_REMOVE_AFTER
(
ñm
, 
fõld
) do { \

251 
	`QMD_SAVELINK
(
ﬁd√xt
, 
	`SLIST_NEXT
(SLIST_NEXT(
ñm
, 
fõld
), field)); \

252 
	`SLIST_NEXT
(
ñm
, 
fõld
) = SLIST_NEXT(SLIST_NEXT(elm, field), field); \

253 
	`TRASHIT
(*
ﬁd√xt
); \

254 } 0)

	)

256 
	#SLIST_REMOVE_HEAD
(
hód
, 
fõld
) do { \

257 
	`QMD_SAVELINK
(
ﬁd√xt
, 
	`SLIST_NEXT
(
	`SLIST_FIRST
((
hód
)), 
fõld
)); \

258 
	`SLIST_FIRST
((
hód
)Ë
	`SLIST_NEXT
(SLIST_FIRST((hód)), 
fõld
); \

259 
	`TRASHIT
(*
ﬁd√xt
); \

260 } 0)

	)

265 
	#STAILQ_HEAD
(
«me
, 
ty≥
) \

266 
	s«me
 { \

267 
ty≥
 *
°qh_fú°
; \

268 
ty≥
 **
°qh_œ°
; \

269 }

	)

271 
	#STAILQ_HEAD_INITIALIZER
(
hód
) \

272 { 
NULL
, &(
hód
).
°qh_fú°
 }

	)

274 
	#STAILQ_ENTRY
(
ty≥
) \

276 
ty≥
 *
°qe_√xt
; \

277 }

	)

282 
	#STAILQ_CONCAT
(
hód1
, 
hód2
) do { \

283 i‡(!
	`STAILQ_EMPTY
((
hód2
))) { \

284 *(
hód1
)->
°qh_œ°
 = (
hód2
)->
°qh_fú°
; \

285 (
hód1
)->
°qh_œ°
 = (
hód2
)->stqh_last; \

286 
	`STAILQ_INIT
((
hód2
)); \

288 } 0)

	)

290 
	#STAILQ_EMPTY
(
hód
Ë((hód)->
°qh_fú°
 =
NULL
)

	)

292 
	#STAILQ_FIRST
(
hód
Ë((hód)->
°qh_fú°
)

	)

294 
	#STAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

295 (
v¨
Ë
	`STAILQ_FIRST
((
hód
)); \

296 (
v¨
); \

297 (
v¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
))

	)

299 
	#STAILQ_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

300 (
v¨
Ë
	`STAILQ_FIRST
((
hód
)); \

301 (
v¨
Ë&& ((
tv¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
), 1); \

302 (
v¨
Ë(
tv¨
))

	)

304 
	#STAILQ_INIT
(
hód
) do { \

305 
	`STAILQ_FIRST
((
hód
)Ë
NULL
; \

306 (
hód
)->
°qh_œ°
 = &
	`STAILQ_FIRST
((head)); \

307 } 0)

	)

309 
	#STAILQ_INSERT_AFTER
(
hód
, 
tqñm
, 
ñm
, 
fõld
) do { \

310 i‡((
	`STAILQ_NEXT
((
ñm
), 
fõld
ËSTAILQ_NEXT((
tqñm
), fõld)Ë=
NULL
)\

311 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

312 
	`STAILQ_NEXT
((
tqñm
), 
fõld
Ë(
ñm
); \

313 } 0)

	)

315 
	#STAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

316 i‡((
	`STAILQ_NEXT
((
ñm
), 
fõld
Ë
	`STAILQ_FIRST
((
hód
))Ë=
NULL
) \

317 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

318 
	`STAILQ_FIRST
((
hód
)Ë(
ñm
); \

319 } 0)

	)

321 
	#STAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

322 
	`STAILQ_NEXT
((
ñm
), 
fõld
Ë
NULL
; \

323 *(
hód
)->
°qh_œ°
 = (
ñm
); \

324 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

325 } 0)

	)

327 
	#STAILQ_LAST
(
hód
, 
ty≥
, 
fõld
) \

328 (
	`STAILQ_EMPTY
((
hód
)) ? \

329 
NULL
 : \

330 ((
ty≥
 *)(*) \

331 ((*)((
hód
)->
°qh_œ°
Ë- 
	`__off£tof
(
ty≥
, 
fõld
))))

	)

333 
	#STAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
°qe_√xt
)

	)

335 
	#STAILQ_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

336 i‡(
	`STAILQ_FIRST
((
hód
)Ë=(
ñm
)) { \

337 
	`STAILQ_REMOVE_HEAD
((
hód
), 
fõld
); \

340 
ty≥
 *
cuªlm
 = 
	`STAILQ_FIRST
((
hód
)); \

341 
	`STAILQ_NEXT
(
cuªlm
, 
fõld
Ë!(
ñm
)) \

342 
cuªlm
 = 
	`STAILQ_NEXT
(cuªlm, 
fõld
); \

343 
	`STAILQ_REMOVE_AFTER
(
hód
, 
cuªlm
, 
fõld
); \

345 } 0)

	)

347 
	#STAILQ_REMOVE_HEAD
(
hód
, 
fõld
) do { \

348 
	`QMD_SAVELINK
(
ﬁd√xt
, 
	`STAILQ_NEXT
(
	`STAILQ_FIRST
((
hód
)), 
fõld
)); \

349 i‡((
	`STAILQ_FIRST
((
hód
)) = \

350 
	`STAILQ_NEXT
(
	`STAILQ_FIRST
((
hód
)), 
fõld
)Ë=
NULL
) { \

351 (
hód
)->
°qh_œ°
 = &
	`STAILQ_FIRST
((head)); \

353 
	`TRASHIT
(*
ﬁd√xt
); \

354 } 0)

	)

356 
	#STAILQ_REMOVE_AFTER
(
hód
, 
ñm
, 
fõld
) do { \

357 
	`QMD_SAVELINK
(
ﬁd√xt
, 
	`STAILQ_NEXT
(STAILQ_NEXT(
ñm
, 
fõld
), field)); \

358 i‡((
	`STAILQ_NEXT
(
ñm
, 
fõld
) = \

359 
	`STAILQ_NEXT
(STAILQ_NEXT(
ñm
, 
fõld
), fõld)Ë=
NULL
) { \

360 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

362 
	`TRASHIT
(*
ﬁd√xt
); \

363 } 0)

	)

365 
	#STAILQ_SWAP
(
hód1
, 
hód2
, 
ty≥
) do { \

366 
ty≥
 *
sw≠_fú°
 = 
	`STAILQ_FIRST
(
hód1
); \

367 
ty≥
 **
sw≠_œ°
 = (
hód1
)->
°qh_œ°
; \

368 
	`STAILQ_FIRST
(
hód1
ËSTAILQ_FIRST(
hód2
); \

369 (
hód1
)->
°qh_œ°
 = (
hód2
)->stqh_last; \

370 
	`STAILQ_FIRST
(
hód2
Ë
sw≠_fú°
; \

371 (
hód2
)->
°qh_œ°
 = 
sw≠_œ°
; \

372 i‡(
	`STAILQ_EMPTY
(
hód1
)) \

373 (
hód1
)->
°qh_œ°
 = &
	`STAILQ_FIRST
(head1); \

374 i‡(
	`STAILQ_EMPTY
(
hód2
)) \

375 (
hód2
)->
°qh_œ°
 = &
	`STAILQ_FIRST
(head2); \

376 } 0)

	)

382 
	#LIST_HEAD
(
«me
, 
ty≥
) \

383 
	s«me
 { \

384 
ty≥
 *
lh_fú°
; \

385 }

	)

387 
	#LIST_HEAD_INITIALIZER
(
hód
) \

388 { 
NULL
 }

	)

390 
	#LIST_ENTRY
(
ty≥
) \

392 
ty≥
 *
À_√xt
; \

393 
ty≥
 **
À_¥ev
; \

394 }

	)

400 #ifde‡
QUEUE_MACRO_ASSERT


402 
	#QMD_LIST_CHECK_HEAD
(
hód
, 
fõld
) do { \

403 i‡(
	`LIST_FIRST
((
hód
)Ë!
NULL
 && \

404 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 != &LIST_FIRST((head))) { \

405 
	`log_∑nic
("BadÜi° hód %∞fú°->¥ev !hód", (*)(
hód
)); \

407 } 0)

	)

409 
	#QMD_LIST_CHECK_NEXT
(
ñm
, 
fõld
) do { \

410 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
 && \

411 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 !&(”lm)->fõld.
À_√xt
)) {\

412 
	`log_∑nic
("BadÜökÉlm %∞√xt->¥ev !ñm",(*)(
ñm
)); \

414 } 0)

	)

416 
	#QMD_LIST_CHECK_PREV
(
ñm
, 
fõld
) do { \

417 i‡(*(
ñm
)->
fõld
.
À_¥ev
 != (elm)) { \

418 
	`log_∑nic
("BadÜökÉlm %∞¥ev->√xà!ñm",(*)(
ñm
)); \

420 } 0)

	)

424 
	#QMD_LIST_CHECK_HEAD
(
hód
, 
fõld
)

	)

425 
	#QMD_LIST_CHECK_NEXT
(
ñm
, 
fõld
)

	)

426 
	#QMD_LIST_CHECK_PREV
(
ñm
, 
fõld
)

	)

430 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

432 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

434 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

435 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

436 (
v¨
); \

437 (
v¨
Ë
	`LIST_NEXT
((v¨), 
fõld
))

	)

439 
	#LIST_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

440 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

441 (
v¨
Ë&& ((
tv¨
Ë
	`LIST_NEXT
((v¨), 
fõld
), 1); \

442 (
v¨
Ë(
tv¨
))

	)

444 
	#LIST_INIT
(
hód
) do { \

445 
	`LIST_FIRST
((
hód
)Ë
NULL
; \

446 } 0)

	)

448 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

449 
	`QMD_LIST_CHECK_NEXT
(
li°ñm
, 
fõld
); \

450 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
ËLIST_NEXT((
li°ñm
), fõld)Ë!
NULL
)\

451 
	`LIST_NEXT
((
li°ñm
), 
fõld
)->fõld.
À_¥ev
 = \

452 &
	`LIST_NEXT
((
ñm
), 
fõld
); \

453 
	`LIST_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

454 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
li°ñm
), field); \

455 } 0)

	)

457 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

458 
	`QMD_LIST_CHECK_PREV
(
li°ñm
, 
fõld
); \

459 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

460 
	`LIST_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

461 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

462 (
li°ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field); \

463 } 0)

	)

465 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

466 
	`QMD_LIST_CHECK_HEAD
((
hód
), 
fõld
); \

467 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
Ë
	`LIST_FIRST
((
hód
))Ë!
NULL
) \

468 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field); \

469 
	`LIST_FIRST
((
hód
)Ë(
ñm
); \

470 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód
)); \

471 } 0)

	)

473 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

475 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

476 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
À_√xt
); \

477 
	`QMD_SAVELINK
(
ﬁd¥ev
, (
ñm
)->
fõld
.
À_¥ev
); \

478 
	`QMD_LIST_CHECK_NEXT
(
ñm
, 
fõld
); \

479 
	`QMD_LIST_CHECK_PREV
(
ñm
, 
fõld
); \

480 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
) \

481 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 = \

482 (
ñm
)->
fõld
.
À_¥ev
; \

483 *(
ñm
)->
fõld
.
À_¥ev
 = 
	`LIST_NEXT
((elm), field); \

484 
	`TRASHIT
(*
ﬁd√xt
); \

485 
	`TRASHIT
(*
ﬁd¥ev
); \

486 } 0)

	)

488 
	#LIST_SWAP
(
hód1
, 
hód2
, 
ty≥
, 
fõld
) do { \

489 
ty≥
 *
sw≠_tmp
 = 
	`LIST_FIRST
((
hód1
)); \

490 
	`LIST_FIRST
((
hód1
)ËLIST_FIRST((
hód2
)); \

491 
	`LIST_FIRST
((
hód2
)Ë
sw≠_tmp
; \

492 i‡((
sw≠_tmp
 = 
	`LIST_FIRST
((
hód1
))Ë!
NULL
) \

493 
sw≠_tmp
->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód1
)); \

494 i‡((
sw≠_tmp
 = 
	`LIST_FIRST
((
hód2
))Ë!
NULL
) \

495 
sw≠_tmp
->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód2
)); \

496 } 0)

	)

501 
	#TAILQ_HEAD
(
«me
, 
ty≥
) \

502 
	s«me
 { \

503 
ty≥
 *
tqh_fú°
; \

504 
ty≥
 **
tqh_œ°
; \

505 
TRACEBUF
 \

506 }

	)

508 
	#TAILQ_HEAD_INITIALIZER
(
hód
) \

509 { 
NULL
, &(
hód
).
tqh_fú°
 }

	)

511 
	#TAILQ_ENTRY
(
ty≥
) \

513 
ty≥
 *
tqe_√xt
; \

514 
ty≥
 **
tqe_¥ev
; \

515 
TRACEBUF
 \

516 }

	)

521 #ifde‡
QUEUE_MACRO_ASSERT


523 
	#QMD_TAILQ_CHECK_HEAD
(
hód
, 
fõld
) do { \

524 i‡(!
	`TAILQ_EMPTY
(
hód
) && \

525 
	`TAILQ_FIRST
((
hód
))->
fõld
.
tqe_¥ev
 != &TAILQ_FIRST((head))) { \

526 
	`log_∑nic
("BadÅaûq hód %∞fú°->¥ev !hód", (*)(
hód
)); \

528 } 0)

	)

530 
	#QMD_TAILQ_CHECK_TAIL
(
hód
, 
fõld
) do { \

531 i‡(*(
hód
)->
tqh_œ°
 !
NULL
) { \

532 
	`log_∑nic
("BadÅaûq NEXT(%p->tqh_œ°Ë!NULL",(*)(
hód
)); \

534 } 0)

	)

536 
	#QMD_TAILQ_CHECK_NEXT
(
ñm
, 
fõld
) do { \

537 i‡(
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë!
NULL
 && \

538 
	`TAILQ_NEXT
((
ñm
), 
fõld
)->fõld.
tqe_¥ev
 !&(”lm)->fõld.
tqe_√xt
)) {\

539 
	`log_∑nic
("BadÜökÉlm %∞√xt->¥ev !ñm",(*)(
ñm
)); \

541 } 0)

	)

543 
	#QMD_TAILQ_CHECK_PREV
(
ñm
, 
fõld
) do { \

544 i‡(*(
ñm
)->
fõld
.
tqe_¥ev
 != (elm)) { \

545 
	`log_∑nic
("BadÜökÉlm %∞¥ev->√xà!ñm",(*)(
ñm
)); \

547 } 0)

	)

551 
	#QMD_TAILQ_CHECK_HEAD
(
hód
, 
fõld
)

	)

552 
	#QMD_TAILQ_CHECK_TAIL
(
hód
, 
hód«me
)

	)

553 
	#QMD_TAILQ_CHECK_NEXT
(
ñm
, 
fõld
)

	)

554 
	#QMD_TAILQ_CHECK_PREV
(
ñm
, 
fõld
)

	)

558 
	#TAILQ_CONCAT
(
hód1
, 
hód2
, 
fõld
) do { \

559 i‡(!
	`TAILQ_EMPTY
(
hód2
)) { \

560 *(
hód1
)->
tqh_œ°
 = (
hód2
)->
tqh_fú°
; \

561 (
hód2
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = (
hód1
)->
tqh_œ°
; \

562 (
hód1
)->
tqh_œ°
 = (
hód2
)->tqh_last; \

563 
	`TAILQ_INIT
((
hód2
)); \

564 
	`QMD_TRACE_HEAD
(
hód1
); \

565 
	`QMD_TRACE_HEAD
(
hód2
); \

567 } 0)

	)

569 
	#TAILQ_EMPTY
(
hód
Ë((hód)->
tqh_fú°
 =
NULL
)

	)

571 
	#TAILQ_FIRST
(
hód
Ë((hód)->
tqh_fú°
)

	)

573 
	#TAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

574 (
v¨
Ë
	`TAILQ_FIRST
((
hód
)); \

575 (
v¨
); \

576 (
v¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
))

	)

578 
	#TAILQ_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

579 (
v¨
Ë
	`TAILQ_FIRST
((
hód
)); \

580 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
), 1); \

581 (
v¨
Ë(
tv¨
))

	)

583 
	#TAILQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
hód«me
, 
fõld
) \

584 (
v¨
Ë
	`TAILQ_LAST
((
hód
), 
hód«me
); \

585 (
v¨
); \

586 (
v¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
))

	)

588 
	#TAILQ_FOREACH_REVERSE_SAFE
(
v¨
, 
hód
, 
hód«me
, 
fõld
, 
tv¨
) \

589 (
v¨
Ë
	`TAILQ_LAST
((
hód
), 
hód«me
); \

590 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
), 1); \

591 (
v¨
Ë(
tv¨
))

	)

593 
	#TAILQ_INIT
(
hód
) do { \

594 
	`TAILQ_FIRST
((
hód
)Ë
NULL
; \

595 (
hód
)->
tqh_œ°
 = &
	`TAILQ_FIRST
((head)); \

596 
	`QMD_TRACE_HEAD
(
hód
); \

597 } 0)

	)

599 
	#TAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

600 
	`QMD_TAILQ_CHECK_NEXT
(
li°ñm
, 
fõld
); \

601 i‡((
	`TAILQ_NEXT
((
ñm
), 
fõld
ËTAILQ_NEXT((
li°ñm
), fõld)Ë!
NULL
) { \

602 
	`TAILQ_NEXT
((
ñm
), 
fõld
)->fõld.
tqe_¥ev
 = &TAILQ_NEXT((elm), field);\

604 (
hód
)->
tqh_œ°
 = &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

605 
	`QMD_TRACE_HEAD
(
hód
); \

607 
	`TAILQ_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

608 (
ñm
)->
fõld
.
tqe_¥ev
 = &
	`TAILQ_NEXT
((
li°ñm
), field); \

609 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

610 
	`QMD_TRACE_ELEM
(&
li°ñm
->
fõld
); \

611 } 0)

	)

613 
	#TAILQ_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

614 
	`QMD_TAILQ_CHECK_PREV
(
li°ñm
, 
fõld
); \

615 (
ñm
)->
fõld
.
tqe_¥ev
 = (
li°ñm
)->field.tqe_prev; \

616 
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

617 *(
li°ñm
)->
fõld
.
tqe_¥ev
 = (
ñm
); \

618 (
li°ñm
)->
fõld
.
tqe_¥ev
 = &
	`TAILQ_NEXT
((
ñm
), field); \

619 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

620 
	`QMD_TRACE_ELEM
(&
li°ñm
->
fõld
); \

621 } 0)

	)

623 
	#TAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

624 
	`QMD_TAILQ_CHECK_HEAD
(
hód
, 
fõld
); \

625 i‡((
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë
	`TAILQ_FIRST
((
hód
))Ë!
NULL
) \

626 
	`TAILQ_FIRST
((
hód
))->
fõld
.
tqe_¥ev
 = \

627 &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

629 (
hód
)->
tqh_œ°
 = &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

630 
	`TAILQ_FIRST
((
hód
)Ë(
ñm
); \

631 (
ñm
)->
fõld
.
tqe_¥ev
 = &
	`TAILQ_FIRST
((
hód
)); \

632 
	`QMD_TRACE_HEAD
(
hód
); \

633 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

634 } 0)

	)

636 
	#TAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

637 
	`QMD_TAILQ_CHECK_TAIL
(
hód
, 
fõld
); \

638 
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë
NULL
; \

639 (
ñm
)->
fõld
.
tqe_¥ev
 = (
hód
)->
tqh_œ°
; \

640 *(
hód
)->
tqh_œ°
 = (
ñm
); \

641 (
hód
)->
tqh_œ°
 = &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

642 
	`QMD_TRACE_HEAD
(
hód
); \

643 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

644 } 0)

	)

646 
	#TAILQ_LAST
(
hód
, 
hód«me
) \

647 (*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_œ°))

	)

649 
	#TAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
tqe_√xt
)

	)

651 
	#TAILQ_PREV
(
ñm
, 
hód«me
, 
fõld
) \

652 (*(((
hód«me
 *)((
ñm
)->
fõld
.
tqe_¥ev
))->
tqh_œ°
))

	)

654 
	#TAILQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

655 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
tqe_√xt
); \

656 
	`QMD_SAVELINK
(
ﬁd¥ev
, (
ñm
)->
fõld
.
tqe_¥ev
); \

657 
	`QMD_TAILQ_CHECK_NEXT
(
ñm
, 
fõld
); \

658 
	`QMD_TAILQ_CHECK_PREV
(
ñm
, 
fõld
); \

659 i‡((
	`TAILQ_NEXT
((
ñm
), 
fõld
)Ë!
NULL
) { \

660 
	`TAILQ_NEXT
((
ñm
), 
fõld
)->fõld.
tqe_¥ev
 = \

661 (
ñm
)->
fõld
.
tqe_¥ev
; \

663 (
hód
)->
tqh_œ°
 = (
ñm
)->
fõld
.
tqe_¥ev
; \

664 
	`QMD_TRACE_HEAD
(
hód
); \

666 *(
ñm
)->
fõld
.
tqe_¥ev
 = 
	`TAILQ_NEXT
((elm), field); \

667 
	`TRASHIT
(*
ﬁd√xt
); \

668 
	`TRASHIT
(*
ﬁd¥ev
); \

669 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

670 } 0)

	)

672 
	#TAILQ_SWAP
(
hód1
, 
hód2
, 
ty≥
, 
fõld
) do { \

673 
ty≥
 *
sw≠_fú°
 = (
hód1
)->
tqh_fú°
; \

674 
ty≥
 **
sw≠_œ°
 = (
hód1
)->
tqh_œ°
; \

675 (
hód1
)->
tqh_fú°
 = (
hód2
)->tqh_first; \

676 (
hód1
)->
tqh_œ°
 = (
hód2
)->tqh_last; \

677 (
hód2
)->
tqh_fú°
 = 
sw≠_fú°
; \

678 (
hód2
)->
tqh_œ°
 = 
sw≠_œ°
; \

679 i‡((
sw≠_fú°
 = (
hód1
)->
tqh_fú°
Ë!
NULL
) \

680 
sw≠_fú°
->
fõld
.
tqe_¥ev
 = &(
hód1
)->
tqh_fú°
; \

682 (
hód1
)->
tqh_œ°
 = &(hód1)->
tqh_fú°
; \

683 i‡((
sw≠_fú°
 = (
hód2
)->
tqh_fú°
Ë!
NULL
) \

684 
sw≠_fú°
->
fõld
.
tqe_¥ev
 = &(
hód2
)->
tqh_fú°
; \

686 (
hód2
)->
tqh_œ°
 = &(hód2)->
tqh_fú°
; \

687 } 0)

	)

692 
	#CIRCLEQ_HEAD
(
«me
, 
ty≥
) \

693 
	s«me
 { \

694 
ty≥
 *
cqh_fú°
; \

695 
ty≥
 *
cqh_œ°
; \

696 }

	)

698 
	#CIRCLEQ_HEAD_INITIALIZER
(
hód
) \

699 { (*)&(
hód
), (*)&(hódË}

	)

701 
	#CIRCLEQ_ENTRY
(
ty≥
) \

703 
ty≥
 *
cqe_√xt
; \

704 
ty≥
 *
cqe_¥ev
; \

705 }

	)

710 
	#CIRCLEQ_EMPTY
(
hód
Ë((hód)->
cqh_fú°
 =(*)(hód))

	)

712 
	#CIRCLEQ_FIRST
(
hód
Ë((hód)->
cqh_fú°
)

	)

714 
	#CIRCLEQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

715 (
v¨
Ë
	`CIRCLEQ_FIRST
((
hód
)); \

716 (
v¨
Ë!(*)(
hód
Ë|| ((v¨Ë
NULL
); \

717 (
v¨
Ë
	`CIRCLEQ_NEXT
((v¨), 
fõld
))

	)

719 
	#CIRCLEQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
fõld
) \

720 (
v¨
Ë
	`CIRCLEQ_LAST
((
hód
)); \

721 (
v¨
Ë!(*)(
hód
Ë|| ((v¨Ë
NULL
); \

722 (
v¨
Ë
	`CIRCLEQ_PREV
((v¨), 
fõld
))

	)

724 
	#CIRCLEQ_INIT
(
hód
) do { \

725 
	`CIRCLEQ_FIRST
((
hód
)) = (*)(head); \

726 
	`CIRCLEQ_LAST
((
hód
)) = (*)(head); \

727 } 0)

	)

729 
	#CIRCLEQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

730 
	`CIRCLEQ_NEXT
((
ñm
), 
fõld
ËCIRCLEQ_NEXT((
li°ñm
), field); \

731 
	`CIRCLEQ_PREV
((
ñm
), 
fõld
Ë(
li°ñm
); \

732 i‡(
	`CIRCLEQ_NEXT
((
li°ñm
), 
fõld
Ë=(*)(
hód
)) \

733 
	`CIRCLEQ_LAST
((
hód
)Ë(
ñm
); \

735 
	`CIRCLEQ_PREV
(
	`CIRCLEQ_NEXT
((
li°ñm
), 
fõld
), fõldË(
ñm
); \

736 
	`CIRCLEQ_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

737 } 0)

	)

739 
	#CIRCLEQ_INSERT_BEFORE
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

740 
	`CIRCLEQ_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

741 
	`CIRCLEQ_PREV
((
ñm
), 
fõld
ËCIRCLEQ_PREV((
li°ñm
), field); \

742 i‡(
	`CIRCLEQ_PREV
((
li°ñm
), 
fõld
Ë=(*)(
hód
)) \

743 
	`CIRCLEQ_FIRST
((
hód
)Ë(
ñm
); \

745 
	`CIRCLEQ_NEXT
(
	`CIRCLEQ_PREV
((
li°ñm
), 
fõld
), fõldË(
ñm
); \

746 
	`CIRCLEQ_PREV
((
li°ñm
), 
fõld
Ë(
ñm
); \

747 } 0)

	)

749 
	#CIRCLEQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

750 
	`CIRCLEQ_NEXT
((
ñm
), 
fõld
Ë
	`CIRCLEQ_FIRST
((
hód
)); \

751 
	`CIRCLEQ_PREV
((
ñm
), 
fõld
Ë(*)(
hód
); \

752 i‡(
	`CIRCLEQ_LAST
((
hód
)) == (*)(head)) \

753 
	`CIRCLEQ_LAST
((
hód
)Ë(
ñm
); \

755 
	`CIRCLEQ_PREV
(
	`CIRCLEQ_FIRST
((
hód
)), 
fõld
Ë(
ñm
); \

756 
	`CIRCLEQ_FIRST
((
hód
)Ë(
ñm
); \

757 } 0)

	)

759 
	#CIRCLEQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

760 
	`CIRCLEQ_NEXT
((
ñm
), 
fõld
Ë(*)(
hód
); \

761 
	`CIRCLEQ_PREV
((
ñm
), 
fõld
Ë
	`CIRCLEQ_LAST
((
hód
)); \

762 i‡(
	`CIRCLEQ_FIRST
((
hód
)) == (*)(head)) \

763 
	`CIRCLEQ_FIRST
((
hód
)Ë(
ñm
); \

765 
	`CIRCLEQ_NEXT
(
	`CIRCLEQ_LAST
((
hód
)), 
fõld
Ë(
ñm
); \

766 
	`CIRCLEQ_LAST
((
hód
)Ë(
ñm
); \

767 } 0)

	)

769 
	#CIRCLEQ_LAST
(
hód
Ë((hód)->
cqh_œ°
)

	)

771 
	#CIRCLEQ_NEXT
(
ñm
,
fõld
Ë(”lm)->fõld.
cqe_√xt
)

	)

773 
	#CIRCLEQ_PREV
(
ñm
,
fõld
Ë(”lm)->fõld.
cqe_¥ev
)

	)

775 
	#CIRCLEQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

776 i‡(
	`CIRCLEQ_NEXT
((
ñm
), 
fõld
Ë=(*)(
hód
)) \

777 
	`CIRCLEQ_LAST
((
hód
)Ë
	`CIRCLEQ_PREV
((
ñm
), 
fõld
); \

779 
	`CIRCLEQ_PREV
(
	`CIRCLEQ_NEXT
((
ñm
), 
fõld
), field) = \

780 
	`CIRCLEQ_PREV
((
ñm
), 
fõld
); \

781 i‡(
	`CIRCLEQ_PREV
((
ñm
), 
fõld
Ë=(*)(
hód
)) \

782 
	`CIRCLEQ_FIRST
((
hód
)Ë
	`CIRCLEQ_NEXT
((
ñm
), 
fõld
); \

784 
	`CIRCLEQ_NEXT
(
	`CIRCLEQ_PREV
((
ñm
), 
fõld
), field) = \

785 
	`CIRCLEQ_NEXT
((
ñm
), 
fõld
); \

786 } 0)

	)

	@/home/hx/fatcache/src/fc_request.c

18 
	~<°dio.h
>

20 
	~<fc_c‹e.h
>

21 
	~<fc_evít.h
>

23 
°rög
 
msg_°rögs
[];

25 
msg
 *

26 
	$ªq_gë
(
c⁄n
 *conn)

28 
msg
 *msg;

30 
msg
 = 
	`msg_gë
(
c⁄n
, 
åue
);

31 i‡(
msg
 =
NULL
) {

32 
c⁄n
->
îr
 = 
î∫o
;

35  
msg
;

36 
	}
}

39 
	$ªq_put
(
msg
 *msg)

41 
msg
 *
pmsg
;

43 
	`ASSERT
(
msg
->
ªque°
);

45 
pmsg
 = 
msg
->
≥î
;

46 i‡(
pmsg
 !
NULL
) {

47 
	`ASSERT
(!
pmsg
->
ªque°
 &&Ömsg->
≥î
 =
msg
);

48 
msg
->
≥î
 = 
NULL
;

49 
pmsg
->
≥î
 = 
NULL
;

50 
	`r•_put
(
pmsg
);

53 
	`msg_put
(
msg
);

54 
	}
}

59 
boﬁ


60 
	$ªq_d⁄e
(
c⁄n
 *c⁄n, 
msg
 *msg)

62 i‡(!
msg
->
d⁄e
) {

63  
Ál£
;

66  
åue
;

67 
	}
}

70 
	$ªq_íqueue_omsgq
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg)

72 
	`ASSERT
(
msg
->
ªque°
);

73 
	`ASSERT
(!
msg
->
n‹ïly
);

75 
	`TAILQ_INSERT_TAIL
(&
c⁄n
->
omsg_q
, 
msg
, 
c_tqe
);

76 
	}
}

79 
	$ªq_dequeue_omsgq
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg)

81 
	`ASSERT
(
msg
->
ªque°
);

82 
	`ASSERT
(!
msg
->
n‹ïly
);

84 
	`TAILQ_REMOVE
(&
c⁄n
->
omsg_q
, 
msg
, 
c_tqe
);

85 
	}
}

87 
msg
 *

88 
	$ªq_ªcv_√xt
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
boﬁ
 
Æloc
)

90 
msg
 *msg;

92 i‡(
c⁄n
->
eof
) {

93 
msg
 = 
c⁄n
->
rmsg
;

96 i‡(
msg
 !
NULL
) {

97 
c⁄n
->
rmsg
 = 
NULL
;

99 
	`ASSERT
(
msg
->
≥î
 =
NULL
);

100 
	`ASSERT
(
msg
->
ªque°
 && !msg->
d⁄e
);

102 
	`log_îr‹
("eo‡¯%d disˇrdög incom∂ëêªq %"
PRIu64
"Üen "

103 "%"
PRIu32
"", 
c⁄n
->
sd
, 
msg
->
id
, msg->
mÀn
);

105 
	`ªq_put
(
msg
);

116 i‡(!
c⁄n
->
	`a˘ive
(conn)) {

117 
c⁄n
->
d⁄e
 = 1;

118 
	`log_debug
(
LOG_INFO
, "¯%d i†d⁄e", 
c⁄n
->
sd
);

122  
NULL
;

125 
msg
 = 
c⁄n
->
rmsg
;

126 i‡(
msg
 !
NULL
) {

127 
	`ASSERT
(
msg
->
ªque°
);

128  
msg
;

131 i‡(!
Æloc
) {

132  
NULL
;

135 
msg
 = 
	`ªq_gë
(
c⁄n
);

136 i‡(
msg
 !
NULL
) {

137 
c⁄n
->
rmsg
 = 
msg
;

140  
msg
;

141 
	}
}

143 
boﬁ


144 
	$ªq_fûãr
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg)

146 i‡(
	`msg_em±y
(
msg
)) {

147 
	`ASSERT
(
c⁄n
->
rmsg
 =
NULL
);

148 
	`log_debug
(
LOG_VERB
, "fûã∏em±yÑeq %"
PRIu64
" from c %d", 
msg
->
id
,

149 
c⁄n
->
sd
);

150 
	`ªq_put
(
msg
);

151  
åue
;

158 i‡(
msg
->
quô
) {

159 
	`ASSERT
(
c⁄n
->
rmsg
 =
NULL
);

160 
	`log_debug
(
LOG_INFO
, "fûã∏quôÑeq %"
PRIu64
" from c %d", 
msg
->
id
,

161 
c⁄n
->
sd
);

162 
c⁄n
->
eof
 = 1;

163 
c⁄n
->
ªcv_ªady
 = 0;

164 
	`ªq_put
(
msg
);

165  
åue
;

168  
Ál£
;

169 
	}
}

172 
	$ªq_¥o˚ss_gë
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg)

174 
ôemx
 *
ôx
;

175 
ôem
 *
ô
;

177 
ôx
 = 
	`ôemx_gëx
(
msg
->
hash
, msg->
md
);

178 i‡(
ôx
 =
NULL
) {

179 
msg_ty≥_t
 
ty≥
;

185 i‡(
msg
->
‰ag_id
 =0 || msg->
œ°_‰agmít
) {

186 
ty≥
 = 
MSG_RSP_END
;

188 
ty≥
 = 
MSG_EMPTY
;

191 
	`r•_£nd_°©us
(
˘x
, 
c⁄n
, 
msg
, 
ty≥
);

199 
ô
 = 
	`¶ab_ªad_ôem
(
ôx
->
sid
, itx->
off£t
);

200 i‡(
ô
 =
NULL
) {

201 
	`r•_£nd_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
MSG_RSP_SERVER_ERROR
, 
î∫o
);

204 i‡(
	`ôem_expúed
(
ô
)) {

205 
	`r•_£nd_°©us
(
˘x
, 
c⁄n
, 
msg
, 
MSG_RSP_NOT_FOUND
);

209 
	`r•_£nd_vÆue
(
˘x
, 
c⁄n
, 
msg
, 
ô
, 
ôx
->
ˇs
);

210 
	}
}

213 
	$ªq_¥o˚ss_dñëe
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg)

215 
boﬁ
 
found
;

217 
found
 = 
	`ôemx_ªmovex
(
msg
->
hash
, msg->
md
);

218 i‡(!
found
) {

219 
	`r•_£nd_°©us
(
˘x
, 
c⁄n
, 
msg
, 
MSG_RSP_NOT_FOUND
);

223 
	`r•_£nd_°©us
(
˘x
, 
c⁄n
, 
msg
, 
MSG_RSP_DELETED
);

224 
	}
}

227 
	$ªq_¥o˚ss_£t
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg)

229 
uöt8_t
 *
key
, 
nkey
, 
cid
;

230 
ôem
 *
ô
;

232 
key
 = 
msg
->
key_°¨t
;

233 
nkey
 = (
uöt8_t
)(
msg
->
key_íd
 - msg->
key_°¨t
);

235 
cid
 = 
	`ôem_¶abcid
(
nkey
, 
msg
->
vÀn
);

236 i‡(
cid
 =
SLABCLASS_INVALID_ID
) {

237 
	`r•_£nd_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
MSG_RSP_CLIENT_ERROR
, 
EINVAL
);

241 
	`ôemx_ªmovex
(
msg
->
hash
, msg->
md
);

243 
ô
 = 
	`ôem_gë
(
key
, 
nkey
, 
cid
, 
msg
->
vÀn
, 
	`time_ª…ime
(msg->
expúy
),

244 
msg
->
Êags
, msg->
md
, msg->
hash
);

245 i‡(
ô
 =
NULL
) {

246 
	`r•_£nd_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
MSG_RSP_SERVER_ERROR
, 
ENOMEM
);

250 
	`mbuf_c›y_to
(&
msg
->
mhdr
, msg->
vÆue
, 
	`ôem_d©a
(
ô
), msg->
vÀn
);

252 
	`r•_£nd_°©us
(
˘x
, 
c⁄n
, 
msg
, 
MSG_RSP_STORED
);

253 
	}
}

256 
	$ªq_¥o˚ss_add
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg)

258 
ôemx
 *
ôx
;

261 
ôx
 = 
	`ôemx_gëx
(
msg
->
hash
, msg->
md
);

262 i‡(
ôx
 !
NULL
) {

263 
	`r•_£nd_°©us
(
˘x
, 
c⁄n
, 
msg
, 
MSG_RSP_NOT_STORED
);

267 
	`ªq_¥o˚ss_£t
(
˘x
, 
c⁄n
, 
msg
);

268 
	}
}

271 
	$ªq_¥o˚ss_ª∂a˚
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg)

273 
ôemx
 *
ôx
;

276 
ôx
 = 
	`ôemx_gëx
(
msg
->
hash
, msg->
md
);

277 i‡(
ôx
 =
NULL
) {

278 
	`r•_£nd_°©us
(
˘x
, 
c⁄n
, 
msg
, 
MSG_RSP_NOT_STORED
);

282 
	`ªq_¥o˚ss_£t
(
˘x
, 
c⁄n
, 
msg
);

283 
	}
}

286 
	$ªq_¥o˚ss_vîsi⁄
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg)

288 
	`r•_£nd_°©us
(
˘x
, 
c⁄n
, 
msg
, 
MSG_RSP_VERSION
);

289 
	}
}

292 
	$ªq_¥o˚ss_ˇs
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg)

294 
ôemx
 *
ôx
;

296 
ôx
 = 
	`ôemx_gëx
(
msg
->
hash
, msg->
md
);

297 i‡(
ôx
 =
NULL
) {

302 
	`r•_£nd_°©us
(
˘x
, 
c⁄n
, 
msg
, 
MSG_RSP_NOT_FOUND
);

306 i‡(
ôx
->
ˇs
 !
msg
->cas) {

311 
	`r•_£nd_°©us
(
˘x
, 
c⁄n
, 
msg
, 
MSG_RSP_EXISTS
);

315 
	`ªq_¥o˚ss_£t
(
˘x
, 
c⁄n
, 
msg
);

316 
	}
}

319 
	$ªq_¥o˚ss_c⁄ˇt
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg)

321 
uöt8_t
 *
key
, 
nkey
, 
cid
;

322 
ôem
 *
oô
, *
ô
;

323 
uöt32_t
 
nd©a
;

324 
ôemx
 *
ôx
;

326 
key
 = 
msg
->
key_°¨t
;

327 
nkey
 = (
uöt8_t
)(
msg
->
key_íd
 - msg->
key_°¨t
);

330 
ôx
 = 
	`ôemx_gëx
(
msg
->
hash
, msg->
md
);

331 i‡(
ôx
 =
NULL
) {

333 
	`r•_£nd_°©us
(
˘x
, 
c⁄n
, 
msg
, 
MSG_RSP_NOT_STORED
);

338 
oô
 = 
	`¶ab_ªad_ôem
(
ôx
->
sid
, itx->
off£t
);

339 i‡(
oô
 =
NULL
) {

340 
	`r•_£nd_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
MSG_RSP_SERVER_ERROR
, 
î∫o
);

343 i‡(
	`ôem_expúed
(
oô
)) {

344 
	`r•_£nd_°©us
(
˘x
, 
c⁄n
, 
msg
, 
MSG_RSP_NOT_STORED
);

348 
nd©a
 = 
msg
->
vÀn
 + 
oô
->ndata;

349 
cid
 = 
	`ôem_¶abcid
(
nkey
, 
nd©a
);

350 i‡(
cid
 =
SLABCLASS_INVALID_ID
) {

351 
	`r•_£nd_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
MSG_RSP_CLIENT_ERROR
, 
EINVAL
);

356 
	`ôemx_ªmovex
(
msg
->
hash
, msg->
md
);

359 
ô
 = 
	`ôem_gë
(
key
, 
nkey
, 
cid
, 
nd©a
, 
	`time_ª…ime
(
msg
->
expúy
),

360 
msg
->
Êags
, msg->
md
, msg->
hash
);

361 i‡(
ô
 =
NULL
) {

362 
	`r•_£nd_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
MSG_RSP_SERVER_ERROR
, 
ENOMEM
);

367 
msg
->
ty≥
) {

369 
MSG_REQ_PREPEND
:

370 
	`mbuf_c›y_to
(&
msg
->
mhdr
, msg->
vÆue
, 
	`ôem_d©a
(
ô
), msg->
vÀn
);

371 
	`fc_mem˝y
(
	`ôem_d©a
(
ô
Ë+ 
msg
->
vÀn
, iãm_d©a(
oô
), oô->
nd©a
);

374 
MSG_REQ_APPEND
:

375 
	`fc_mem˝y
(
	`ôem_d©a
(
ô
), iãm_d©a(
oô
), oô->
nd©a
);

376 
	`mbuf_c›y_to
(&
msg
->
mhdr
, msg->
vÆue
, 
	`ôem_d©a
(
ô
Ë+ 
oô
->
nd©a
, msg->
vÀn
);

380 
	`NOT_REACHED
();

383 
	`r•_£nd_°©us
(
˘x
, 
c⁄n
, 
msg
, 
MSG_RSP_STORED
);

384 
	}
}

387 
	$ªq_¥o˚ss_num
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg)

389 
r°©us_t
 
°©us
;

390 
uöt8_t
 *
key
, 
nkey
, 
cid
;

391 
ôem
 *
ô
;

392 
ôemx
 *
ôx
;

393 
uöt64_t
 
˙um
, 
¬um
;

394 
num°r
[
FC_UINT64_MAXLEN
];

395 
n
;

397 
key
 = 
msg
->
key_°¨t
;

398 
nkey
 = (
uöt8_t
)(
msg
->
key_íd
 - msg->
key_°¨t
);

401 
ôx
 = 
	`ôemx_gëx
(
msg
->
hash
, msg->
md
);

402 i‡(
ôx
 =
NULL
) {

404 
	`r•_£nd_°©us
(
˘x
, 
c⁄n
, 
msg
, 
MSG_RSP_NOT_FOUND
);

409 
ô
 = 
	`¶ab_ªad_ôem
(
ôx
->
sid
, itx->
off£t
);

410 i‡(
ô
 =
NULL
) {

411 
	`r•_£nd_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
MSG_RSP_SERVER_ERROR
, 
î∫o
);

414 i‡(
	`ôem_expúed
(
ô
)) {

415 
	`r•_£nd_°©us
(
˘x
, 
c⁄n
, 
msg
, 
MSG_RSP_NOT_FOUND
);

420 
°©us
 = 
	`fc_©ou64
(
	`ôem_d©a
(
ô
), it->
nd©a
, &
˙um
);

421 i‡(
°©us
 !
FC_OK
) {

422 
	`r•_£nd_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
MSG_RSP_CLIENT_ERROR
, 
EINVAL
);

427 
	`ôemx_ªmovex
(
msg
->
hash
, msg->
md
);

430 i‡(
msg
->
ty≥
 =
MSG_REQ_INCR
) {

431 
¬um
 = 
˙um
 + 
msg
->
num
;

433 i‡(
˙um
 < 
msg
->
num
) {

434 
¬um
 = 0;

436 
¬um
 = 
˙um
 - 
msg
->
num
;

439 
n
 = 
	`fc_s˙¥ötf
(
num°r
, “um°r), "%"
PRIu64
"", 
¬um
);

442 
cid
 = 
	`ôem_¶abcid
(
nkey
, 
n
);

443 
	`ASSERT
(
cid
 !
SLABCLASS_INVALID_ID
);

445 
ô
 = 
	`ôem_gë
(
key
, 
nkey
, 
cid
, 
n
, 
	`time_ª…ime
(
msg
->
expúy
), msg->
Êags
,

446 
msg
->
md
, msg->
hash
);

447 i‡(
ô
 =
NULL
) {

448 
	`r•_£nd_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
MSG_RSP_SERVER_ERROR
, 
ENOMEM
);

453 
	`fc_mem˝y
(
	`ôem_d©a
(
ô
), 
num°r
, 
n
);

455 
	`r•_£nd_num
(
˘x
, 
c⁄n
, 
msg
, 
ô
);

456 
	}
}

459 
	$ªq_¥o˚ss_îr‹
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg,

460 
îr
)

462 
r°©us_t
 
°©us
;

465 
msg
->
d⁄e
 = 1;

466 
msg
->
îr‹
 = 1;

467 
msg
->
îr
 =Éº !0 ?Éº : 
î∫o
;

469 
	`log_debug
(
LOG_INFO
, "¥o˚s†ªq %"
PRIu64
"Üí %"
PRIu32
"Åype %d on sd %d "

470 "Áûed: %s", 
msg
->
id
, msg->
mÀn
, msg->
ty≥
, 
c⁄n
->
sd
,

471 
	`°ªº‹
(
msg
->
îr
));

474 i‡(
msg
->
n‹ïly
) {

475 
	`ªq_put
(
msg
);

479 i‡(
	`ªq_d⁄e
(
c⁄n
, 
	`TAILQ_FIRST
(&c⁄n->
omsg_q
))) {

480 
°©us
 = 
	`evít_add_out
(
˘x
->
ï
, 
c⁄n
);

481 i‡(
°©us
 !
FC_OK
) {

482 
c⁄n
->
îr
 = 
î∫o
;

485 
	}
}

488 
	$ªq_¥o˚ss
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg)

490 
uöt8_t
 *
key
;

491 
size_t
 
keyÀn
;

493 
	`ASSERT
(
msg
->
ªque°
);

494 
	`ASSERT
(
msg
->
ty≥
 >
MSG_REQ_GET
 && msg->ty≥ < 
MSG_REQ_QUIT
);

497 i‡(!
msg
->
n‹ïly
) {

498 
	`ªq_íqueue_omsgq
(
˘x
, 
c⁄n
, 
msg
);

501 
	`ASSERT
(
msg
->
key_íd
 > msg->
key_°¨t
);

502 
key
 = 
msg
->
key_°¨t
;

503 
keyÀn
 = 
msg
->
key_íd
 - msg->
key_°¨t
;

511 
	`sha1
(
key
, 
keyÀn
, 
msg
->
md
);

512 
msg
->
hash
 = 
	`sha1_hash
(msg->
md
);

514 
msg
->
ty≥
) {

515 
MSG_REQ_GET
:

516 
MSG_REQ_GETS
:

517 
	`ªq_¥o˚ss_gë
(
˘x
, 
c⁄n
, 
msg
);

520 
MSG_REQ_DELETE
:

521 
	`ªq_¥o˚ss_dñëe
(
˘x
, 
c⁄n
, 
msg
);

524 
MSG_REQ_CAS
:

525 
	`ªq_¥o˚ss_ˇs
(
˘x
, 
c⁄n
, 
msg
);

528 
MSG_REQ_SET
:

529 
	`ªq_¥o˚ss_£t
(
˘x
, 
c⁄n
, 
msg
);

532 
MSG_REQ_ADD
:

533 
	`ªq_¥o˚ss_add
(
˘x
, 
c⁄n
, 
msg
);

536 
MSG_REQ_REPLACE
:

537 
	`ªq_¥o˚ss_ª∂a˚
(
˘x
, 
c⁄n
, 
msg
);

540 
MSG_REQ_VERSION
:

541 
	`ªq_¥o˚ss_vîsi⁄
(
˘x
, 
c⁄n
, 
msg
);

544 
MSG_REQ_APPEND
:

545 
MSG_REQ_PREPEND
:

546 
	`ªq_¥o˚ss_c⁄ˇt
(
˘x
, 
c⁄n
, 
msg
);

549 
MSG_REQ_INCR
:

550 
MSG_REQ_DECR
:

551 
	`ªq_¥o˚ss_num
(
˘x
, 
c⁄n
, 
msg
);

555 
	`NOT_REACHED
();

557 
	}
}

560 
	$ªq_ªcv_d⁄e
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg,

561 
msg
 *
nmsg
)

563 
	`ASSERT
(
msg
->
ªque°
);

564 
	`ASSERT
(
msg
->
ow√r
 =
c⁄n
);

565 
	`ASSERT
(
c⁄n
->
rmsg
 =
msg
);

566 
	`ASSERT
(
nmsg
 =
NULL
 ||Çmsg->
ªque°
);

569 
c⁄n
->
rmsg
 = 
nmsg
;

571 i‡(
	`ªq_fûãr
(
˘x
, 
c⁄n
, 
msg
)) {

575 
	`ªq_¥o˚ss
(
˘x
, 
c⁄n
, 
msg
);

576 
	}
}

	@/home/hx/fatcache/src/fc_response.c

18 
	~<°dio.h
>

20 
	~<fc_c‹e.h
>

22 
°rög
 
msg_°rögs
[];

24 
msg
 *

25 
	$r•_gë
(
c⁄n
 *conn)

27 
msg
 *msg;

29 
msg
 = 
	`msg_gë
(
c⁄n
, 
Ál£
);

30 i‡(
msg
 =
NULL
) {

31 
c⁄n
->
îr
 = 
î∫o
;

34  
msg
;

35 
	}
}

38 
	$r•_put
(
msg
 *msg)

40 
	`ASSERT
(!
msg
->
ªque°
);

41 
	`ASSERT
(
msg
->
≥î
 =
NULL
);

42 
	`msg_put
(
msg
);

43 
	}
}

45 
msg
 *

46 
	$r•_£nd_√xt
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *conn)

48 
r°©us_t
 
°©us
;

49 
msg
 *msg, *
pmsg
;

51 
pmsg
 = 
	`TAILQ_FIRST
(&
c⁄n
->
omsg_q
);

52 i‡(
pmsg
 =
NULL
 || !pmsg->
d⁄e
) {

54 i‡(
pmsg
 =
NULL
 && 
c⁄n
->
eof
) {

55 
c⁄n
->
d⁄e
 = 1;

56 
	`log_debug
(
LOG_INFO
, "¯%d i†d⁄e", 
c⁄n
->
sd
);

59 
°©us
 = 
	`evít_dñ_out
(
˘x
->
ï
, 
c⁄n
);

60 i‡(
°©us
 !
FC_OK
) {

61 
c⁄n
->
îr
 = 
î∫o
;

64  
NULL
;

67 
msg
 = 
c⁄n
->
smsg
;

68 i‡(
msg
 !
NULL
) {

69 
	`ASSERT
(!
msg
->
ªque°
 && msg->
≥î
 !
NULL
);

70 
	`ASSERT
(
	`ªq_d⁄e
(
c⁄n
, 
msg
->
≥î
));

71 
pmsg
 = 
	`TAILQ_NEXT
(
msg
->
≥î
, 
c_tqe
);

74 i‡(
pmsg
 =
NULL
 || !pmsg->
d⁄e
) {

75 
c⁄n
->
smsg
 = 
NULL
;

76  
NULL
;

78 
	`ASSERT
(
pmsg
->
ªque°
 && !pmsg->
swÆlow
);

80 
msg
 = 
pmsg
->
≥î
;

81 
	`ASSERT
(!
msg
->
ªque°
);

83 
c⁄n
->
smsg
 = 
msg
;

85 
	`log_debug
(
LOG_VVERB
, "£ndÇexàr• %"
PRIu64
" o¿¯%d", 
msg
->
id
, 
c⁄n
->
sd
);

87  
msg
;

88 
	}
}

91 
	$r•_£nd_d⁄e
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg)

93 
msg
 *
pmsg
;

95 
	`ASSERT
(
c⁄n
->
smsg
 =
NULL
);

97 
	`log_debug
(
LOG_VVERB
, "£nd d⁄êr• %"
PRIu64
" o¿¯%d", 
msg
->
id
, 
c⁄n
->
sd
);

99 
pmsg
 = 
msg
->
≥î
;

101 
	`ASSERT
(!
msg
->
ªque°
 && 
pmsg
->request);

102 
	`ASSERT
(
pmsg
->
≥î
 =
msg
);

103 
	`ASSERT
(
pmsg
->
d⁄e
 && !pmsg->
swÆlow
);

105 
	`ªq_dequeue_omsgq
(
˘x
, 
c⁄n
, 
pmsg
);

107 
	`ªq_put
(
pmsg
);

108 
	}
}

111 
	$r•_£nd_°©us
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg,

112 
msg_ty≥_t
 
r•_ty≥
)

114 
r°©us_t
 
°©us
;

115 
msg
 *
pmsg
;

116 
°rög
 *
°r
;

118 
	`ASSERT
(
r•_ty≥
 > 
MSG_RSP_NUM
 &&Ñ•_ty≥ < 
MSG_SENTINEL
);

119 
	`ASSERT
(
r•_ty≥
 !
MSG_RSP_CLIENT_ERROR
);

120 
	`ASSERT
(
r•_ty≥
 !
MSG_RSP_SERVER_ERROR
);

122 i‡(
msg
->
n‹ïly
) {

123 
	`ªq_put
(
msg
);

127 
pmsg
 = 
	`r•_gë
(
c⁄n
);

128 i‡(
pmsg
 =
NULL
) {

129 
	`ªq_¥o˚ss_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
ENOMEM
);

133 
	`ASSERT
(
msg
->
ªque°
);

134 
	`ASSERT
(
msg
->
≥î
 =
NULL
);

135 
	`ASSERT
(!
msg
->
d⁄e
);

136 
	`ASSERT
(!
pmsg
->
ªque°
);

139 
°r
 = &
msg_°rögs
[
r•_ty≥
];

140 
°©us
 = 
	`mbuf_c›y_‰om
(&
pmsg
->
mhdr
, 
°r
->
d©a
, så->
Àn
);

141 i‡(
°©us
 !
FC_OK
) {

142 
	`ªq_¥o˚ss_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
î∫o
);

145 
pmsg
->
mÀn
 +
°r
->
Àn
;

148 
msg
->
d⁄e
 = 1;

149 
msg
->
≥î
 = 
pmsg
;

150 
pmsg
->
≥î
 = 
msg
;

152 
°©us
 = 
	`evít_add_out
(
˘x
->
ï
, 
c⁄n
);

153 i‡(
°©us
 !
FC_OK
) {

154 
	`ªq_¥o˚ss_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
î∫o
);

157 
	}
}

160 
	$r•_£nd_îr‹
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg,

161 
msg_ty≥_t
 
r•_ty≥
, 
îr
)

163 
r°©us_t
 
°©us
;

164 
msg
 *
pmsg
;

165 
°rög
 *
°r
, 
p°r
;

166 *
îr°r
;

168 
	`ASSERT
(
r•_ty≥
 =
MSG_RSP_CLIENT_ERROR
 ||

169 
r•_ty≥
 =
MSG_RSP_SERVER_ERROR
);

171 
pmsg
 = 
	`r•_gë
(
c⁄n
);

172 i‡(
pmsg
 =
NULL
) {

173 
	`ªq_¥o˚ss_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
ENOMEM
);

177 
	`ASSERT
(
msg
->
ªque°
);

178 
	`ASSERT
(
msg
->
≥î
 =
NULL
);

179 
	`ASSERT
(!
msg
->
d⁄e
);

180 
	`ASSERT
(!
pmsg
->
ªque°
);

183 
°r
 = &
msg_°rögs
[
r•_ty≥
];

184 
°©us
 = 
	`mbuf_c›y_‰om
(&
pmsg
->
mhdr
, 
°r
->
d©a
, så->
Àn
);

185 i‡(
°©us
 !
FC_OK
) {

186 
	`ªq_¥o˚ss_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
î∫o
);

189 
pmsg
->
mÀn
 +
°r
->
Àn
;

192 
îr°r
 = 
îr
 !0 ? 
	`°ªº‹
(err) : "unknown";

193 
	`°rög_£t_øw
(&
p°r
, 
îr°r
);

194 
°r
 = &
p°r
;

195 
°©us
 = 
	`mbuf_c›y_‰om
(&
pmsg
->
mhdr
, 
°r
->
d©a
, så->
Àn
);

196 i‡(
°©us
 !
FC_OK
) {

197 
	`ªq_¥o˚ss_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
î∫o
);

200 
pmsg
->
mÀn
 +
°r
->
Àn
;

203 
°r
 = &
msg_°rögs
[
MSG_CRLF
];

204 
°©us
 = 
	`mbuf_c›y_‰om
(&
pmsg
->
mhdr
, 
°r
->
d©a
, så->
Àn
);

205 i‡(
°©us
 !
FC_OK
) {

206 
	`ªq_¥o˚ss_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
î∫o
);

209 
pmsg
->
mÀn
 +
°r
->
Àn
;

212 
msg
->
d⁄e
 = 1;

213 
msg
->
≥î
 = 
pmsg
;

214 
pmsg
->
≥î
 = 
msg
;

216 
°©us
 = 
	`evít_add_out
(
˘x
->
ï
, 
c⁄n
);

217 i‡(
°©us
 !
FC_OK
) {

218 
	`ªq_¥o˚ss_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
î∫o
);

221 
	}
}

224 
	$r•_£nd_vÆue
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg,

225 
ôem
 *
ô
, 
uöt64_t
 
ˇs
)

227 
r°©us_t
 
°©us
;

228 
msg
 *
pmsg
;

229 
°rög
 *
°r
;

230 
uöt8_t
 
num
[
FC_UINTMAX_MAXLEN
 + 1];

231 
size_t
 
n
;

233 
pmsg
 = 
	`r•_gë
(
c⁄n
);

234 i‡(
pmsg
 =
NULL
) {

235 
	`ªq_¥o˚ss_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
ENOMEM
);

239 
	`ASSERT
(
msg
->
ªque°
);

240 
	`ASSERT
(
msg
->
≥î
 =
NULL
);

241 
	`ASSERT
(!
msg
->
d⁄e
);

242 
	`ASSERT
(!
pmsg
->
ªque°
);

245 
°r
 = &
msg_°rögs
[
MSG_RSP_VALUE
];

246 
°©us
 = 
	`mbuf_c›y_‰om
(&
pmsg
->
mhdr
, 
°r
->
d©a
, så->
Àn
);

247 i‡(
°©us
 !
FC_OK
) {

248 
	`ªq_¥o˚ss_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
î∫o
);

251 
pmsg
->
mÀn
 +
°r
->
Àn
;

254 
°©us
 = 
	`mbuf_c›y_‰om
(&
pmsg
->
mhdr
, 
	`ôem_key
(
ô
), it->
nkey
);

255 i‡(
°©us
 !
FC_OK
) {

256 
	`ªq_¥o˚ss_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
î∫o
);

259 
pmsg
->
mÀn
 +
ô
->
nkey
;

262 
n
 = 
	`fc_s˙¥ötf
(
num
, “um), " %"
PRIu32
"", 
ô
->
Êags
);

263 
°©us
 = 
	`mbuf_c›y_‰om
(&
pmsg
->
mhdr
, 
num
, 
n
);

264 i‡(
°©us
 !
FC_OK
) {

265 
	`ªq_¥o˚ss_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
î∫o
);

268 
pmsg
->
mÀn
 +
n
;

271 
n
 = 
	`fc_s˙¥ötf
(
num
, “um), " %"
PRIu32
"", 
ô
->
nd©a
);

272 
°©us
 = 
	`mbuf_c›y_‰om
(&
pmsg
->
mhdr
, 
num
, 
n
);

273 i‡(
°©us
 !
FC_OK
) {

274 
	`ªq_¥o˚ss_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
î∫o
);

277 
pmsg
->
mÀn
 +
n
;

279 i‡(
msg
->
ty≥
 =
MSG_REQ_GETS
) {

281 
n
 = 
	`fc_s˙¥ötf
(
num
, “um), " %"
PRIu64
"", 
ˇs
);

282 
°©us
 = 
	`mbuf_c›y_‰om
(&
pmsg
->
mhdr
, 
num
, 
n
);

283 i‡(
°©us
 !
FC_OK
) {

284 
	`ªq_¥o˚ss_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
î∫o
);

287 
pmsg
->
mÀn
 +
n
;

291 
°r
 = &
msg_°rögs
[
MSG_CRLF
];

292 
°©us
 = 
	`mbuf_c›y_‰om
(&
pmsg
->
mhdr
, 
°r
->
d©a
, så->
Àn
);

293 i‡(
°©us
 !
FC_OK
) {

294 
	`ªq_¥o˚ss_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
î∫o
);

297 
pmsg
->
mÀn
 +
°r
->
Àn
;

300 
°©us
 = 
	`mbuf_c›y_‰om
(&
pmsg
->
mhdr
, 
	`ôem_d©a
(
ô
), it->
nd©a
);

301 i‡(
°©us
 !
FC_OK
) {

302 
	`ªq_¥o˚ss_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
î∫o
);

305 
pmsg
->
mÀn
 +
ô
->
nd©a
;

308 
°r
 = &
msg_°rögs
[
MSG_CRLF
];

309 
°©us
 = 
	`mbuf_c›y_‰om
(&
pmsg
->
mhdr
, 
°r
->
d©a
, så->
Àn
);

310 i‡(
°©us
 !
FC_OK
) {

311 
	`ªq_¥o˚ss_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
î∫o
);

314 
pmsg
->
mÀn
 +
°r
->
Àn
;

320 i‡(
msg
->
‰ag_id
 =0 || msg->
œ°_‰agmít
) {

321 
°r
 = &
msg_°rögs
[
MSG_RSP_END
];

322 
°©us
 = 
	`mbuf_c›y_‰om
(&
pmsg
->
mhdr
, 
°r
->
d©a
, så->
Àn
);

323 i‡(
°©us
 !
FC_OK
) {

324 
	`ªq_¥o˚ss_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
î∫o
);

327 
pmsg
->
mÀn
 +
°r
->
Àn
;

331 
msg
->
d⁄e
 = 1;

332 
msg
->
≥î
 = 
pmsg
;

333 
pmsg
->
≥î
 = 
msg
;

335 
°©us
 = 
	`evít_add_out
(
˘x
->
ï
, 
c⁄n
);

336 i‡(
°©us
 !
FC_OK
) {

337 
	`ªq_¥o˚ss_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
î∫o
);

340 
	}
}

343 
	$r•_£nd_num
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *c⁄n, 
msg
 *msg,

344 
ôem
 *
ô
)

346 
r°©us_t
 
°©us
;

347 
msg
 *
pmsg
;

348 
°rög
 *
°r
;

350 
pmsg
 = 
	`r•_gë
(
c⁄n
);

351 i‡(
pmsg
 =
NULL
) {

352 
	`ªq_¥o˚ss_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
ENOMEM
);

356 
	`ASSERT
(
msg
->
ªque°
);

357 
	`ASSERT
(
msg
->
≥î
 =
NULL
);

358 
	`ASSERT
(!
msg
->
d⁄e
);

359 
	`ASSERT
(!
pmsg
->
ªque°
);

362 
°©us
 = 
	`mbuf_c›y_‰om
(&
pmsg
->
mhdr
, 
	`ôem_d©a
(
ô
), it->
nd©a
);

363 i‡(
°©us
 !
FC_OK
) {

364 
	`NOT_REACHED
();

366 
pmsg
->
mÀn
 +
ô
->
nd©a
;

369 
°r
 = &
msg_°rögs
[
MSG_CRLF
];

370 
°©us
 = 
	`mbuf_c›y_‰om
(&
pmsg
->
mhdr
, 
°r
->
d©a
, så->
Àn
);

371 i‡(
°©us
 !
FC_OK
) {

372 
	`ªq_¥o˚ss_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
î∫o
);

375 
pmsg
->
mÀn
 +
°r
->
Àn
;

378 
msg
->
d⁄e
 = 1;

379 
msg
->
≥î
 = 
pmsg
;

380 
pmsg
->
≥î
 = 
msg
;

382 
°©us
 = 
	`evít_add_out
(
˘x
->
ï
, 
c⁄n
);

383 i‡(
°©us
 !
FC_OK
) {

384 
	`ªq_¥o˚ss_îr‹
(
˘x
, 
c⁄n
, 
msg
, 
î∫o
);

387 
	}
}

	@/home/hx/fatcache/src/fc_server.c

18 
	~<fc_c‹e.h
>

19 
	~<fc_£rvî.h
>

21 
£âögs
 settings;

23 
	#SERVER_BACKLOG
 1024

	)

25 
r°©us_t


26 
	$£rvî_ac˚±
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *
s
)

28 
r°©us_t
 
°©us
;

29 
c⁄n
 *
c
;

30 
sd
;

32 
	`ASSERT
(!
s
->
˛õ¡
);

33 
	`ASSERT
(
s
->
sd
 > 0);

34 
	`ASSERT
(
s
->
ªcv_a˘ive
 && s->
ªcv_ªady
);

37 
sd
 = 
	`ac˚±
(
s
->sd, 
NULL
, NULL);

38 i‡(
sd
 < 0) {

39 i‡(
î∫o
 =
EINTR
) {

40 
	`log_debug
(
LOG_VERB
, "ac˚± o¿†%dÇŸÑódy -Éöå", 
s
->
sd
);

44 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) {

45 
	`log_debug
(
LOG_VERB
, "ac˚± o¿†%dÇŸÑódy -Éagaö", 
s
->
sd
);

46 
s
->
ªcv_ªady
 = 0;

47  
FC_OK
;

50 
	`log_îr‹
("ac˚± o¿†%d faûed: %s", 
s
->
sd
, 
	`°ªº‹
(
î∫o
));

51  
FC_ERROR
;

57 
c
 = 
	`c⁄n_gë
(
sd
, 
åue
);

58 i‡(
c
 =
NULL
) {

59 
	`log_îr‹
("gë c⁄¿f‹ c %d from s %d faûed: %s", 
sd
, 
s
->sd,

60 
	`°ªº‹
(
î∫o
));

61 
°©us
 = 
	`˛o£
(
sd
);

62 i‡(
°©us
 < 0) {

63 
	`log_îr‹
("˛o£ c %d faûed, ign‹ed: %s", 
sd
, 
	`°ªº‹
(
î∫o
));

65  
FC_ENOMEM
;

68 
°©us
 = 
	`fc_£t_n⁄blockög
(
sd
);

69 i‡(
°©us
 < 0) {

70 
	`log_îr‹
("£àn⁄block o¿¯%d faûed: %s", 
sd
, 
	`°ªº‹
(
î∫o
));

71  
FC_ERROR
;

74 
°©us
 = 
	`fc_£t_t˝nodñay
(
c
->
sd
);

75 i‡(
°©us
 < 0) {

76 
	`log_w¨n
("£àt˝Çodñy o¿¯%d faûed, ign‹ed: %s", 
sd
,

77 
	`°ªº‹
(
î∫o
));

80 
°©us
 = 
	`evít_add_c⁄n
(
˘x
->
ï
, 
c
);

81 i‡(
°©us
 < 0) {

82 
	`log_îr‹
("evíàadd c⁄¿ê%d c %d faûed: %s", 
˘x
->
ï
, 
sd
,

83 
	`°ªº‹
(
î∫o
));

84  
FC_ERROR
;

87 
	`log_debug
(
LOG_NOTICE
, "ac˚±ed c %d o¿†%d", 
c
->
sd
, 
s
->sd);

89  
FC_OK
;

90 
	}
}

92 
r°©us_t


93 
	$£rvî_ªcv
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *conn)

95 
r°©us_t
 
°©us
;

97 
	`ASSERT
(!
c⁄n
->
˛õ¡
);

98 
	`ASSERT
(
c⁄n
->
ªcv_a˘ive
);

100 
c⁄n
->
ªcv_ªady
 = 1;

102 
°©us
 = 
	`£rvî_ac˚±
(
˘x
, 
c⁄n
);

103 i‡(
°©us
 !
FC_OK
) {

104  
°©us
;

106 } 
c⁄n
->
ªcv_ªady
);

108  
FC_OK
;

109 
	}
}

111 
r°©us_t


112 
	$£rvî_li°í
(
c⁄ãxt
 *
˘x
)

114 
r°©us_t
 
°©us
;

115 
socköfo
 
si
;

116 
°rög
 
addr°r
;

117 
sd
, 
Ámûy
;

118 
sockÀn_t
 
addæí
;

119 
sockaddr
 *
addr
;

120 
c⁄n
 *
s
;

122 
	`°rög_£t_øw
(&
addr°r
, 
£âögs
.
addr
);

123 
°©us
 = 
	`fc_ªsﬁve
(&
addr°r
, 
£âögs
.
p‹t
, &
si
);

124 i‡(
°©us
 !
FC_OK
) {

125  
FC_ERROR
;

128 
Ámûy
 = 
si
.family;

129 
addæí
 = 
si
.addrlen;

130 
addr
 = (
sockaddr
 *)&
si
.addr;

132 
sd
 = 
	`sockë
(
Ámûy
, 
SOCK_STREAM
, 0);

133 i‡(
sd
 < 0) {

134 
	`log_îr‹
("sockë faûed: %s", 
	`°ªº‹
(
î∫o
));

135  
FC_ERROR
;

138 
°©us
 = 
	`fc_£t_ªu£addr
(
sd
);

139 i‡(
°©us
 !
FC_OK
) {

140 
	`log_îr‹
("ªu£ o‡sd %d faûed: %s", 
sd
, 
	`°ªº‹
(
î∫o
));

141  
FC_ERROR
;

144 
°©us
 = 
	`böd
(
sd
, 
addr
, 
addæí
);

145 i‡(
°©us
 < 0) {

146 
	`log_îr‹
("böd o¿sd %d faûed: %s", 
sd
, 
	`°ªº‹
(
î∫o
));

147  
FC_ERROR
;

150 
°©us
 = 
	`li°í
(
sd
, 
SERVER_BACKLOG
);

151 i‡(
°©us
 < 0) {

152 
	`log_îr‹
("li°í o¿sd %d faûed: %s", 
sd
, 
	`°ªº‹
(
î∫o
));

153  
FC_ERROR
;

156 
°©us
 = 
	`fc_£t_n⁄blockög
(
sd
);

157 i‡(
°©us
 !
FC_OK
) {

158 
	`log_îr‹
("£àn⁄block o¿sd %d faûed: %s", 
sd
, 
	`°ªº‹
(
î∫o
));

159  
FC_ERROR
;

162 
s
 = 
	`c⁄n_gë
(
sd
, 
Ál£
);

163 i‡(
s
 =
NULL
) {

164 
	`log_îr‹
("gë c⁄¿f‹ s %d faûed: %s", 
sd
, 
	`°ªº‹
(
î∫o
));

165 
°©us
 = 
	`˛o£
(
sd
);

166 i‡(
°©us
 < 0) {

167 
	`log_îr‹
("˛o£ s %d faûed, ign‹ed: %s", 
sd
, 
	`°ªº‹
(
î∫o
));

169  
FC_ENOMEM
;

172 
°©us
 = 
	`evít_add_c⁄n
(
˘x
->
ï
, 
s
);

173 i‡(
°©us
 < 0) {

174 
	`log_îr‹
("evíàadd c⁄¿ê%d s %d faûed: %s", 
˘x
->
ï
, 
sd
,

175 
	`°ªº‹
(
î∫o
));

176  
FC_ERROR
;

179 
°©us
 = 
	`evít_dñ_out
(
˘x
->
ï
, 
s
);

180 i‡(
°©us
 !
FC_OK
) {

181 
	`log_îr‹
("evíàdñ c⁄¿ê%d s %d faûed: %s", 
˘x
->
ï
, 
sd
,

182 
	`°ªº‹
(
î∫o
));

183  
°©us
;

186 
	`log_debug
(
LOG_NOTICE
, "£rvîÜi°íög o¿†%d", 
s
->
sd
);

188  
FC_OK
;

189 
	}
}

	@/home/hx/fatcache/src/fc_server.h

18 #i‚de‡
_FC_SERVER_H_


19 
	#_FC_SERVER_H_


	)

21 
	~<fc_c‹e.h
>

23 
r°©us_t
 
£rvî_ªcv
(
c⁄ãxt
 *
˘x
, 
c⁄n
 *conn);

24 
r°©us_t
 
£rvî_li°í
(
c⁄ãxt
 *
˘x
);

	@/home/hx/fatcache/src/fc_sha1.c

53 
	~<fc_c‹e.h
>

56 
uöt32_t
 
	g_K
[] = { 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 };

58 
	#K
(
t
Ë
_K
[—Ë/ 20]

	)

60 
	#F0
(
b
, 
c
, 
d
Ë(((bË& (c)Ë| ((~(b)Ë& (d)))

	)

61 
	#F1
(
b
, 
c
, 
d
Ë(((bË^ (c)Ë^ (d))

	)

62 
	#F2
(
b
, 
c
, 
d
Ë(((bË& (c)Ë| ((bË& (d)Ë| ((cË& (d)))

	)

63 
	#F3
(
b
, 
c
, 
d
Ë(((bË^ (c)Ë^ (d))

	)

65 
	#S
(
n
, 
x
Ë(((xË<< (n)Ë| ((xË>> (32 -Ç)))

	)

67 
	#H
(
n
Ë(
˘xt
->
h
.
b32
[“)])

	)

68 
	#COUNT
 (
˘xt
->
cou¡
)

	)

69 
	#BCOUNT
 (
˘xt
->
c
.
b64
[0] / 8)

	)

70 
	#W
(
n
Ë(
˘xt
->
m
.
b32
[“)])

	)

72 
	#PUTBYTE
(
x
) do { \

73 
˘xt
->
m
.
b8
[(
COUNT
 % 64)] = (
x
); \

74 
COUNT
++; \

75 
COUNT
 %= 64; \

76 
˘xt
->
c
.
b64
[0] += 8; \

77 i‡(
COUNT
 % 64 == 0) { \

78 
	`sha1_°ï
(
˘xt
); \

80 } 0)

	)

82 
	#PUTPAD
(
x
) do { \

83 
˘xt
->
m
.
b8
[(
COUNT
 % 64)] = (
x
); \

84 
COUNT
++; \

85 
COUNT
 %= 64; \

86 i‡(
COUNT
 % 64 == 0) { \

87 
	`sha1_°ï
(
˘xt
); \

89 } 0)

	)

92 
	$sha1_°ï
(
sha1_˘xt
 *
˘xt
)

94 
uöt32_t
 
a
, 
b
, 
c
, 
d
, 
e
;

95 
size_t
 
t
, 
s
;

96 
uöt32_t
 
tmp
;

98 #ifde‡
FC_LITTLE_ENDIAN


99 
sha1_˘xt
 
t˘xt
;

100 
	`bc›y
(&
˘xt
->
m
.
b8
[0], &
t˘xt
.m.b8[0], 64);

101 
˘xt
->
m
.
b8
[0] = 
t˘xt
.m.b8[3]; ctxt->m.b8[1] =Åctxt.m.b8[2];

102 
˘xt
->
m
.
b8
[2] = 
t˘xt
.m.b8[1]; ctxt->m.b8[3] =Åctxt.m.b8[0];

103 
˘xt
->
m
.
b8
[4] = 
t˘xt
.m.b8[7]; ctxt->m.b8[5] =Åctxt.m.b8[6];

104 
˘xt
->
m
.
b8
[6] = 
t˘xt
.m.b8[5]; ctxt->m.b8[7] =Åctxt.m.b8[4];

105 
˘xt
->
m
.
b8
[8] = 
t˘xt
.m.b8[11]; ctxt->m.b8[9] =Åctxt.m.b8[10];

106 
˘xt
->
m
.
b8
[10] = 
t˘xt
.m.b8[9]; ctxt->m.b8[11] =Åctxt.m.b8[8];

107 
˘xt
->
m
.
b8
[12] = 
t˘xt
.m.b8[15]; ctxt->m.b8[13] =Åctxt.m.b8[14];

108 
˘xt
->
m
.
b8
[14] = 
t˘xt
.m.b8[13]; ctxt->m.b8[15] =Åctxt.m.b8[12];

109 
˘xt
->
m
.
b8
[16] = 
t˘xt
.m.b8[19]; ctxt->m.b8[17] =Åctxt.m.b8[18];

110 
˘xt
->
m
.
b8
[18] = 
t˘xt
.m.b8[17]; ctxt->m.b8[19] =Åctxt.m.b8[16];

111 
˘xt
->
m
.
b8
[20] = 
t˘xt
.m.b8[23]; ctxt->m.b8[21] =Åctxt.m.b8[22];

112 
˘xt
->
m
.
b8
[22] = 
t˘xt
.m.b8[21]; ctxt->m.b8[23] =Åctxt.m.b8[20];

113 
˘xt
->
m
.
b8
[24] = 
t˘xt
.m.b8[27]; ctxt->m.b8[25] =Åctxt.m.b8[26];

114 
˘xt
->
m
.
b8
[26] = 
t˘xt
.m.b8[25]; ctxt->m.b8[27] =Åctxt.m.b8[24];

115 
˘xt
->
m
.
b8
[28] = 
t˘xt
.m.b8[31]; ctxt->m.b8[29] =Åctxt.m.b8[30];

116 
˘xt
->
m
.
b8
[30] = 
t˘xt
.m.b8[29]; ctxt->m.b8[31] =Åctxt.m.b8[28];

117 
˘xt
->
m
.
b8
[32] = 
t˘xt
.m.b8[35]; ctxt->m.b8[33] =Åctxt.m.b8[34];

118 
˘xt
->
m
.
b8
[34] = 
t˘xt
.m.b8[33]; ctxt->m.b8[35] =Åctxt.m.b8[32];

119 
˘xt
->
m
.
b8
[36] = 
t˘xt
.m.b8[39]; ctxt->m.b8[37] =Åctxt.m.b8[38];

120 
˘xt
->
m
.
b8
[38] = 
t˘xt
.m.b8[37]; ctxt->m.b8[39] =Åctxt.m.b8[36];

121 
˘xt
->
m
.
b8
[40] = 
t˘xt
.m.b8[43]; ctxt->m.b8[41] =Åctxt.m.b8[42];

122 
˘xt
->
m
.
b8
[42] = 
t˘xt
.m.b8[41]; ctxt->m.b8[43] =Åctxt.m.b8[40];

123 
˘xt
->
m
.
b8
[44] = 
t˘xt
.m.b8[47]; ctxt->m.b8[45] =Åctxt.m.b8[46];

124 
˘xt
->
m
.
b8
[46] = 
t˘xt
.m.b8[45]; ctxt->m.b8[47] =Åctxt.m.b8[44];

125 
˘xt
->
m
.
b8
[48] = 
t˘xt
.m.b8[51]; ctxt->m.b8[49] =Åctxt.m.b8[50];

126 
˘xt
->
m
.
b8
[50] = 
t˘xt
.m.b8[49]; ctxt->m.b8[51] =Åctxt.m.b8[48];

127 
˘xt
->
m
.
b8
[52] = 
t˘xt
.m.b8[55]; ctxt->m.b8[53] =Åctxt.m.b8[54];

128 
˘xt
->
m
.
b8
[54] = 
t˘xt
.m.b8[53]; ctxt->m.b8[55] =Åctxt.m.b8[52];

129 
˘xt
->
m
.
b8
[56] = 
t˘xt
.m.b8[59]; ctxt->m.b8[57] =Åctxt.m.b8[58];

130 
˘xt
->
m
.
b8
[58] = 
t˘xt
.m.b8[57]; ctxt->m.b8[59] =Åctxt.m.b8[56];

131 
˘xt
->
m
.
b8
[60] = 
t˘xt
.m.b8[63]; ctxt->m.b8[61] =Åctxt.m.b8[62];

132 
˘xt
->
m
.
b8
[62] = 
t˘xt
.m.b8[61]; ctxt->m.b8[63] =Åctxt.m.b8[60];

135 
a
 = 
	`H
(0); 
b
 = H(1); 
c
 = H(2); 
d
 = H(3); 
e
 = H(4);

137 
t
 = 0;Å < 20;Å++) {

138 
s
 = 
t
 & 0x0f;

139 i‡(
t
 >= 16) {

140 
	`W
(
s
Ë
	`S
(1, W((s+13) & 0x0f) ^ W((s+8) & 0x0f) ^ W((s+2) & 0x0f) ^ W(s));

142 
tmp
 = 
	`S
(5, 
a
Ë+ 
	`F0
(
b
, 
c
, 
d
Ë+ 
e
 + 
	`W
(
s
Ë+ 
	`K
(
t
);

143 
e
 = 
d
; d = 
c
; c = 
	`S
(30, 
b
); b = 
a
;á = 
tmp
;

145 
t
 = 20;Å < 40;Å++) {

146 
s
 = 
t
 & 0x0f;

147 
	`W
(
s
Ë
	`S
(1, W((s+13) & 0x0f) ^ W((s+8) & 0x0f) ^ W((s+2) & 0x0f) ^ W(s));

148 
tmp
 = 
	`S
(5, 
a
Ë+ 
	`F1
(
b
, 
c
, 
d
Ë+ 
e
 + 
	`W
(
s
Ë+ 
	`K
(
t
);

149 
e
 = 
d
; d = 
c
; c = 
	`S
(30, 
b
); b = 
a
;á = 
tmp
;

151 
t
 = 40;Å < 60;Å++) {

152 
s
 = 
t
 & 0x0f;

153 
	`W
(
s
Ë
	`S
(1, W((s+13) & 0x0f) ^ W((s+8) & 0x0f) ^ W((s+2) & 0x0f) ^ W(s));

154 
tmp
 = 
	`S
(5, 
a
Ë+ 
	`F2
(
b
, 
c
, 
d
Ë+ 
e
 + 
	`W
(
s
Ë+ 
	`K
(
t
);

155 
e
 = 
d
; d = 
c
; c = 
	`S
(30, 
b
); b = 
a
;á = 
tmp
;

157 
t
 = 60;Å < 80;Å++) {

158 
s
 = 
t
 & 0x0f;

159 
	`W
(
s
Ë
	`S
(1, W((s+13) & 0x0f) ^ W((s+8) & 0x0f) ^ W((s+2) & 0x0f) ^ W(s));

160 
tmp
 = 
	`S
(5, 
a
Ë+ 
	`F3
(
b
, 
c
, 
d
Ë+ 
e
 + 
	`W
(
s
Ë+ 
	`K
(
t
);

161 
e
 = 
d
; d = 
c
; c = 
	`S
(30, 
b
); b = 
a
;á = 
tmp
;

164 
	`H
(0ËH(0Ë+ 
a
;

165 
	`H
(1ËH(1Ë+ 
b
;

166 
	`H
(2ËH(2Ë+ 
c
;

167 
	`H
(3ËH(3Ë+ 
d
;

168 
	`H
(4ËH(4Ë+ 
e
;

170 
	`bzîo
(&
˘xt
->
m
.
b8
[0], 64);

171 
	}
}

174 
	$sha1_öô
(
sha1_˘xt
 *
˘xt
)

176 
	`bzîo
(
˘xt
, (
sha1_˘xt
));

177 
	`H
(0) = 0x67452301;

178 
	`H
(1) = 0xefcdab89;

179 
	`H
(2) = 0x98badcfe;

180 
	`H
(3) = 0x10325476;

181 
	`H
(4) = 0xc3d2e1f0;

182 
	}
}

185 
	$sha1_∑d
(
sha1_˘xt
 *
˘xt
)

187 
size_t
 
∑dÀn
;

188 
size_t
 
∑d°¨t
;

190 
	`PUTPAD
(0x80);

192 
∑d°¨t
 = 
COUNT
 % 64;

193 
∑dÀn
 = 64 - 
∑d°¨t
;

194 i‡(
∑dÀn
 < 8) {

195 
	`bzîo
(&
˘xt
->
m
.
b8
[
∑d°¨t
], 
∑dÀn
);

196 
COUNT
 +
∑dÀn
;

197 
COUNT
 %= 64;

198 
	`sha1_°ï
(
˘xt
);

199 
∑d°¨t
 = 
COUNT
 % 64;

200 
∑dÀn
 = 64 - 
∑d°¨t
;

202 
	`bzîo
(&
˘xt
->
m
.
b8
[
∑d°¨t
], 
∑dÀn
 - 8);

203 
COUNT
 +(
∑dÀn
 - 8);

204 
COUNT
 %= 64;

205 #ifde‡
FC_LITTLE_ENDIAN


206 
	`PUTPAD
(
˘xt
->
c
.
b8
[7]); PUTPAD(ctxt->c.b8[6]);

207 
	`PUTPAD
(
˘xt
->
c
.
b8
[5]); PUTPAD(ctxt->c.b8[4]);

208 
	`PUTPAD
(
˘xt
->
c
.
b8
[3]); PUTPAD(ctxt->c.b8[2]);

209 
	`PUTPAD
(
˘xt
->
c
.
b8
[1]); PUTPAD(ctxt->c.b8[0]);

211 
	`PUTPAD
(
˘xt
->
c
.
b8
[0]); PUTPAD(ctxt->c.b8[1]);

212 
	`PUTPAD
(
˘xt
->
c
.
b8
[2]); PUTPAD(ctxt->c.b8[3]);

213 
	`PUTPAD
(
˘xt
->
c
.
b8
[4]); PUTPAD(ctxt->c.b8[5]);

214 
	`PUTPAD
(
˘xt
->
c
.
b8
[6]); PUTPAD(ctxt->c.b8[7]);

216 
	}
}

219 
	$sha1_lo›
(
sha1_˘xt
 *
˘xt
, 
uöt8_t
 *
öput
, 
size_t
 
Àn
)

221 
size_t
 
g≠Àn
;

222 
size_t
 
g≠°¨t
;

223 
size_t
 
off
;

224 
size_t
 
c›ysiz
;

226 
off
 = 0;

228 
off
 < 
Àn
) {

229 
g≠°¨t
 = 
COUNT
 % 64;

230 
g≠Àn
 = 64 - 
g≠°¨t
;

232 
c›ysiz
 = (
g≠Àn
 < 
Àn
 - 
off
) ? gaplen :Üen - off;

233 
	`bc›y
(&
öput
[
off
], &
˘xt
->
m
.
b8
[
g≠°¨t
], 
c›ysiz
);

234 
COUNT
 +
c›ysiz
;

235 
COUNT
 %= 64;

236 
˘xt
->
c
.
b64
[0] +
c›ysiz
 * 8;

237 i‡(
COUNT
 % 64 == 0)

238 
	`sha1_°ï
(
˘xt
);

239 
off
 +
c›ysiz
;

241 
	}
}

244 
	$sha1_ªsu…
(
sha1_˘xt
 *
˘xt
, 
uöt8_t
 *
dige°
)

246 
	`sha1_∑d
(
˘xt
);

247 #ifde‡
FC_LITTLE_ENDIAN


248 
dige°
[0] = 
˘xt
->
h
.
b8
[3]; digest[1] = ctxt->h.b8[2];

249 
dige°
[2] = 
˘xt
->
h
.
b8
[1]; digest[3] = ctxt->h.b8[0];

250 
dige°
[4] = 
˘xt
->
h
.
b8
[7]; digest[5] = ctxt->h.b8[6];

251 
dige°
[6] = 
˘xt
->
h
.
b8
[5]; digest[7] = ctxt->h.b8[4];

252 
dige°
[8] = 
˘xt
->
h
.
b8
[11]; digest[9] = ctxt->h.b8[10];

253 
dige°
[10] = 
˘xt
->
h
.
b8
[9]; digest[11] = ctxt->h.b8[8];

254 
dige°
[12] = 
˘xt
->
h
.
b8
[15]; digest[13] = ctxt->h.b8[14];

255 
dige°
[14] = 
˘xt
->
h
.
b8
[13]; digest[15] = ctxt->h.b8[12];

256 
dige°
[16] = 
˘xt
->
h
.
b8
[19]; digest[17] = ctxt->h.b8[18];

257 
dige°
[18] = 
˘xt
->
h
.
b8
[17]; digest[19] = ctxt->h.b8[16];

259 
	`bc›y
(&
˘xt
->
h
.
b8
[0], 
dige°
, 20);

261 
	}
}

263 
uöt32_t


264 
	$sha1_hash
(
uöt8_t
 *
md
)

266  ((
uöt32_t
Ë(
md
[3] & 0xff) << 24) |

267 ((
uöt32_t
Ë(
md
[2] & 0xff) << 16) |

268 ((
uöt32_t
Ë(
md
[1] & 0xff) << 8) |

269 (
md
[0] & 0xff);

270 
	}
}

273 
	$sha1
(
uöt8_t
 *
d
, 
size_t
 
n
, uöt8_à*
md
)

275 
sha1_˘xt
 
˘xt
;

277 
	`sha1_öô
(&
˘xt
);

278 
	`sha1_lo›
(&
˘xt
, 
d
, 
n
);

279 
	`sha1_ªsu…
(&
˘xt
, 
md
);

280 
	}
}

	@/home/hx/fatcache/src/fc_sha1.h

53 #i‚de‡
_FC_SHA1_H_


54 
	#_FC_SHA1_H_


	)

56 
	ssha1_˘xt
 {

58 
uöt8_t
 
	mb8
[20];

59 
uöt32_t
 
	mb32
[5];

60 } 
	mh
;

62 
uöt8_t
 
	mb8
[8];

63 
uöt64_t
 
	mb64
[1];

64 } 
	mc
;

66 
uöt8_t
 
	mb8
[64];

67 
uöt32_t
 
	mb32
[16];

68 } 
	mm
;

69 
uöt8_t
 
	mcou¡
;

72 
sha1_öô
(
sha1_˘xt
 *
˘xt
);

73 
sha1_∑d
(
sha1_˘xt
 *
˘xt
);

74 
sha1_lo›
(
sha1_˘xt
 *
˘xt
, 
uöt8_t
 *
öput
, 
size_t
 
Àn
);

75 
sha1_ªsu…
(
sha1_˘xt
 *
˘xt
, 
uöt8_t
 *
dige°
);

76 
sha1
(
uöt8_t
 *
d
, 
size_t
 
n
, uöt8_à*
md
);

77 
uöt32_t
 
sha1_hash
(
uöt8_t
 *
md
);

	@/home/hx/fatcache/src/fc_signal.c

18 
	~<°dlib.h
>

19 
	~<sig«l.h
>

21 
	~<fc_c‹e.h
>

23 
sig«l
 
	gsig«ls
[] = {

24 { 
SIGUSR1
, "SIGUSR1", 0, 
sig«l_h™dÀr
 },

25 { 
SIGUSR2
, "SIGUSR2", 0, 
sig«l_h™dÀr
 },

26 { 
SIGTTIN
, "SIGTTIN", 0, 
sig«l_h™dÀr
 },

27 { 
SIGTTOU
, "SIGTTOU", 0, 
sig«l_h™dÀr
 },

28 { 
SIGHUP
, "SIGHUP", 0, 
sig«l_h™dÀr
 },

29 { 
SIGINT
, "SIGINT", 0, 
sig«l_h™dÀr
 },

30 { 
SIGSEGV
, "SIGSEGV", 
SA_RESETHAND
, 
sig«l_h™dÀr
 },

31 { 
SIGPIPE
, "SIGPIPE", 0, 
SIG_IGN
 },

32 { 0, 
NULL
, 0, NULL }

35 
r°©us_t


36 
	$sig«l_öô
()

38 
sig«l
 *
sig
;

40 
sig
 = 
sig«ls
; sig->
signo
 != 0; sig++) {

41 
r°©us_t
 
°©us
;

42 
siga˘i⁄
 
ß
;

44 
	`mem£t
(&
ß
, 0, (sa));

45 
ß
.
ß_h™dÀr
 = 
sig
->
h™dÀr
;

46 
ß
.
ß_Êags
 = 
sig
->
Êags
;

47 
	`sigem±y£t
(&
ß
.
ß_mask
);

49 
°©us
 = 
	`siga˘i⁄
(
sig
->
signo
, &
ß
, 
NULL
);

50 i‡(
°©us
 < 0) {

51 
	`log_îr‹
("siga˘i⁄(%sËÁûed: %s", 
sig
->
sig«me
,

52 
	`°ªº‹
(
î∫o
));

53  
FC_ERROR
;

57  
FC_OK
;

58 
	}
}

61 
	$sig«l_deöô
()

63 
	}
}

66 
	$sig«l_h™dÀr
(
signo
)

68 
sig«l
 *
sig
;

69 (*
a˘i⁄
)();

70 *
a˘i⁄°r
;

71 
boﬁ
 
d⁄e
;

73 
sig
 = 
sig«ls
; sig->
signo
 != 0; sig++) {

74 i‡(
sig
->
signo
 == signo) {

78 
	`ASSERT
(
sig
->
signo
 != 0);

80 
a˘i⁄°r
 = "";

81 
a˘i⁄
 = 
NULL
;

82 
d⁄e
 = 
Ál£
;

84 
signo
) {

85 
SIGUSR1
:

88 
SIGUSR2
:

91 
SIGTTIN
:

92 
a˘i⁄°r
 = ", upÜoggingÜevel";

93 
a˘i⁄
 = 
log_Àvñ_up
;

96 
SIGTTOU
:

97 
a˘i⁄°r
 = ", downÜoggingÜevel";

98 
a˘i⁄
 = 
log_Àvñ_down
;

101 
SIGHUP
:

102 
a˘i⁄°r
 = ",ÑeopeningÜog file";

103 
a˘i⁄
 = 
log_ª›í
;

106 
SIGINT
:

107 
d⁄e
 = 
åue
;

108 
a˘i⁄°r
 = ",Éxiting";

111 
SIGSEGV
:

112 
	`fc_°ackåa˚
(1);

113 
a˘i⁄°r
 = ", core dumping";

114 
	`øi£
(
SIGSEGV
);

118 
	`NOT_REACHED
();

121 
	`log_debug
(
LOG_NOTICE
, "sig«»%d (%sËª˚ived%s", 
signo
, 
sig
->
sig«me
,

122 
a˘i⁄°r
);

124 i‡(
a˘i⁄
 !
NULL
) {

125 
	`a˘i⁄
();

128 i‡(
d⁄e
) {

129 
	`exô
(1);

131 
	}
}

	@/home/hx/fatcache/src/fc_signal.h

18 #i‚de‡
_FC_SIGNAL_H_


19 
	#_FC_SIGNAL_H_


	)

21 
	ssig«l
 {

22 
	msigno
;

23 *
	msig«me
;

24 
	mÊags
;

25 (*
	mh™dÀr
)(
	msigno
);

28 
r°©us_t
 
sig«l_öô
();

29 
sig«l_deöô
();

30 
sig«l_h™dÀr
(
signo
);

	@/home/hx/fatcache/src/fc_slab.c

18 
	~<fc_c‹e.h
>

20 
£âögs
 settings;

22 
uöt32_t
 
	gn‰ì_msöfoq
;

23 
¶abhöfo
 
	g‰ì_msöfoq
;

24 
uöt32_t
 
	gnfuŒ_msöfoq
;

25 
¶abhöfo
 
	gfuŒ_msöfoq
;

27 
uöt32_t
 
	gn‰ì_dsöfoq
;

28 
¶abhöfo
 
	g‰ì_dsöfoq
;

29 
uöt32_t
 
	gnfuŒ_dsöfoq
;

30 
¶abhöfo
 
	gfuŒ_dsöfoq
;

32 
uöt8_t
 
	gn˘abÀ
;

33 
¶ab˛ass
 *
	g˘abÀ
;

35 
uöt32_t
 
	gn°abÀ
;

36 
¶aböfo
 *
	g°abÀ
;

38 
uöt8_t
 *
	gm°¨t
;

39 
uöt8_t
 *
	gmíd
;

41 
off_t
 
	gd°¨t
;

42 
off_t
 
	gdíd
;

43 
	gfd
;

45 
size_t
 
	gm•a˚
;

46 
size_t
 
	gd•a˚
;

47 
uöt32_t
 
	gnm¶ab
;

48 
uöt32_t
 
	gnd¶ab
;

50 
uöt8_t
 *
	gevi˘buf
;

51 
uöt8_t
 *
	gªadbuf
;

57 
size_t


58 
	$¶ab_d©a_size
()

60  
£âögs
.
¶ab_size
 - 
SLAB_HDR_SIZE
;

61 
	}
}

67 
boﬁ


68 
	$¶ab_vÆid_id
(
uöt8_t
 
cid
)

70 i‡(
cid
 >
SLABCLASS_MIN_ID
 && cid <
£âögs
.
¥ofûe_œ°_id
) {

71  
åue
;

74  
Ál£
;

75 
	}
}

78 
	$¶ab_¥öt
()

80 
uöt8_t
 
cid
;

81 
¶ab˛ass
 *
c
;

83 
	`loga
("slab size %zu, slab hdr size %zu, item hdr size %zu, "

84 "ôem chunk sizê%zu", 
£âögs
.
¶ab_size
, 
SLAB_HDR_SIZE
,

85 
ITEM_HDR_SIZE
, 
£âögs
.
chunk_size
);

87 
	`loga
("index memory %zu, slab memory %zu, disk space %zu",

88 0, 
m•a˚
, 
d•a˚
);

90 
cid
 = 
SLABCLASS_MIN_ID
; cid < 
n˘abÀ
; cid++) {

91 
c
 = &
˘abÀ
[
cid
];

92 
	`loga
("˛as†%3"
PRId8
": iãm†%7"
PRIu32
" size %7zu data %7zu "

93 "¶ack %7zu", 
cid
, 
c
->
nôem
, c->
size
, c->sizê- 
ITEM_HDR_SIZE
,

94 
c
->
¶ack
);

96 
	}
}

104 
uöt8_t


105 
	$¶ab_cid
(
size_t
 
size
)

107 
uöt8_t
 
cid
, 
imö
, 
imax
;

109 
	`ASSERT
(
size
 != 0);

112 
imö
 = 
SLABCLASS_MIN_ID
;

113 
imax
 = 
n˘abÀ
;

114 
imax
 >
imö
) {

115 
cid
 = (
imö
 + 
imax
) / 2;

116 i‡(
size
 > 
˘abÀ
[
cid
].size) {

117 
imö
 = 
cid
 + 1;

118 } i‡(
cid
 > 
SLABCLASS_MIN_ID
 && 
size
 <
˘abÀ
[cid - 1].size) {

119 
imax
 = 
cid
 - 1;

125 i‡(
imö
 > 
imax
) {

127  
SLABCLASS_INVALID_ID
;

130  
cid
;

131 
	}
}

137 
boﬁ


138 
	$¶ab_fuŒ
(
¶aböfo
 *
söfo
)

140 
¶ab˛ass
 *
c
;

142 
	`ASSERT
(
söfo
->
cid
 >
SLABCLASS_MIN_ID
 && söfo->cid < 
n˘abÀ
);

143 
c
 = &
˘abÀ
[
söfo
->
cid
];

145  (
c
->
nôem
 =
söfo
->
«Œoc
Ë? 
åue
 : 
Ál£
;

146 
	}
}

153 
	$¶ab_‰om_maddr
(
uöt32_t
 
addr
, 
boﬁ
 
vîify
)

155 
¶ab
 *slab;

156 
off_t
 
off
;

158 
off
 = (
off_t
)
addr
 * 
£âögs
.
¶ab_size
;

159 
¶ab
 = (¶ab *)(
m°¨t
 + 
off
);

160 i‡(
vîify
) {

161 
	`ASSERT
(
m°¨t
 + 
off
 < 
míd
);

162 
	`ASSERT
(
¶ab
->
magic
 =
SLAB_MAGIC
);

163 
	`ASSERT
(
¶ab
->
sid
 < 
n°abÀ
);

164 
	`ASSERT
(
°abÀ
[
¶ab
->
sid
].sid == slab->sid);

165 
	`ASSERT
(
°abÀ
[
¶ab
->
sid
].
cid
 == slab->cid);

166 
	`ASSERT
(
°abÀ
[
¶ab
->
sid
].
mem
 == 1);

169  
¶ab
;

170 
	}
}

176 
off_t


177 
	$¶ab_to_daddr
(
¶aböfo
 *
söfo
)

179 
off_t
 
off
;

181 
	`ASSERT
(!
söfo
->
mem
);

183 
off
 = 
d°¨t
 + ((
off_t
)
söfo
->
addr
 * 
£âögs
.
¶ab_size
);

184 
	`ASSERT
(
off
 < 
díd
);

186  
off
;

187 
	}
}

193 
ôem
 *

194 
	$¶ab_to_ôem
(
¶ab
 *¶ab, 
uöt32_t
 
idx
, 
size_t
 
size
, 
boﬁ
 
vîify
)

196 
ôem
 *
ô
;

198 
	`ASSERT
(
¶ab
->
magic
 =
SLAB_MAGIC
);

199 
	`ASSERT
(
idx
 <
°abÀ
[
¶ab
->
sid
].
«Œoc
);

200 
	`ASSERT
(
idx
 * 
size
 < 
£âögs
.
¶ab_size
);

202 
ô
 = (
ôem
 *)((
uöt8_t
 *)
¶ab
->
d©a
 + (
idx
 * 
size
));

203 i‡(
vîify
) {

204 
	`ASSERT
(
ô
->
magic
 =
ITEM_MAGIC
);

205 
	`ASSERT
(
ô
->
cid
 =
¶ab
->cid);

206 
	`ASSERT
(
ô
->
sid
 =
¶ab
->sid);

209  
ô
;

210 
	}
}

212 
r°©us_t


213 
	$¶ab_evi˘
()

215 
¶ab˛ass
 *
c
;

216 
¶aböfo
 *
söfo
;

217 
¶ab
 *slab;

218 
size_t
 
size
;

219 
off_t
 
off
;

220 
n
;

221 
uöt32_t
 
idx
;

223 
	`ASSERT
(!
	`TAILQ_EMPTY
(&
fuŒ_dsöfoq
));

224 
	`ASSERT
(
nfuŒ_dsöfoq
 > 0);

226 
söfo
 = 
	`TAILQ_FIRST
(&
fuŒ_dsöfoq
);

227 
nfuŒ_dsöfoq
--;

228 
	`TAILQ_REMOVE
(&
fuŒ_dsöfoq
, 
söfo
, 
tqe
);

229 
	`ASSERT
(!
söfo
->
mem
);

230 
	`ASSERT
(
söfo
->
addr
 < 
nd¶ab
);

233 
¶ab
 = (¶ab *)
evi˘buf
;

234 
size
 = 
£âögs
.
¶ab_size
;

235 
off
 = 
	`¶ab_to_daddr
(
söfo
);

236 
n
 = 
	`¥ód
(
fd
, 
¶ab
, 
size
, 
off
);

237 i‡(
n
 < 
size
) {

238 
	`log_îr‹
("¥ód fd %d %zu byã†© off£à%"
PRIu64
" faûed: %s", 
fd
,

239 
size
, (
uöt64_t
)
off
, 
	`°ªº‹
(
î∫o
));

240  
FC_ERROR
;

242 
	`ASSERT
(
¶ab
->
magic
 =
SLAB_MAGIC
);

243 
	`ASSERT
(
¶ab
->
sid
 =
söfo
->sid);

244 
	`ASSERT
(
¶ab
->
cid
 =
söfo
->cid);

245 
	`ASSERT
(
	`¶ab_fuŒ
(
söfo
));

248 
c
 = &
˘abÀ
[
¶ab
->
cid
], 
idx
 = 0; idx < c->
nôem
; idx++) {

249 
ôem
 *
ô
 = 
	`¶ab_to_ôem
(
¶ab
, 
idx
, 
c
->
size
, 
åue
);

250 i‡(
	`ôemx_gëx
(
ô
->
hash
, it->
md
Ë!
NULL
) {

251 
	`ôemx_ªmovex
(
ô
->
hash
, it->
md
);

255 
	`log_debug
(
LOG_DEBUG
, "evi˘ sœbáàdisk (sid %"
PRIu32
",áddr %"PRIu32")",

256 
söfo
->
sid
, söfo->
addr
);

259 
n‰ì_dsöfoq
++;

260 
	`TAILQ_INSERT_TAIL
(&
‰ì_dsöfoq
, 
söfo
, 
tqe
);

262  
FC_OK
;

263 
	}
}

266 
	$¶ab_sw≠_addr
(
¶aböfo
 *
msöfo
, ¶aböfÿ*
dsöfo
)

268 
uöt32_t
 
m_addr
;

270 
	`ASSERT
(
msöfo
->
mem
);

271 
	`ASSERT
(!
dsöfo
->
mem
);

274 
m_addr
 = 
msöfo
->
addr
;

276 
msöfo
->
addr
 = 
dsöfo
->addr;

277 
msöfo
->
mem
 = 0;

279 
dsöfo
->
addr
 = 
m_addr
;

280 
dsöfo
->
mem
 = 1;

281 
	}
}

283 
r°©us_t


284 
	$_¶ab_døö
()

286 
¶aböfo
 *
msöfo
, *
dsöfo
;

287 
¶ab
 *slab;

288 
size_t
 
size
;

289 
off_t
 
off
;

290 
n
;

292 
	`ASSERT
(!
	`TAILQ_EMPTY
(&
fuŒ_msöfoq
));

293 
	`ASSERT
(
nfuŒ_msöfoq
 > 0);

295 
	`ASSERT
(!
	`TAILQ_EMPTY
(&
‰ì_dsöfoq
));

296 
	`ASSERT
(
n‰ì_dsöfoq
 > 0);

299 
msöfo
 = 
	`TAILQ_FIRST
(&
fuŒ_msöfoq
);

300 
nfuŒ_msöfoq
--;

301 
	`TAILQ_REMOVE
(&
fuŒ_msöfoq
, 
msöfo
, 
tqe
);

302 
	`ASSERT
(
msöfo
->
mem
);

303 
	`ASSERT
(
	`¶ab_fuŒ
(
msöfo
));

306 
dsöfo
 = 
	`TAILQ_FIRST
(&
‰ì_dsöfoq
);

307 
n‰ì_dsöfoq
--;

308 
	`TAILQ_REMOVE
(&
‰ì_dsöfoq
, 
dsöfo
, 
tqe
);

309 
	`ASSERT
(!
dsöfo
->
mem
);

312 
¶ab
 = 
	`¶ab_‰om_maddr
(
msöfo
->
addr
, 
åue
);

313 
size
 = 
£âögs
.
¶ab_size
;

314 
off
 = 
	`¶ab_to_daddr
(
dsöfo
);

315 
n
 = 
	`pwrôe
(
fd
, 
¶ab
, 
size
, 
off
);

316 i‡(
n
 < 
size
) {

317 
	`log_îr‹
("pwrôêfd %d %zu byã†© off£à%"
PRId64
" failed: %s",

318 
fd
, 
size
, 
off
, 
	`°ªº‹
(
î∫o
));

319  
FC_ERROR
;

322 
	`log_debug
(
LOG_DEBUG
, "døö sœbáàmem‹y (sid %"
PRIu32
"áddr %"PRIu32") "

323 "tÿdisk (sid %"
PRIu32
"ádd∏%"PRIu32")", 
msöfo
->
sid
,

324 
msöfo
->
addr
, 
dsöfo
->
sid
, dsinfo->addr);

327 
	`¶ab_sw≠_addr
(
msöfo
, 
dsöfo
);

330 
n‰ì_msöfoq
++;

331 
	`TAILQ_INSERT_TAIL
(&
‰ì_msöfoq
, 
dsöfo
, 
tqe
);

334 
nfuŒ_dsöfoq
++;

335 
	`TAILQ_INSERT_TAIL
(&
fuŒ_dsöfoq
, 
msöfo
, 
tqe
);

337  
FC_OK
;

338 
	}
}

340 
r°©us_t


341 
	$¶ab_døö
()

343 
r°©us_t
 
°©us
;

345 i‡(!
	`TAILQ_EMPTY
(&
‰ì_dsöfoq
)) {

346 
	`ASSERT
(
n‰ì_dsöfoq
 > 0);

347  
	`_¶ab_døö
();

350 
°©us
 = 
	`¶ab_evi˘
();

351 i‡(
°©us
 !
FC_OK
) {

352  
°©us
;

355 
	`ASSERT
(!
	`TAILQ_EMPTY
(&
‰ì_dsöfoq
));

356 
	`ASSERT
(
n‰ì_dsöfoq
 > 0);

358  
	`_¶ab_døö
();

359 
	}
}

361 
ôem
 *

362 
	$_¶ab_gë_ôem
(
uöt8_t
 
cid
)

364 
¶ab˛ass
 *
c
;

365 
¶aböfo
 *
söfo
;

366 
¶ab
 *slab;

367 
ôem
 *
ô
;

369 
	`ASSERT
(
cid
 >
SLABCLASS_MIN_ID
 && cid < 
n˘abÀ
);

370 
c
 = &
˘abÀ
[
cid
];

373 
	`ASSERT
(!
	`TAILQ_EMPTY
(&
c
->
∑πül_msöfoq
));

374 
söfo
 = 
	`TAILQ_FIRST
(&
c
->
∑πül_msöfoq
);

375 
	`ASSERT
(!
	`¶ab_fuŒ
(
söfo
));

376 
¶ab
 = 
	`¶ab_‰om_maddr
(
söfo
->
addr
, 
åue
);

379 
ô
 = 
	`¶ab_to_ôem
(
¶ab
, 
söfo
->
«Œoc
, 
c
->
size
, 
Ál£
);

380 
ô
->
off£t
 = (
uöt32_t
)((
uöt8_t
 *)ô - (uöt8_à*)
¶ab
);

381 
ô
->
sid
 = 
¶ab
->sid;

382 
söfo
->
«Œoc
++;

384 i‡(
	`¶ab_fuŒ
(
söfo
)) {

386 
	`TAILQ_REMOVE
(&
c
->
∑πül_msöfoq
, 
söfo
, 
tqe
);

387 
nfuŒ_msöfoq
++;

388 
	`TAILQ_INSERT_TAIL
(&
fuŒ_msöfoq
, 
söfo
, 
tqe
);

391 
	`log_debug
(
LOG_VERB
, "gë ià© off£à%"
PRIu32
" wôh cid %"
PRIu8
"",

392 
ô
->
off£t
, it->
cid
);

394  
ô
;

395 
	}
}

397 
ôem
 *

398 
	$¶ab_gë_ôem
(
uöt8_t
 
cid
)

400 
r°©us_t
 
°©us
;

401 
¶ab˛ass
 *
c
;

402 
¶aböfo
 *
söfo
;

403 
¶ab
 *slab;

405 
	`ASSERT
(
cid
 >
SLABCLASS_MIN_ID
 && cid < 
n˘abÀ
);

406 
c
 = &
˘abÀ
[
cid
];

408 i‡(
	`ôemx_em±y
()) {

409 
°©us
 = 
	`¶ab_evi˘
();

410 i‡(
°©us
 !
FC_OK
) {

411  
NULL
;

415 i‡(!
	`TAILQ_EMPTY
(&
c
->
∑πül_msöfoq
)) {

416  
	`_¶ab_gë_ôem
(
cid
);

419 i‡(!
	`TAILQ_EMPTY
(&
‰ì_msöfoq
)) {

421 
söfo
 = 
	`TAILQ_FIRST
(&
‰ì_msöfoq
);

422 
	`ASSERT
(
n‰ì_msöfoq
 > 0);

423 
n‰ì_msöfoq
--;

424 
	`TAILQ_REMOVE
(&
‰ì_msöfoq
, 
söfo
, 
tqe
);

427 
	`TAILQ_INSERT_HEAD
(&
c
->
∑πül_msöfoq
, 
söfo
, 
tqe
);

430 
söfo
->
«Œoc
 = 0;

431 
söfo
->
n‰ì
 = 0;

432 
söfo
->
cid
 = cid;

434 
	`ASSERT
(
söfo
->
mem
 == 1);

437 
¶ab
 = 
	`¶ab_‰om_maddr
(
söfo
->
addr
, 
Ál£
);

438 
¶ab
->
magic
 = 
SLAB_MAGIC
;

439 
¶ab
->
cid
 = cid;

441 
¶ab
->
sid
 = 
söfo
->sid;

444  
	`_¶ab_gë_ôem
(
cid
);

447 
	`ASSERT
(!
	`TAILQ_EMPTY
(&
fuŒ_msöfoq
));

448 
	`ASSERT
(
nfuŒ_msöfoq
 > 0);

450 
°©us
 = 
	`¶ab_døö
();

451 i‡(
°©us
 !
FC_OK
) {

452  
NULL
;

455  
	`¶ab_gë_ôem
(
cid
);

456 
	}
}

459 
	$¶ab_put_ôem
(
ôem
 *
ô
)

461 
	`log_debug
(
LOG_INFO
, "puàô '%.*s'áàoff£à%"
PRIu32
" wôh cid %"
PRIu8
,

462 
ô
->
nkey
, 
	`ôem_key
(ô), it->
off£t
, it->
cid
);

463 
	}
}

465 
ôem
 *

466 
	$¶ab_ªad_ôem
(
uöt32_t
 
sid
, uöt32_à
addr
)

468 
¶ab˛ass
 *
c
;

469 
ôem
 *
ô
;

470 
¶aböfo
 *
söfo
;

471 
n
;

472 
off_t
 
off
;

473 
size_t
 
size
;

474 
off_t
 
Æig√d_off
;

475 
size_t
 
Æig√d_size
;

477 
	`ASSERT
(
sid
 < 
n°abÀ
);

478 
	`ASSERT
(
addr
 < 
£âögs
.
¶ab_size
);

480 
söfo
 = &
°abÀ
[
sid
];

481 
c
 = &
˘abÀ
[
söfo
->
cid
];

482 
size
 = 
£âögs
.
¶ab_size
;

483 
ô
 = 
NULL
;

485 i‡(
söfo
->
mem
) {

486 
off
 = (
off_t
)
söfo
->
addr
 * 
£âögs
.
¶ab_size
 +áddr;

487 
	`fc_mem˝y
(
ªadbuf
, 
m°¨t
 + 
off
, 
c
->
size
);

488 
ô
 = (
ôem
 *)
ªadbuf
;

489 
d⁄e
;

492 
off
 = 
	`¶ab_to_daddr
(
söfo
Ë+ 
addr
;

493 
Æig√d_off
 = 
	`ROUND_DOWN
(
off
, 512);

494 
Æig√d_size
 = 
	`ROUND_UP
((
c
->
size
 + (
off
 - 
Æig√d_off
)), 512);

496 
n
 = 
	`¥ód
(
fd
, 
ªadbuf
, 
Æig√d_size
, 
Æig√d_off
);

497 i‡(
n
 < 
Æig√d_size
) {

498 
	`log_îr‹
("¥ód fd %d %zu byã†© off£à%"
PRIu64
" faûed: %s", 
fd
,

499 
Æig√d_size
, (
uöt64_t
)
Æig√d_off
, 
	`°ªº‹
(
î∫o
));

500  
NULL
;

502 
ô
 = (
ôem
 *)(
ªadbuf
 + (
off
 - 
Æig√d_off
));

504 
d⁄e
:

505 
	`ASSERT
(
ô
->
magic
 =
ITEM_MAGIC
);

506 
	`ASSERT
(
ô
->
cid
 =
söfo
->cid);

507 
	`ASSERT
(
ô
->
sid
 =
söfo
->sid);

509  
ô
;

510 
	}
}

512 
r°©us_t


513 
	$¶ab_öô_˘abÀ
()

515 
¶ab˛ass
 *
c
;

516 
uöt8_t
 
cid
;

517 
size_t
 *
¥ofûe
;

519 
	`ASSERT
(
£âögs
.
¥ofûe_œ°_id
 <
SLABCLASS_MAX_ID
);

521 
¥ofûe
 = 
£âögs
.profile;

522 
n˘abÀ
 = 
£âögs
.
¥ofûe_œ°_id
 + 1;

523 
˘abÀ
 = 
	`fc_Æloc
((*˘abÀË* 
n˘abÀ
);

524 i‡(
˘abÀ
 =
NULL
) {

525  
FC_ENOMEM
;

528 
cid
 = 
SLABCLASS_MIN_ID
; cid < 
n˘abÀ
; cid++) {

529 
c
 = &
˘abÀ
[
cid
];

530 
c
->
nôem
 = 
	`¶ab_d©a_size
(Ë/ 
¥ofûe
[
cid
];

531 
c
->
size
 = 
¥ofûe
[
cid
];

532 
c
->
¶ack
 = 
	`¶ab_d©a_size
(Ë- (c->
nôem
 * c->
size
);

533 
	`TAILQ_INIT
(&
c
->
∑πül_msöfoq
);

536  
FC_OK
;

537 
	}
}

540 
	$¶ab_deöô_˘abÀ
()

542 
	}
}

544 
r°©us_t


545 
	$¶ab_öô_°abÀ
()

547 
¶aböfo
 *
söfo
;

548 
uöt32_t
 
i
, 
j
;

550 
n°abÀ
 = 
nm¶ab
 + 
nd¶ab
;

551 
°abÀ
 = 
	`fc_Æloc
((*°abÀË* 
n°abÀ
);

552 i‡(
°abÀ
 =
NULL
) {

553  
FC_ENOMEM
;

557 
i
 = 0; i < 
nm¶ab
; i++) {

558 
söfo
 = &
°abÀ
[
i
];

560 
söfo
->
sid
 = 
i
;

561 
söfo
->
addr
 = 
i
;

562 
söfo
->
«Œoc
 = 0;

563 
söfo
->
n‰ì
 = 0;

564 
söfo
->
cid
 = 
SLABCLASS_INVALID_ID
;

565 
söfo
->
mem
 = 1;

567 
n‰ì_msöfoq
++;

568 
	`TAILQ_INSERT_TAIL
(&
‰ì_msöfoq
, 
söfo
, 
tqe
);

572 
j
 = 0; j < 
nd¶ab
 && 
i
 < 
n°abÀ
; i++, j++) {

573 
söfo
 = &
°abÀ
[
i
];

575 
söfo
->
sid
 = 
i
;

576 
söfo
->
addr
 = 
j
;

577 
söfo
->
«Œoc
 = 0;

578 
söfo
->
n‰ì
 = 0;

579 
söfo
->
cid
 = 
SLABCLASS_INVALID_ID
;

580 
söfo
->
mem
 = 0;

582 
n‰ì_dsöfoq
++;

583 
	`TAILQ_INSERT_TAIL
(&
‰ì_dsöfoq
, 
söfo
, 
tqe
);

586  
FC_OK
;

587 
	}
}

590 
	$¶ab_deöô_°abÀ
()

592 
	}
}

594 
r°©us_t


595 
	$¶ab_öô
()

597 
r°©us_t
 
°©us
;

598 
size_t
 
size
;

599 
uöt32_t
 
ndchunk
;

601 
n‰ì_msöfoq
 = 0;

602 
	`TAILQ_INIT
(&
‰ì_msöfoq
);

603 
nfuŒ_msöfoq
 = 0;

604 
	`TAILQ_INIT
(&
fuŒ_msöfoq
);

606 
n‰ì_dsöfoq
 = 0;

607 
	`TAILQ_INIT
(&
‰ì_dsöfoq
);

608 
nfuŒ_dsöfoq
 = 0;

609 
	`TAILQ_INIT
(&
fuŒ_dsöfoq
);

611 
n˘abÀ
 = 0;

612 
˘abÀ
 = 
NULL
;

614 
n°abÀ
 = 0;

615 
°abÀ
 = 
NULL
;

617 
m°¨t
 = 
NULL
;

618 
míd
 = 
NULL
;

620 
d°¨t
 = 0;

621 
díd
 = 0;

622 
fd
 = -1;

624 
m•a˚
 = 0;

625 
d•a˚
 = 0;

626 
nm¶ab
 = 0;

627 
nd¶ab
 = 0;

629 
evi˘buf
 = 
NULL
;

630 
ªadbuf
 = 
NULL
;

632 i‡(
£âögs
.
ssd_devi˚
 =
NULL
) {

633 
	`log_îr‹
("ssd device file must be specified");

634  
FC_ERROR
;

638 
°©us
 = 
	`¶ab_öô_˘abÀ
();

639 i‡(
°©us
 !
FC_OK
) {

640  
°©us
;

644 
nm¶ab
 = 
	`MAX
(
n˘abÀ
, 
£âögs
.
max_¶ab_mem‹y
 / sëtögs.
¶ab_size
);

645 
m•a˚
 = 
nm¶ab
 * 
£âögs
.
¶ab_size
;

646 
m°¨t
 = 
	`fc_mm≠
(
m•a˚
);

647 i‡(
m°¨t
 =
NULL
) {

648 
	`log_îr‹
("mm≠ %zu byã†Áûed: %s", 
m•a˚
, 
	`°ªº‹
(
î∫o
));

649  
FC_ENOMEM
;

651 
míd
 = 
m°¨t
 + 
m•a˚
;

654 
°©us
 = 
	`fc_devi˚_size
(
£âögs
.
ssd_devi˚
, &
size
);

655 i‡(
°©us
 !
FC_OK
) {

656  
°©us
;

658 
ndchunk
 = 
size
 / 
£âögs
.
¶ab_size
;

659 
	`ASSERT
(
£âögs
.
£rvî_n
 <
ndchunk
);

660 
nd¶ab
 = 
ndchunk
 / 
£âögs
.
£rvî_n
;

661 
d•a˚
 = 
nd¶ab
 * 
£âögs
.
¶ab_size
;

662 
d°¨t
 = (
£âögs
.
£rvî_id
 * 
nd¶ab
Ë* sëtögs.
¶ab_size
;

663 
díd
 = ((
£âögs
.
£rvî_id
 + 1Ë* 
nd¶ab
Ë* sëtögs.
¶ab_size
;

666 
fd
 = 
	`›í
(
£âögs
.
ssd_devi˚
, 
O_RDWR
 | 
O_DIRECT
, 0644);

667 i‡(
fd
 < 0) {

668 
	`log_îr‹
("›í '%s' faûed: %s", 
£âögs
.
ssd_devi˚
, 
	`°ªº‹
(
î∫o
));

669  
FC_ERROR
;

673 
°©us
 = 
	`¶ab_öô_°abÀ
();

674 i‡(
°©us
 !
FC_OK
) {

675  
°©us
;

679 
evi˘buf
 = 
	`fc_mm≠
(
£âögs
.
¶ab_size
);

680 i‡(
evi˘buf
 =
NULL
) {

681 
	`log_îr‹
("mm≠ %zu byã†Áûed: %s", 
£âögs
.
¶ab_size
,

682 
	`°ªº‹
(
î∫o
));

683  
FC_ENOMEM
;

685 
	`mem£t
(
evi˘buf
, 0xff, 
£âögs
.
¶ab_size
);

687 
ªadbuf
 = 
	`fc_mm≠
(
£âögs
.
¶ab_size
);

688 i‡(
ªadbuf
 =
NULL
) {

689 
	`log_îr‹
("mm≠ %zu byã†Áûed: %s", 
£âögs
.
¶ab_size
,

690 
	`°ªº‹
(
î∫o
));

691  
FC_ENOMEM
;

693 
	`mem£t
(
ªadbuf
, 0xff, 
£âögs
.
¶ab_size
);

695  
FC_OK
;

696 
	}
}

699 
	$¶ab_deöô
()

701 
	`¶ab_deöô_˘abÀ
();

702 
	`¶ab_deöô_°abÀ
();

703 
	}
}

	@/home/hx/fatcache/src/fc_slab.h

18 #i‚de‡
_FC_SLAB_H_


19 
	#_FC_SLAB_H_


	)

21 
	s¶ab
 {

22 
uöt32_t
 
	mmagic
;

23 
uöt32_t
 
	msid
;

24 
uöt8_t
 
	mcid
;

25 
uöt8_t
 
	munu£d
[3];

26 
uöt8_t
 
	md©a
[1];

29 
	#SLAB_MAGIC
 0xdódbìf

	)

30 
	#SLAB_HDR_SIZE
 
	`off£tof
(
¶ab
, 
d©a
)

	)

31 
	#SLAB_MIN_SIZE
 ((
size_t
Ë
MB
)

	)

32 
	#SLAB_SIZE
 
MB


	)

33 
	#SLAB_MAX_SIZE
 ((
size_t
Ë(512 * 
MB
))

	)

35 
	s¶aböfo
 {

36 
uöt32_t
 
	msid
;

37 
uöt32_t
 
	maddr
;

38 
TAILQ_ENTRY
(
¶aböfo
Ë
	mtqe
;

39 
uöt32_t
 
	m«Œoc
;

40 
uöt32_t
 
	mn‰ì
;

41 
uöt8_t
 
	mcid
;

42 
	mmem
:1;

45 
TAILQ_HEAD
(
¶abhöfo
, 
¶aböfo
);

47 
	s¶ab˛ass
 {

48 
uöt32_t
 
	mnôem
;

49 
size_t
 
	msize
;

50 
size_t
 
	m¶ack
;

51 
¶abhöfo
 
	m∑πül_msöfoq
;

54 
	#SLABCLASS_MIN_ID
 0

	)

55 
	#SLABCLASS_MAX_ID
 (
UCHAR_MAX
 - 1)

	)

56 
	#SLABCLASS_INVALID_ID
 
UCHAR_MAX


	)

57 
	#SLABCLASS_MAX_IDS
 
UCHAR_MAX


	)

59 
boﬁ
 
¶ab_vÆid_id
(
uöt8_t
 
cid
);

60 
size_t
 
¶ab_d©a_size
();

61 
¶ab_¥öt
();

62 
uöt8_t
 
¶ab_cid
(
size_t
 
size
);

64 
ôem
 *
¶ab_gë_ôem
(
uöt8_t
 
cid
);

65 
¶ab_put_ôem
(
ôem
 *
ô
);

66 
ôem
 *
¶ab_ªad_ôem
(
uöt32_t
 
sid
, uöt32_à
addr
);

68 
r°©us_t
 
¶ab_öô
();

69 
¶ab_deöô
();

	@/home/hx/fatcache/src/fc_string.c

18 
	~<°dlib.h
>

19 
	~<°rög.h
>

21 
	~<fc_c‹e.h
>

41 
	$°rög_öô
(
°rög
 *
°r
)

43 
°r
->
Àn
 = 0;

44 
°r
->
d©a
 = 
NULL
;

45 
	}
}

48 
	$°rög_deöô
(
°rög
 *
°r
)

50 
	`ASSERT
((
°r
->
Àn
 =0 && så->
d©a
 =
NULL
) ||

51 (
°r
->
Àn
 !0 && så->
d©a
 !
NULL
));

53 i‡(
°r
->
d©a
 !
NULL
) {

54 
	`fc_‰ì
(
°r
->
d©a
);

55 
	`°rög_öô
(
°r
);

57 
	}
}

59 
boﬁ


60 
	$°rög_em±y
(c⁄° 
°rög
 *
°r
)

62 
	`ASSERT
((
°r
->
Àn
 =0 && så->
d©a
 =
NULL
) ||

63 (
°r
->
Àn
 !0 && så->
d©a
 !
NULL
));

64  
°r
->
Àn
 =0 ? 
åue
 : 
Ál£
;

65 
	}
}

67 
r°©us_t


68 
	$°rög_du∂iˇã
(
°rög
 *
d°
, c⁄° °rög *
§c
)

70 
	`ASSERT
(
d°
->
Àn
 =0 && d°->
d©a
 =
NULL
);

71 
	`ASSERT
(
§c
->
Àn
 !0 && src->
d©a
 !
NULL
);

73 
d°
->
d©a
 = 
	`fc_°∫dup
(
§c
->d©a, src->
Àn
 + 1);

74 i‡(
d°
->
d©a
 =
NULL
) {

75  
FC_ENOMEM
;

78 
d°
->
Àn
 = 
§c
->len;

79 
d°
->
d©a
[d°->
Àn
] = '\0';

81  
FC_OK
;

82 
	}
}

84 
r°©us_t


85 
	$°rög_c›y
(
°rög
 *
d°
, c⁄° 
uöt8_t
 *
§c
, 
uöt32_t
 
§˛í
)

87 
	`ASSERT
(
d°
->
Àn
 =0 && d°->
d©a
 =
NULL
);

88 
	`ASSERT
(
§c
 !
NULL
 && 
§˛í
 != 0);

90 
d°
->
d©a
 = 
	`fc_°∫dup
(
§c
, 
§˛í
 + 1);

91 i‡(
d°
->
d©a
 =
NULL
) {

92  
FC_ENOMEM
;

95 
d°
->
Àn
 = 
§˛í
;

96 
d°
->
d©a
[d°->
Àn
] = '\0';

98  
FC_OK
;

99 
	}
}

102 
	$°rög_com∑ª
(c⁄° 
°rög
 *
s1
, c⁄° °rög *
s2
)

104 i‡(
s1
->
Àn
 !
s2
->len) {

105  
s1
->
Àn
 - 
s2
->len > 0 ? 1 : -1;

108  
	`fc_°∫cmp
(
s1
->
d©a
, 
s2
->d©a, s1->
Àn
);

109 
	}
}

	@/home/hx/fatcache/src/fc_string.h

18 #i‚de‡
_FC_STRING_H_


19 
	#_FC_STRING_H_


	)

21 
	~<°rög.h
>

22 
	~<fc_c‹e.h
>

24 
	s°rög
 {

25 
uöt32_t
 
	mÀn
;

26 
uöt8_t
 *
	md©a
;

29 
	#°rög
(
_°r
Ë{ (_°rË- 1, (
uöt8_t
 *)(_°rË}

	)

30 
	#nuŒ_°rög
 { 0, 
NULL
 }

	)

32 
	#°rög_£t_ãxt
(
_°r
, 
_ãxt
) do { \

33 (
_°r
)->
Àn
 = (
uöt32_t
)((
_ãxt
) - 1);\

34 (
_°r
)->
d©a
 = (
uöt8_t
 *)(
_ãxt
); \

35 } 0);

	)

37 
	#°rög_£t_øw
(
_°r
, 
_øw
) do { \

38 (
_°r
)->
Àn
 = (
uöt32_t
)(
	`fc_°æí
(
_øw
)); \

39 (
_°r
)->
d©a
 = (
uöt8_t
 *)(
_øw
); \

40 } 0);

	)

42 
°rög_öô
(
°rög
 *
°r
);

43 
°rög_deöô
(
°rög
 *
°r
);

44 
boﬁ
 
°rög_em±y
(c⁄° 
°rög
 *
°r
);

45 
r°©us_t
 
°rög_du∂iˇã
(
°rög
 *
d°
, c⁄° °rög *
§c
);

46 
r°©us_t
 
°rög_c›y
(
°rög
 *
d°
, c⁄° 
uöt8_t
 *
§c
, 
uöt32_t
 
§˛í
);

47 
°rög_com∑ª
(c⁄° 
°rög
 *
s1
, c⁄° °rög *
s2
);

53 
	#fc_mem˝y
(
_d
, 
_c
, 
_n
) \

54 
	`mem˝y
(
_d
, 
_c
, (
size_t
)(
_n
))

	)

56 
	#fc_memmove
(
_d
, 
_c
, 
_n
) \

57 
	`memmove
(
_d
, 
_c
, (
size_t
)(
_n
))

	)

59 
	#fc_memchr
(
_d
, 
_c
, 
_n
) \

60 
	`memchr
(
_d
, 
_c
, (
size_t
)(
_n
))

	)

62 
	#fc_°æí
(
_s
) \

63 
	`°æí
((*)(
_s
))

	)

65 
	#fc_°∫cmp
(
_s1
, 
_s2
, 
_n
) \

66 
	`°∫cmp
((*)(
_s1
), (*)(
_s2
), (
size_t
)(
_n
))

	)

68 
	#fc_°rchr
(
_p
, 
_l
, 
_c
) \

69 
	`_fc_°rchr
((
uöt8_t
 *)(
_p
), (uöt8_à*)(
_l
), (uöt8_t)(
_c
))

	)

71 
	#fc_°ºchr
(
_p
, 
_s
, 
_c
) \

72 
	`_fc_°ºchr
((
uöt8_t
 *)(
_p
),(uöt8_à*)(
_s
), (uöt8_t)(
_c
))

	)

74 
	#fc_°∫dup
(
_s
, 
_n
) \

75 (
uöt8_t
 *)
	`°∫dup
((*)(
_s
), (
size_t
)(
_n
));

	)

77 
	#fc_¢¥ötf
(
_s
, 
_n
, ...) \

78 
	`¢¥ötf
((*)(
_s
), (
size_t
)(
_n
), 
__VA_ARGS__
)

	)

80 
	#fc_s˙¥ötf
(
_s
, 
_n
, ...) \

81 
	`_s˙¥ötf
((*)(
_s
), (
size_t
)(
_n
), 
__VA_ARGS__
)

	)

83 
	#fc_vs˙¥ötf
(
_s
, 
_n
, 
_f
, 
_a
) \

84 
	`_vs˙¥ötf
((*)(
_s
), (
size_t
)(
_n
), 
_f
, 
_a
)

	)

86 
ölöe
 
uöt8_t
 *

87 
	$_fc_°rchr
(
uöt8_t
 *
p
, uöt8_à*
œ°
, uöt8_à
c
)

89 
p
 < 
œ°
) {

90 i‡(*
p
 =
c
) {

91  
p
;

93 
p
++;

96  
NULL
;

97 
	}
}

99 
ölöe
 
uöt8_t
 *

100 
	$_fc_°ºchr
(
uöt8_t
 *
p
, uöt8_à*
°¨t
, uöt8_à
c
)

102 
p
 >
°¨t
) {

103 i‡(*
p
 =
c
) {

104  
p
;

106 
p
--;

109  
NULL
;

110 
	}
}

	@/home/hx/fatcache/src/fc_time.c

18 
	~<fc_c‹e.h
>

20 
£âögs
 settings;

35 
	#TIME_MAXDELTA
 (
time_t
)(60 * 60 * 24 * 30)

	)

41 
time_t
 
	g¥o˚ss_°¨ãd
;

56 vﬁ©ûê
ªl_time_t
 
	gnow
;

59 
	$time_upd©e
()

61 
°©us
;

62 
timevÆ
 
timî
;

64 
°©us
 = 
	`gëtimeofday
(&
timî
, 
NULL
);

65 i‡(
°©us
 < 0) {

66 
	`log_îr‹
("gëtimeofday faûed: %s", 
	`°ªº‹
(
î∫o
));

68 
now
 = (
ªl_time_t
Ë(
timî
.
tv_£c
 - 
¥o˚ss_°¨ãd
);

70 
	`log_debug
(
LOG_PVERB
, "timêupd©edÅÿ%u", 
now
);

71 
	}
}

73 
ªl_time_t


74 
	$time_now
()

76  
now
;

77 
	}
}

79 
time_t


80 
	$time_now_abs
()

82  
¥o˚ss_°¨ãd
 + (
time_t
)
now
;

83 
	}
}

85 
time_t


86 
	$time_°¨ãd
()

88  
¥o˚ss_°¨ãd
;

89 
	}
}

95 
ªl_time_t


96 
	$time_ª…ime
(
time_t
 
ex±ime
)

98 i‡(
ex±ime
 == 0) {

102 i‡(
ex±ime
 > 
TIME_MAXDELTA
) {

111 i‡(
ex±ime
 <
¥o˚ss_°¨ãd
) {

112  (
ªl_time_t
)1;

115  (
ªl_time_t
)(
ex±ime
 - 
¥o˚ss_°¨ãd
);

117  (
ªl_time_t
)(
ex±ime
 + 
now
);

119 
	}
}

122 
	$time_lo›
(*
¨g
)

124 
ïﬁl_evít
 
evít
;

125 
ï
;

126 
n
;

128 
ï
 = 
	`ïﬁl_¸óã
(10);

129 i‡(
ï
 < 0) {

130 
	`log_îr‹
("ïﬁ»¸óã faûed: %s", 
	`°ªº‹
(
î∫o
));

131  
NULL
;

135 
n
 = 
	`ïﬁl_waô
(
ï
, &
evít
, 1, 1000);

136 i‡(
n
 < 0) {

137 i‡(
î∫o
 =
EINTR
) {

140 
	`log_îr‹
("ïﬁ»waô o¿ê%d faûed: %s", 
ï
, 
	`°ªº‹
(
î∫o
));

144 i‡(
n
 == 0) {

145 
	`time_upd©e
();

150  
NULL
;

151 
	}
}

153 
r°©us_t


154 
	$time_öô
()

156 
°©us
;

157 
±hªad_t
 
tid
;

165 
¥o˚ss_°¨ãd
 = 
	`time
(
NULL
) - 2;

167 
	`log_debug
(
LOG_DEBUG
, "¥o˚s†°¨ãdáà%"
PRId64
, (
öt64_t
)
¥o˚ss_°¨ãd
);

169 
°©us
 = 
	`±hªad_¸óã
(&
tid
, 
NULL
, 
time_lo›
, NULL);

170 i‡(
°©us
 != 0) {

171 
	`log_îr‹
("°©†aggªg©‹ cª©êÁûed: %s", 
	`°ªº‹
(
°©us
));

172  
FC_ERROR
;

175  
FC_OK
;

176 
	}
}

179 
	$time_deöô
()

181 
	}
}

	@/home/hx/fatcache/src/fc_time.h

18 #i‚de‡
_FC_TIME_H_


19 
	#_FC_TIME_H_


	)

21 
	~<time.h
>

29 
	tªl_time_t
;

31 
time_upd©e
();

32 
ªl_time_t
 
time_now
();

33 
time_t
 
time_now_abs
();

34 
time_t
 
time_°¨ãd
();

35 
ªl_time_t
 
time_ª…ime
(
time_t
 
ex±ime
);

37 
r°©us_t
 
time_öô
();

38 
time_deöô
();

	@/home/hx/fatcache/src/fc_util.c

18 
	~<°dio.h
>

19 
	~<˘y≥.h
>

20 
	~<î∫o.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

23 
	~<°d¨g.h
>

24 
	~<execöfo.h
>

26 
	~<sys/io˘l.h
>

27 
	~<löux/fs.h
>

29 
	~<fc_c‹e.h
>

32 
	$fc_£t_blockög
(
sd
)

34 
Êags
;

36 
Êags
 = 
	`f˙é
(
sd
, 
F_GETFL
, 0);

37 i‡(
Êags
 < 0) {

38  
Êags
;

41  
	`f˙é
(
sd
, 
F_SETFL
, 
Êags
 & ~
O_NONBLOCK
);

42 
	}
}

45 
	$fc_£t_n⁄blockög
(
sd
)

47 
Êags
;

49 
Êags
 = 
	`f˙é
(
sd
, 
F_GETFL
, 0);

50 i‡(
Êags
 < 0) {

51  
Êags
;

54  
	`f˙é
(
sd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
);

55 
	}
}

58 
	$fc_£t_dúe˘io
(
fd
)

60 
Êags
;

62 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0);

63 i‡(
Êags
 < 0) {

64  
Êags
;

67  
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 | 
O_DIRECT
);

68 
	}
}

71 
	$fc_£t_ªu£addr
(
sd
)

73 
ªu£
;

74 
sockÀn_t
 
Àn
;

76 
ªu£
 = 1;

77 
Àn
 = (
ªu£
);

79  
	`£tsock›t
(
sd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
ªu£
, 
Àn
);

80 
	}
}

91 
	$fc_£t_t˝nodñay
(
sd
)

93 
nodñay
;

94 
sockÀn_t
 
Àn
;

96 
nodñay
 = 1;

97 
Àn
 = (
nodñay
);

99  
	`£tsock›t
(
sd
, 
IPPROTO_TCP
, 
TCP_NODELAY
, &
nodñay
, 
Àn
);

100 
	}
}

103 
	$fc_£t_kì∑live
(
sd
)

105 
kì∑live
;

106 
sockÀn_t
 
Àn
;

108 
kì∑live
 = 1;

109 
Àn
 = (
kì∑live
);

111  
	`£tsock›t
(
sd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
, &
kì∑live
, 
Àn
);

112 
	}
}

115 
	$fc_£t_lögî
(
sd
, 
timeout
)

117 
lögî
Üinger;

118 
sockÀn_t
 
Àn
;

120 
lögî
.
l_⁄off
 = 1;

121 
lögî
.
l_lögî
 = 
timeout
;

123 
Àn
 = (
lögî
);

125  
	`£tsock›t
(
sd
, 
SOL_SOCKET
, 
SO_LINGER
, &
lögî
, 
Àn
);

126 
	}
}

129 
	$fc_un£t_lögî
(
sd
)

131 
lögî
Üinger;

132 
sockÀn_t
 
Àn
;

134 
lögî
.
l_⁄off
 = 0;

135 
lögî
.
l_lögî
 = 0;

137 
Àn
 = (
lögî
);

139  
	`£tsock›t
(
sd
, 
SOL_SOCKET
, 
SO_LINGER
, &
lögî
, 
Àn
);

140 
	}
}

143 
	$fc_£t_¢dbuf
(
sd
, 
size
)

145 
sockÀn_t
 
Àn
;

147 
Àn
 = (
size
);

149  
	`£tsock›t
(
sd
, 
SOL_SOCKET
, 
SO_SNDBUF
, &
size
, 
Àn
);

150 
	}
}

153 
	$fc_£t_rcvbuf
(
sd
, 
size
)

155 
sockÀn_t
 
Àn
;

157 
Àn
 = (
size
);

159  
	`£tsock›t
(
sd
, 
SOL_SOCKET
, 
SO_RCVBUF
, &
size
, 
Àn
);

160 
	}
}

163 
	$fc_gë_s€º‹
(
sd
)

165 
°©us
, 
îr
;

166 
sockÀn_t
 
Àn
;

168 
îr
 = 0;

169 
Àn
 = (
îr
);

171 
°©us
 = 
	`gësock›t
(
sd
, 
SOL_SOCKET
, 
SO_ERROR
, &
îr
, &
Àn
);

172 i‡(
°©us
 == 0) {

173 
î∫o
 = 
îr
;

176  
°©us
;

177 
	}
}

180 
	$fc_gë_¢dbuf
(
sd
)

182 
°©us
, 
size
;

183 
sockÀn_t
 
Àn
;

185 
size
 = 0;

186 
Àn
 = (
size
);

188 
°©us
 = 
	`gësock›t
(
sd
, 
SOL_SOCKET
, 
SO_SNDBUF
, &
size
, &
Àn
);

189 i‡(
°©us
 < 0) {

190  
°©us
;

193  
size
;

194 
	}
}

197 
	$fc_gë_rcvbuf
(
sd
)

199 
°©us
, 
size
;

200 
sockÀn_t
 
Àn
;

202 
size
 = 0;

203 
Àn
 = (
size
);

205 
°©us
 = 
	`gësock›t
(
sd
, 
SOL_SOCKET
, 
SO_RCVBUF
, &
size
, &
Àn
);

206 i‡(
°©us
 < 0) {

207  
°©us
;

210  
size
;

211 
	}
}

214 
	$fc_maximize_¢dbuf
(
sd
)

216 
°©us
, 
mö
, 
max
, 
avg
;

219 
mö
 = 
	`fc_gë_¢dbuf
(
sd
);

220 i‡(
mö
 < 0) {

225 
max
 = 256 * 
MB
;

227 
mö
 <
max
) {

228 
avg
 = (
mö
 + 
max
) / 2;

229 
°©us
 = 
	`fc_£t_¢dbuf
(
sd
, 
avg
);

230 i‡(
°©us
 != 0) {

231 
max
 = 
avg
 - 1;

233 
mö
 = 
avg
 + 1;

236 
	}
}

241 
öt64_t


242 
	$fc_u£c_now
()

244 
timevÆ
 
now
;

245 
öt64_t
 
u£c
;

246 
°©us
;

248 
°©us
 = 
	`gëtimeofday
(&
now
, 
NULL
);

249 i‡(
°©us
 < 0) {

250 
	`log_îr‹
("gëtimeofday faûed: %s", 
	`°ªº‹
(
î∫o
));

254 
u£c
 = (
öt64_t
)
now
.
tv_£c
 * 1000000LL + (öt64_tÍow.
tv_u£c
;

256  
u£c
;

257 
	}
}

259 
r°©us_t


260 
	$fc_devi˚_size
(c⁄° *
∑th
, 
size_t
 *
size
)

262 
°©us
;

263 
°©
 
°©öfo
;

264 
fd
;

266 
°©us
 = 
	`°©
(
∑th
, &
°©öfo
);

267 i‡(
°©us
 < 0) {

268 
	`log_îr‹
("°© '%s' faûed: %s", 
∑th
, 
	`°ªº‹
(
î∫o
));

269  
FC_ERROR
;

272 i‡(!
	`S_ISREG
(
°©öfo
.
°_mode
Ë&& !
	`S_ISBLK
(statinfo.st_mode)) {

273 
	`log_îr‹
("devi˚ sizênŸ suµ‹ãd o¿'%s'", 
∑th
);

274  
FC_ERROR
;

277 i‡(
	`S_ISREG
(
°©öfo
.
°_mode
)) {

278 *
size
 = (
size_t
)
°©öfo
.
°_size
;

279  
FC_OK
;

282 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
, 0644);

283 i‡(
fd
 < 0) {

284 
	`log_îr‹
("›í '%s' faûed: %s", 
∑th
, 
	`°ªº‹
(
î∫o
));

285  
FC_ERROR
;

288 
°©us
 = 
	`io˘l
(
fd
, 
BLKGETSIZE64
, 
size
);

289 i‡(
°©us
 < 0) {

290 
	`˛o£
(
fd
);

291 
	`log_îr‹
("io˘»'%s' faûed: %s", 
∑th
, 
	`°ªº‹
(
î∫o
));

292  
FC_ERROR
;

295 
	`˛o£
(
fd
);

297  
FC_OK
;

298 
	}
}

301 
	$_fc_©oi
(
uöt8_t
 *
löe
, 
size_t
 
n
)

303 
vÆue
;

305 i‡(
n
 == 0) {

309 
vÆue
 = 0; 
n
--; 
löe
++) {

310 i‡(*
löe
 < '0' || *line > '9') {

314 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

317 i‡(
vÆue
 < 0) {

321  
vÆue
;

322 
	}
}

324 
r°©us_t


325 
	$_fc_©ou32
(
uöt8_t
 *
löe
, 
size_t
 
n
, 
uöt32_t
 *
u32
)

327 
uöt32_t
 
vÆue
;

329 *
u32
 = 0UL;

331 i‡(
n
 =0UL ||Ç >
FC_UINT32_MAXLEN
) {

332  
FC_ERROR
;

335 
vÆue
 = 0; 
n
--; 
löe
++) {

336 i‡(*
löe
 < '0' || *line > '9') {

337  
FC_ERROR
;

340 
vÆue
 = vÆuê* 10UL + (
uöt32_t
)(*
löe
 - '0');

343 *
u32
 = 
vÆue
;

345  
FC_OK
;

346 
	}
}

348 
r°©us_t


349 
	$_fc_©ou64
(
uöt8_t
 *
löe
, 
size_t
 
n
, 
uöt64_t
 *
u64
)

351 
uöt64_t
 
vÆue
;

353 *
u64
 = 0ULL;

355 i‡(
n
 =0 ||Ç >
FC_UINT64_MAXLEN
) {

356  
FC_ERROR
;

359 
vÆue
 = 0ULL; 
n
--; 
löe
++) {

360 i‡(*
löe
 < '0' || *line > '9') {

361  
FC_ERROR
;

364 
vÆue
 = vÆuê* 10ULL + (
uöt64_t
)(*
löe
 - '0');

367 *
u64
 = 
vÆue
;

369  
FC_OK
;

370 
	}
}

372 
boﬁ


373 
	$fc_vÆid_p‹t
(
n
)

375 i‡(
n
 < 1 ||Ç > 
UINT16_MAX
) {

376  
Ál£
;

379  
åue
;

380 
	}
}

382 
boﬁ


383 
	$fc_°πouŒ
(c⁄° *
°r
, 
uöt64_t
 *
out
)

385 *
íd±r
;

386 
uŒ
;

388 
î∫o
 = 0;

389 *
out
 = 0ULL;

391 
uŒ
 = 
	`°πouŒ
(
°r
, &
íd±r
, 10);

393 i‡(
î∫o
 =
ERANGE
) {

394  
Ál£
;

397 i‡(
	`is•a˚
(*
íd±r
Ë|| (*íd±∏='\0' &&Énd±∏!
°r
)) {

398 i‡((Ë
uŒ
 < 0) {

404 i‡(
	`°rchr
(
°r
, '-'Ë!
NULL
) {

405  
Ál£
;

409 *
out
 = 
uŒ
;

411  
åue
;

414  
Ál£
;

415 
	}
}

417 
boﬁ


418 
	$fc_°πﬁl
(c⁄° *
°r
, 
öt64_t
 *
out
)

420 *
íd±r
;

421 
Œ
;

423 
î∫o
 = 0;

424 *
out
 = 0LL;

426 
Œ
 = 
	`°πﬁl
(
°r
, &
íd±r
, 10);

428 i‡(
î∫o
 =
ERANGE
) {

429  
Ál£
;

432 i‡(
	`is•a˚
(*
íd±r
Ë|| (*íd±∏='\0' &&Énd±∏!
°r
)) {

433 *
out
 = 
Œ
;

434  
åue
;

437  
Ál£
;

438 
	}
}

440 
boﬁ


441 
	$fc_°πoul
(c⁄° *
°r
, 
uöt32_t
 *
out
)

443 *
íd±r
;

444 
l
;

446 
î∫o
 = 0;

447 *
out
 = 0UL;

449 
l
 = 
	`°πoul
(
°r
, &
íd±r
, 10);

451 i‡(
î∫o
 =
ERANGE
) {

452  
Ál£
;

455 i‡(
	`is•a˚
(*
íd±r
Ë|| (*íd±∏='\0' &&Énd±∏!
°r
)) {

456 i‡((Ë
l
 < 0) {

462 i‡(
	`°rchr
(
°r
, '-'Ë!
NULL
) {

463  
Ál£
;

467 *
out
 = 
l
;

469  
åue
;

472  
Ál£
;

473 
	}
}

475 
boﬁ


476 
	$fc_°πﬁ
(c⁄° *
°r
, 
öt32_t
 *
out
)

478 *
íd±r
;

479 
l
;

481 *
out
 = 0L;

482 
î∫o
 = 0;

484 
l
 = 
	`°πﬁ
(
°r
, &
íd±r
, 10);

486 i‡(
î∫o
 =
ERANGE
) {

487  
Ál£
;

490 i‡(
	`is•a˚
(*
íd±r
Ë|| (*íd±∏='\0' &&Énd±∏!
°r
)) {

491 *
out
 = 
l
;

492  
åue
;

495  
Ál£
;

496 
	}
}

498 
boﬁ


499 
	$fc_°r2o˘
(c⁄° *
°r
, 
öt32_t
 *
out
)

501 *
íd±r
;

502 
l
;

504 *
out
 = 0L;

505 
î∫o
 = 0;

507 
l
 = 
	`°πﬁ
(
°r
, &
íd±r
, 8);

509 i‡(
î∫o
 =
ERANGE
) {

510  
Ál£
;

513 i‡(
	`is•a˚
(*
íd±r
Ë|| (*íd±∏='\0' &&Énd±∏!
°r
)) {

514 *
out
 = 
l
;

515  
åue
;

518  
Ál£
;

519 
	}
}

522 
	$_vs˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

524 
i
;

526 
i
 = 
	`v¢¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

538 i‡(
i
 <= 0) {

542 i‡(
i
 < 
size
) {

543  
i
;

546  
size
 - 1;

547 
	}
}

550 
	$_s˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...)

552 
va_li°
 
¨gs
;

553 
i
;

555 
	`va_°¨t
(
¨gs
, 
fmt
);

556 
i
 = 
	`_vs˙¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

557 
	`va_íd
(
¨gs
);

559  
i
;

560 
	}
}

563 
	$_fc_Æloc
(
size_t
 
size
, c⁄° *
«me
, 
löe
)

565 *
p
;

567 
	`ASSERT
(
size
 != 0);

569 
p
 = 
	`mÆloc
(
size
);

570 i‡(
p
 =
NULL
) {

571 
	`log_îr‹
("mÆloc(%zuËÁûed @ %s:%d", 
size
, 
«me
, 
löe
);

573 
	`log_debug
(
LOG_VVERB
, "mÆloc(%zuË© %∞@ %s:%d", 
size
, 
p
, 
«me
, 
löe
);

576  
p
;

577 
	}
}

580 
	$_fc_zÆloc
(
size_t
 
size
, c⁄° *
«me
, 
löe
)

582 *
p
;

584 
p
 = 
	`_fc_Æloc
(
size
, 
«me
, 
löe
);

585 i‡(
p
 !
NULL
) {

586 
	`mem£t
(
p
, 0, 
size
);

589  
p
;

590 
	}
}

593 
	$_fc_ˇŒoc
(
size_t
 
nmemb
, size_à
size
, c⁄° *
«me
, 
löe
)

595  
	`_fc_zÆloc
(
nmemb
 * 
size
, 
«me
, 
löe
);

596 
	}
}

599 
	$_fc_ªÆloc
(*
±r
, 
size_t
 
size
, c⁄° *
«me
, 
löe
)

601 *
p
;

603 
	`ASSERT
(
size
 != 0);

605 
p
 = 
	`ªÆloc
(
±r
, 
size
);

606 i‡(
p
 =
NULL
) {

607 
	`log_îr‹
("ªÆloc(%zuËÁûed @ %s:%d", 
size
, 
«me
, 
löe
);

609 
	`log_debug
(
LOG_VVERB
, "ªÆloc(%zuË© %∞@ %s:%d", 
size
, 
p
, 
«me
, 
löe
);

612  
p
;

613 
	}
}

616 
	$_fc_‰ì
(*
±r
, c⁄° *
«me
, 
löe
)

618 
	`ASSERT
(
±r
 !
NULL
);

619 
	`log_debug
(
LOG_VVERB
, "‰ì(%pË@ %s:%d", 
±r
, 
«me
, 
löe
);

620 
	`‰ì
(
±r
);

621 
	}
}

624 
	$_fc_mm≠
(
size_t
 
size
, c⁄° *
«me
, 
löe
)

626 *
p
;

628 
	`ASSERT
(
size
 != 0);

635 
p
 = 
	`mm≠
(
NULL
, 
size
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
,

637 i‡(
p
 == ((*) -1)) {

638 
	`log_îr‹
("mm≠ %zu byã†@ %s:%d faûed: %s", 
size
, 
«me
, 
löe
,

639 
	`°ªº‹
(
î∫o
));

640  
NULL
;

643  
p
;

644 
	}
}

647 
	$_fc_munm≠
(*
p
, 
size_t
 
size
, c⁄° *
«me
, 
löe
)

649 
°©us
;

651 
	`ASSERT
(
p
 !
NULL
);

652 
	`ASSERT
(
size
 != 0);

658 
°©us
 = 
	`munm≠
(
p
, 
size
);

659 i‡(
°©us
 < 0) {

660 
	`log_îr‹
("munm≠ %∞@ %s:%d faûed: %s", 
p
, 
«me
, 
löe
,

661 
	`°ªº‹
(
î∫o
));

664  
°©us
;

665 
	}
}

668 
	$fc_as£π
(c⁄° *
c⁄d
, c⁄° *
fûe
, 
löe
, 
∑nic
)

670 
	`log_îr‹
("as£π '%s' faûed @ (%s, %d)", 
c⁄d
, 
fûe
, 
löe
);

671 i‡(
∑nic
) {

672 
	`fc_°ackåa˚
(1);

673 
	`ab‹t
();

675 
	}
}

678 
	$fc_°ackåa˚
(
skù_cou¡
)

680 #ifde‡
FC_BACKTRACE


681 *
°ack
[64];

682 **
symbﬁs
;

683 
size
, 
i
, 
j
;

685 
size
 = 
	`backåa˚
(
°ack
, 64);

686 
symbﬁs
 = 
	`backåa˚_symbﬁs
(
°ack
, 
size
);

687 i‡(
symbﬁs
 =
NULL
) {

691 
skù_cou¡
++;

693 
i
 = 
skù_cou¡
, 
j
 = 0; i < 
size
; i++, j++) {

694 
	`loga
("[%d] %s", 
j
, 
symbﬁs
[
i
]);

697 
	`‰ì
(
symbﬁs
);

699 
	}
}

702 
	$fc_ªsﬁve_öë
(
°rög
 *
«me
, 
p‹t
, 
socköfo
 *
si
)

704 
°©us
;

705 
addröfo
 *
ai
, *
ˇi
;

706 
addröfo
 
höts
;

707 *
node
, 
£rvi˚
[
FC_UINTMAX_MAXLEN
];

708 
boﬁ
 
found
;

710 
	`ASSERT
(
	`fc_vÆid_p‹t
(
p‹t
));

712 
	`mem£t
(&
höts
, 0, (hints));

713 
höts
.
ai_Êags
 = 
AI_NUMERICSERV
;

714 
höts
.
ai_Ámûy
 = 
AF_UNSPEC
;

715 
höts
.
ai_sockty≥
 = 
SOCK_STREAM
;

716 
höts
.
ai_¥Ÿocﬁ
 = 0;

717 
höts
.
ai_addæí
 = 0;

718 
höts
.
ai_addr
 = 
NULL
;

719 
höts
.
ai_ˇn⁄«me
 = 
NULL
;

721 i‡(
«me
 !
NULL
) {

722 
node
 = (*)
«me
->
d©a
;

730 
node
 = 
NULL
;

731 
höts
.
ai_Êags
 |
AI_PASSIVE
;

734 
	`fc_¢¥ötf
(
£rvi˚
, 
FC_UINTMAX_MAXLEN
, "%d", 
p‹t
);

736 
°©us
 = 
	`gëaddröfo
(
node
, 
£rvi˚
, &
höts
, &
ai
);

737 i‡(
°©us
 < 0) {

738 
	`log_îr‹
("addressÑesolution ofÇode '%s' service '%s' failed: %s",

739 
node
, 
£rvi˚
, 
	`gai_°ªº‹
(
°©us
));

754 
ˇi
 = 
ai
, 
found
 = 
Ál£
; caò!
NULL
; caòˇi->
ai_√xt
) {

755 
si
->
Ámûy
 = 
ˇi
->
ai_Ámûy
;

756 
si
->
addæí
 = 
ˇi
->
ai_addæí
;

757 
	`fc_mem˝y
(&
si
->
addr
, 
ˇi
->
ai_addr
, si->
addæí
);

758 
found
 = 
åue
;

762 
	`‰ìaddröfo
(
ai
);

764  !
found
 ? -1 : 0;

765 
	}
}

768 
	$fc_ªsﬁve_unix
(
°rög
 *
«me
, 
socköfo
 *
si
)

770 
sockaddr_un
 *
un
;

772 i‡(
«me
->
Àn
 >
FC_UNIX_ADDRSTRLEN
) {

776 
un
 = &
si
->
addr
.un;

778 
un
->
sun_Ámûy
 = 
AF_UNIX
;

779 
	`fc_mem˝y
(
un
->
sun_∑th
, 
«me
->
d©a
,Çame->
Àn
);

780 
un
->
sun_∑th
[
«me
->
Àn
] = '\0';

782 
si
->
Ámûy
 = 
AF_UNIX
;

783 
si
->
addæí
 = (*
un
);

787 
	}
}

796 
	$fc_ªsﬁve
(
°rög
 *
«me
, 
p‹t
, 
socköfo
 *
si
)

798 i‡(
«me
 !
NULL
 &&Çame->
d©a
[0] == '/') {

799  
	`fc_ªsﬁve_unix
(
«me
, 
si
);

802  
	`fc_ªsﬁve_öë
(
«me
, 
p‹t
, 
si
);

803 
	}
}

	@/home/hx/fatcache/src/fc_util.h

18 #i‚de‡
_FC_UTIL_H_


19 
	#_FC_UTIL_H_


	)

21 
	~<°d¨g.h
>

23 
	#LF
 (
uöt8_t
Ë10

	)

24 
	#CR
 (
uöt8_t
Ë13

	)

25 
	#CRLF
 "\r\n"

	)

26 
	#CRLF_LEN
 (
uöt32_t
Ë((
CRLF
Ë- 1)

	)

28 
	#NELEMS
(
a
Ë((◊)Ë/ (◊)[0]))

	)

30 
	#KB
 (1024)

	)

31 
	#MB
 (1024 * 
KB
)

	)

32 
	#GB
 (1024 * 
MB
)

	)

34 
	#MIN
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

35 
	#MAX
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

37 
	#SQUARE
(
d
Ë((dË* (d))

	)

38 
	#VAR
(
s
, 
s2
, 
n
Ë((“Ë< 2Ë? 0.0 : ((s2Ë- 
	`SQUARE
(s)/“)Ë/ (“Ë- 1))

	)

39 
	#STDDEV
(
s
, 
s2
, 
n
Ë((“Ë< 2Ë? 0.0 : 
	`sqπ
(
	`VAR
((s), (s2), (n))))

	)

41 
	#FC_INET4_ADDRSTRLEN
 (("255.255.255.255"Ë- 1)

	)

42 
	#FC_INET6_ADDRSTRLEN
 \

43 (("ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255"Ë- 1)

	)

44 
	#FC_INET_ADDRSTRLEN
 
	`MAX
(
FC_INET4_ADDRSTRLEN
, 
FC_INET6_ADDRSTRLEN
)

	)

45 
	#FC_UNIX_ADDRSTRLEN
 \

46 ((
sockaddr_un
Ë- 
	`off£tof
(sockaddr_un, 
sun_∑th
))

	)

48 
	#FC_MAXHOSTNAMELEN
 256

	)

60 
	#FC_UINT8_MAXLEN
 (3 + 1)

	)

61 
	#FC_UINT16_MAXLEN
 (5 + 1)

	)

62 
	#FC_UINT32_MAXLEN
 (10 + 1)

	)

63 
	#FC_UINT64_MAXLEN
 (20 + 1)

	)

64 
	#FC_UINTMAX_MAXLEN
 
FC_UINT64_MAXLEN


	)

67 
	#TV_TO_SEC
(
_tv
Ë((_tv)->
tv_£c
 + (1e-6 * (_tv)->
tv_u£c
))

	)

73 
	#FC_ALIGNMENT
 (Ë

	)

74 
	#FC_ALIGN
(
d
, 
n
Ë((
size_t
)(((dË+ (¿- 1)Ë& ~“ - 1)))

	)

75 
	#FC_ALIGN_PTR
(
p
, 
n
) \

76 (*Ë(((
uöçå_t
Ë(
p
Ë+ ((uöçå_tË
n
 - 1)Ë& ~((uöçå_tË¿- 1))

	)

82 
	#ROUND_UP
(
x
, 
°ï
Ë(((xË+ (°ïË- 1Ë/ (°ïË* (°ï))

	)

88 
	#ROUND_DOWN
(
x
, 
°ï
Ë((xË/ (°ïË* (°ï))

	)

96 
	#fc_Æloc
(
_s
) \

97 
	`_fc_Æloc
((
size_t
)(
_s
), 
__FILE__
, 
__LINE__
)

	)

99 
	#fc_zÆloc
(
_s
) \

100 
	`_fc_zÆloc
((
size_t
)(
_s
), 
__FILE__
, 
__LINE__
)

	)

102 
	#fc_ˇŒoc
(
_n
, 
_s
) \

103 
	`_fc_ˇŒoc
((
size_t
)(
_n
), (size_t)(
_s
), 
__FILE__
, 
__LINE__
)

	)

105 
	#fc_ªÆloc
(
_p
, 
_s
) \

106 
	`_fc_ªÆloc
(
_p
, (
size_t
)(
_s
), 
__FILE__
, 
__LINE__
)

	)

108 
	#fc_‰ì
(
_p
) do { \

109 
	`_fc_‰ì
(
_p
, 
__FILE__
, 
__LINE__
); \

110 (
_p
Ë
NULL
; \

111 } 0)

	)

113 
	#fc_mm≠
(
_s
) \

114 
	`_fc_mm≠
((
size_t
)(
_s
), 
__FILE__
, 
__LINE__
)

	)

116 
	#fc_munm≠
(
_p
, 
_s
) \

117 
	`_fc_munm≠
(
_p
, (
size_t
)(
_s
), 
__FILE__
, 
__LINE__
)

	)

119 *
_fc_Æloc
(
size_t
 
size
, c⁄° *
«me
, 
löe
);

120 *
_fc_zÆloc
(
size_t
 
size
, c⁄° *
«me
, 
löe
);

121 *
_fc_ˇŒoc
(
size_t
 
nmemb
, size_à
size
, c⁄° *
«me
, 
löe
);

122 *
_fc_ªÆloc
(*
±r
, 
size_t
 
size
, c⁄° *
«me
, 
löe
);

123 
_fc_‰ì
(*
±r
, c⁄° *
«me
, 
löe
);

124 *
_fc_mm≠
(
size_t
 
size
, c⁄° *
«me
, 
löe
);

125 
_fc_munm≠
(*
p
, 
size_t
 
size
, c⁄° *
«me
, 
löe
);

131 
	#fc_gëho°«me
(
_«me
, 
_Àn
) \

132 
	`gëho°«me
((*)
_«me
, (
size_t
)
_Àn
)

	)

134 
	#fc_©oi
(
_löe
, 
_n
) \

135 
	`_fc_©oi
((
uöt8_t
 *)
_löe
, (
size_t
)
_n
)

	)

137 
	#fc_©ou32
(
_löe
, 
_n
, 
_u32
) \

138 
	`_fc_©ou32
((
uöt8_t
 *)
_löe
, (
size_t
)
_n
, 
_u32
)

	)

140 
	#fc_©ou64
(
_löe
, 
_n
, 
_u64
) \

141 
	`_fc_©ou64
((
uöt8_t
 *)
_löe
, (
size_t
)
_n
, 
_u64
)

	)

143 
_fc_©oi
(
uöt8_t
 *
löe
, 
size_t
 
n
);

144 
r°©us_t
 
_fc_©ou32
(
uöt8_t
 *
löe
, 
size_t
 
n
, 
uöt32_t
 *
u32
);

145 
r°©us_t
 
_fc_©ou64
(
uöt8_t
 *
löe
, 
size_t
 
n
, 
uöt64_t
 *
u64
);

146 
boﬁ
 
fc_vÆid_p‹t
(
n
);

148 
fc_£t_blockög
(
sd
);

149 
fc_£t_n⁄blockög
(
sd
);

150 
fc_£t_dúe˘io
(
fd
);

151 
fc_£t_ªu£addr
(
sd
);

152 
fc_£t_t˝nodñay
(
sd
);

153 
fc_£t_kì∑live
(
sd
);

154 
fc_£t_lögî
(
sd
, 
timeout
);

155 
fc_un£t_lögî
(
sd
);

156 
fc_£t_¢dbuf
(
sd
, 
size
);

157 
fc_£t_rcvbuf
(
sd
, 
size
);

158 
fc_gë_s€º‹
(
sd
);

159 
fc_gë_¢dbuf
(
sd
);

160 
fc_gë_rcvbuf
(
sd
);

161 
fc_maximize_¢dbuf
(
sd
);

162 
öt64_t
 
fc_u£c_now
();

163 
r°©us_t
 
fc_devi˚_size
(c⁄° *
∑th
, 
size_t
 *
size
);

169 
	#fc_ªad
(
_d
, 
_b
, 
_n
) \

170 
	`ªad
(
_d
, 
_b
, (
size_t
)(
_n
))

	)

172 
	#fc_ªadv
(
_d
, 
_b
, 
_n
) \

173 
	`ªadv
(
_d
, 
_b
, ()(
_n
))

	)

175 
	#fc_wrôe
(
_d
, 
_b
, 
_n
) \

176 
	`wrôe
(
_d
, 
_b
, (
size_t
)(
_n
))

	)

178 
	#fc_wrôev
(
_d
, 
_b
, 
_n
) \

179 
	`wrôev
(
_d
, 
_b
, ()(
_n
))

	)

185 
boﬁ
 
fc_°πouŒ
(c⁄° *
°r
, 
uöt64_t
 *
out
);

186 
boﬁ
 
fc_°πﬁl
(c⁄° *
°r
, 
öt64_t
 *
out
);

187 
boﬁ
 
fc_°πoul
(c⁄° *
°r
, 
uöt32_t
 *
out
);

188 
boﬁ
 
fc_°πﬁ
(c⁄° *
°r
, 
öt32_t
 *
out
);

189 
boﬁ
 
fc_°r2o˘
(c⁄° *
°r
, 
öt32_t
 *
out
);

196 #i‡
deföed
 
FC_ASSERT_PANIC
 && FC_ASSERT_PANIC == 1

198 
	#ASSERT
(
_x
) do { \

199 i‡(!(
_x
)) { \

200 
	`fc_as£π
(#_x, 
__FILE__
, 
__LINE__
, 1); \

202 } 0)

	)

204 
	#NOT_REACHED
(Ë
	`ASSERT
(0)

	)

206 #ñi‡
deföed
 
FC_ASSERT_LOG
 && FC_ASSERT_LOG == 1

208 
	#ASSERT
(
_x
) do { \

209 i‡(!(
_x
)) { \

210 
	`fc_as£π
(#_x, 
__FILE__
, 
__LINE__
, 0); \

212 } 0)

	)

214 
	#NOT_REACHED
(Ë
	`ASSERT
(0)

	)

218 
	#ASSERT
(
_x
)

	)

220 
	#NOT_REACHED
()

	)

224 
fc_°ackåa˚
(
skù_cou¡
);

225 
fc_as£π
(c⁄° *
c⁄d
, c⁄° *
fûe
, 
löe
, 
∑nic
);

227 
_s˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...);

228 
_vs˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

234 
	ssocköfo
 {

235 
	mÁmûy
;

236 
sockÀn_t
 
	maddæí
;

238 
sockaddr_ö
 
	mö
;

239 
sockaddr_ö6
 
	mö6
;

240 
sockaddr_un
 
	mun
;

241 } 
	maddr
;

244 
fc_ªsﬁve
(
°rög
 *
«me
, 
p‹t
, 
socköfo
 *
si
);

	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/execinfo.h

18 #i‚de‡
_EXECINFO_H


19 
	#_EXECINFO_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


27 
	$backåa˚
 (**
__¨øy
, 
__size
Ë
	`__n⁄nuŒ
 ((1));

32 **
	$backåa˚_symbﬁs
 (*c⁄° *
__¨øy
, 
__size
)

33 
__THROW
 
	`__n⁄nuŒ
 ((1));

38 
	$backåa˚_symbﬁs_fd
 (*c⁄° *
__¨øy
, 
__size
, 
__fd
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1));

41 
__END_DECLS


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

77 
	~<bôs/°©.h
>

79 
	#S_IFMT
 
__S_IFMT


	)

80 
	#S_IFDIR
 
__S_IFDIR


	)

81 
	#S_IFCHR
 
__S_IFCHR


	)

82 
	#S_IFBLK
 
__S_IFBLK


	)

83 
	#S_IFREG
 
__S_IFREG


	)

84 #ifde‡
__S_IFIFO


85 
	#S_IFIFO
 
__S_IFIFO


	)

87 #ifde‡
__S_IFLNK


88 
	#S_IFLNK
 
__S_IFLNK


	)

90 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


91 
	#S_IFSOCK
 
__S_IFSOCK


	)

96 
	#S_ISUID
 
__S_ISUID


	)

97 
	#S_ISGID
 
__S_ISGID


	)

99 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


101 
	#S_ISVTX
 
__S_ISVTX


	)

104 
	#S_IRUSR
 
__S_IREAD


	)

105 
	#S_IWUSR
 
__S_IWRITE


	)

106 
	#S_IXUSR
 
__S_IEXEC


	)

108 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

110 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

111 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

112 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

114 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

116 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

117 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

118 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

120 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

123 #ifdef 
__USE_MISC


124 #i‚de‡
R_OK


127 
	#R_OK
 4

	)

128 
	#W_OK
 2

	)

129 
	#X_OK
 1

	)

130 
	#F_OK
 0

	)

135 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


136 
	#SEEK_SET
 0

	)

137 
	#SEEK_CUR
 1

	)

138 
	#SEEK_END
 2

	)

146 
f˙é
 (
__fd
, 
__cmd
, ...);

155 #i‚de‡
__USE_FILE_OFFSET64


156 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

158 #ifde‡
__REDIRECT


159 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

160 
	`__n⁄nuŒ
 ((1));

162 
	#›í
 
›í64


	)

165 #ifde‡
__USE_LARGEFILE64


166 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

169 #ifde‡
__USE_ATFILE


179 #i‚de‡
__USE_FILE_OFFSET64


180 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

181 
	`__n⁄nuŒ
 ((2));

183 #ifde‡
__REDIRECT


184 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

185 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

187 
	#›í©
 
›í©64


	)

190 #ifde‡
__USE_LARGEFILE64


191 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

192 
	`__n⁄nuŒ
 ((2));

201 #i‚de‡
__USE_FILE_OFFSET64


202 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

204 #ifde‡
__REDIRECT


205 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

206 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

208 
	#¸ót
 
¸ót64


	)

211 #ifde‡
__USE_LARGEFILE64


212 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

215 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

216 && !
deföed
 
__USE_POSIX
))

225 
	#F_ULOCK
 0

	)

226 
	#F_LOCK
 1

	)

227 
	#F_TLOCK
 2

	)

228 
	#F_TEST
 3

	)

230 #i‚de‡
__USE_FILE_OFFSET64


231 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

233 #ifde‡
__REDIRECT


234 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

236 
	#lockf
 
lockf64


	)

239 #ifde‡
__USE_LARGEFILE64


240 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

244 #ifde‡
__USE_XOPEN2K


247 #i‚de‡
__USE_FILE_OFFSET64


248 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

249 
__advi£
Ë
__THROW
;

251 #ifde‡
__REDIRECT_NTH


252 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

253 
__off64_t
 
__Àn
, 
__advi£
),

254 
posix_Ádvi£64
);

256 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

259 #ifde‡
__USE_LARGEFILE64


260 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

261 
__advi£
Ë
__THROW
;

269 #i‚de‡
__USE_FILE_OFFSET64


270 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

272 #ifde‡
__REDIRECT


273 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

274 
__off64_t
 
__Àn
),

275 
posix_ÁŒoˇã64
);

277 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

280 #ifde‡
__USE_LARGEFILE64


281 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

287 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

288 && 
deföed
 
__va_¨g_∑ck_Àn


289 
	~<bôs/f˙é2.h
>

292 
__END_DECLS


	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/fs.h

1 #i‚de‡
_LINUX_FS_H


2 
	#_LINUX_FS_H


	)

9 
	~<löux/limôs.h
>

10 
	~<löux/io˘l.h
>

11 
	~<löux/ty≥s.h
>

24 #unde‡
NR_OPEN


25 
	#INR_OPEN_CUR
 1024

	)

26 
	#INR_OPEN_MAX
 4096

	)

28 
	#BLOCK_SIZE_BITS
 10

	)

29 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

31 
	#SEEK_SET
 0

	)

32 
	#SEEK_CUR
 1

	)

33 
	#SEEK_END
 2

	)

34 
	#SEEK_DATA
 3

	)

35 
	#SEEK_HOLE
 4

	)

36 
	#SEEK_MAX
 
SEEK_HOLE


	)

38 
	#RENAME_NOREPLACE
 (1 << 0Ë

	)

39 
	#RENAME_EXCHANGE
 (1 << 1Ë

	)

40 
	#RENAME_WHITEOUT
 (1 << 2Ë

	)

42 
	sf°rim_ønge
 {

43 
__u64
 
	m°¨t
;

44 
__u64
 
	mÀn
;

45 
__u64
 
	mmöÀn
;

49 
	sfûes_°©_°ru˘
 {

50 
	mƒ_fûes
;

51 
	mƒ_‰ì_fûes
;

52 
	mmax_fûes
;

55 
	söodes_°©_t
 {

56 
	mƒ_öodes
;

57 
	mƒ_unu£d
;

58 
	mdummy
[5];

62 
	#NR_FILE
 8192

	)

68 
	#MS_RDONLY
 1

	)

69 
	#MS_NOSUID
 2

	)

70 
	#MS_NODEV
 4

	)

71 
	#MS_NOEXEC
 8

	)

72 
	#MS_SYNCHRONOUS
 16

	)

73 
	#MS_REMOUNT
 32

	)

74 
	#MS_MANDLOCK
 64

	)

75 
	#MS_DIRSYNC
 128

	)

76 
	#MS_NOATIME
 1024

	)

77 
	#MS_NODIRATIME
 2048

	)

78 
	#MS_BIND
 4096

	)

79 
	#MS_MOVE
 8192

	)

80 
	#MS_REC
 16384

	)

81 
	#MS_VERBOSE
 32768

	)

83 
	#MS_SILENT
 32768

	)

84 
	#MS_POSIXACL
 (1<<16Ë

	)

85 
	#MS_UNBINDABLE
 (1<<17Ë

	)

86 
	#MS_PRIVATE
 (1<<18Ë

	)

87 
	#MS_SLAVE
 (1<<19Ë

	)

88 
	#MS_SHARED
 (1<<20Ë

	)

89 
	#MS_RELATIME
 (1<<21Ë

	)

90 
	#MS_KERNMOUNT
 (1<<22Ë

	)

91 
	#MS_I_VERSION
 (1<<23Ë

	)

92 
	#MS_STRICTATIME
 (1<<24Ë

	)

93 
	#MS_LAZYTIME
 (1<<25Ë

	)

96 
	#MS_SUBMOUNT
 (1<<26)

	)

97 
	#MS_NOSEC
 (1<<28)

	)

98 
	#MS_BORN
 (1<<29)

	)

99 
	#MS_ACTIVE
 (1<<30)

	)

100 
	#MS_NOUSER
 (1<<31)

	)

105 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
|\

106 
MS_LAZYTIME
)

	)

111 
	#MS_MGC_VAL
 0xC0ED0000

	)

112 
	#MS_MGC_MSK
 0xffff0000

	)

117 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

118 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

119 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

120 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

121 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

122 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

123 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

124 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

125 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

126 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

127 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

128 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

130 
	#BLKPG
 
	`_IO
(0x12,105)

	)

134 
	#BLKELVGET
 
	`_IOR
(0x12,106,
size_t
)

	)

135 
	#BLKELVSET
 
	`_IOW
(0x12,107,
size_t
)

	)

140 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

141 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

142 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

143 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

144 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

145 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

146 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

147 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

148 
	#BLKIOMIN
 
	`_IO
(0x12,120)

	)

149 
	#BLKIOOPT
 
	`_IO
(0x12,121)

	)

150 
	#BLKALIGNOFF
 
	`_IO
(0x12,122)

	)

151 
	#BLKPBSZGET
 
	`_IO
(0x12,123)

	)

152 
	#BLKDISCARDZEROES
 
	`_IO
(0x12,124)

	)

153 
	#BLKSECDISCARD
 
	`_IO
(0x12,125)

	)

154 
	#BLKROTATIONAL
 
	`_IO
(0x12,126)

	)

155 
	#BLKZEROOUT
 
	`_IO
(0x12,127)

	)

157 
	#BMAP_IOCTL
 1

	)

158 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

159 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

160 
	#FIFREEZE
 
	`_IOWR
('X', 119, Ë

	)

161 
	#FITHAW
 
	`_IOWR
('X', 120, Ë

	)

162 
	#FITRIM
 
	`_IOWR
('X', 121, 
f°rim_ønge
Ë

	)

164 
	#FS_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

165 
	#FS_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

166 
	#FS_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

167 
	#FS_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

168 
	#FS_IOC_FIEMAP
 
	`_IOWR
('f', 11, 
fõm≠
)

	)

169 
	#FS_IOC32_GETFLAGS
 
	`_IOR
('f', 1, )

	)

170 
	#FS_IOC32_SETFLAGS
 
	`_IOW
('f', 2, )

	)

171 
	#FS_IOC32_GETVERSION
 
	`_IOR
('v', 1, )

	)

172 
	#FS_IOC32_SETVERSION
 
	`_IOW
('v', 2, )

	)

177 
	#FS_SECRM_FL
 0x00000001

	)

178 
	#FS_UNRM_FL
 0x00000002

	)

179 
	#FS_COMPR_FL
 0x00000004

	)

180 
	#FS_SYNC_FL
 0x00000008

	)

181 
	#FS_IMMUTABLE_FL
 0x00000010

	)

182 
	#FS_APPEND_FL
 0x00000020

	)

183 
	#FS_NODUMP_FL
 0x00000040

	)

184 
	#FS_NOATIME_FL
 0x00000080

	)

186 
	#FS_DIRTY_FL
 0x00000100

	)

187 
	#FS_COMPRBLK_FL
 0x00000200

	)

188 
	#FS_NOCOMP_FL
 0x00000400

	)

189 
	#FS_ECOMPR_FL
 0x00000800

	)

191 
	#FS_BTREE_FL
 0x00001000

	)

192 
	#FS_INDEX_FL
 0x00001000

	)

193 
	#FS_IMAGIC_FL
 0x00002000

	)

194 
	#FS_JOURNAL_DATA_FL
 0x00004000

	)

195 
	#FS_NOTAIL_FL
 0x00008000

	)

196 
	#FS_DIRSYNC_FL
 0x00010000

	)

197 
	#FS_TOPDIR_FL
 0x00020000

	)

198 
	#FS_EXTENT_FL
 0x00080000

	)

199 
	#FS_DIRECTIO_FL
 0x00100000

	)

200 
	#FS_NOCOW_FL
 0x00800000

	)

201 
	#FS_PROJINHERIT_FL
 0x20000000

	)

202 
	#FS_RESERVED_FL
 0x80000000

	)

204 
	#FS_FL_USER_VISIBLE
 0x0003DFFF

	)

205 
	#FS_FL_USER_MODIFIABLE
 0x000380FF

	)

208 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

209 
	#SYNC_FILE_RANGE_WRITE
 2

	)

210 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<°döt.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	#__√ed_sigevít_t


	)

37 
	~<bôs/sigöfo.h
>

38 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 
	~<bôs/√tdb.h
>

45 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

46 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

47 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

48 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

49 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

50 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

53 
	g__BEGIN_DECLS


55 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

73 #ifde‡
__USE_MISC


74 
	#NETDB_INTERNAL
 -1

	)

75 
	#NETDB_SUCCESS
 0

	)

76 
	#NO_ADDRESS
 
NO_DATA


	)

79 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


81 
	#IPPORT_RESERVED
 1024

	)

84 #ifde‡
__USE_GNU


86 
	#SCOPE_DELIMITER
 '%'

	)

89 #ifde‡
__USE_MISC


92 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

95 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

100 
	sho°ít


102 *
h_«me
;

103 **
h_Æü£s
;

104 
h_addπy≥
;

105 
h_Àngth
;

106 **
h_addr_li°
;

107 #ifde‡
__USE_MISC


108 
	#h_addr
 
h_addr_li°
[0]

	)

117 
	`£tho°ít
 (
__°ay_›í
);

123 
	`ídho°ít
 ();

130 
ho°ít
 *
	`gëho°ít
 ();

137 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

138 
__ty≥
);

144 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

146 #ifde‡
__USE_MISC


155 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

167 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

168 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

169 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

170 *
__ª°ri˘
 
__h_î∫›
);

172 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

173 
__ty≥
,

174 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

176 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

177 *
__ª°ri˘
 
__h_î∫›
);

179 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

180 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

181 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

182 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

183 *
__ª°ri˘
 
__h_î∫›
);

185 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

186 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

187 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

188 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

189 *
__ª°ri˘
 
__h_î∫›
);

198 
	`£äëít
 (
__°ay_›í
);

204 
	`íd√ã¡
 ();

211 
√ã¡
 *
	`gë√ã¡
 ();

218 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

224 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

226 #ifdef 
__USE_MISC


237 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

238 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

239 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

240 *
__ª°ri˘
 
__h_î∫›
);

242 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

243 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

244 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

245 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

246 *
__ª°ri˘
 
__h_î∫›
);

248 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

249 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

250 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

251 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

252 *
__ª°ri˘
 
__h_î∫›
);

257 
	s£rvít


259 *
s_«me
;

260 **
s_Æü£s
;

261 
s_p‹t
;

262 *
s_¥Ÿo
;

270 
	`£t£rvít
 (
__°ay_›í
);

276 
	`íd£rvít
 ();

283 
£rvít
 *
	`gë£rvít
 ();

290 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

297 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

300 #ifdef 
__USE_MISC


308 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

309 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

310 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

312 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

313 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

318 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

319 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

320 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

321 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

326 
	s¥Ÿ€¡


328 *
p_«me
;

329 **
p_Æü£s
;

330 
p_¥Ÿo
;

338 
	`£çrŸ€¡
 (
__°ay_›í
);

344 
	`íd¥Ÿ€¡
 ();

351 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

357 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

363 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

366 #ifdef 
__USE_MISC


374 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

383 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

384 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

385 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

386 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

395 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

403 
	`íd√tgª¡
 ();

412 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

413 **
__ª°ri˘
 
__u£Ω
,

414 **
__ª°ri˘
 
__domaöp
);

423 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

424 c⁄° *
__u£r
, c⁄° *
__domaö
);

432 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

433 **
__ª°ri˘
 
__u£Ω
,

434 **
__ª°ri˘
 
__domaöp
,

435 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

439 #ifde‡
__USE_MISC


451 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

452 c⁄° *
__ª°ri˘
 
__locu£r
,

453 c⁄° *
__ª°ri˘
 
__ªmu£r
,

454 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

463 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

464 c⁄° *
__ª°ri˘
 
__locu£r
,

465 c⁄° *
__ª°ri˘
 
__ªmu£r
,

466 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

467 
ß_Ámûy_t
 
__af
);

479 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

480 c⁄° *
__ª°ri˘
 
__«me
,

481 c⁄° *
__ª°ri˘
 
__∑ss
,

482 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

491 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

492 c⁄° *
__ª°ri˘
 
__«me
,

493 c⁄° *
__ª°ri˘
 
__∑ss
,

494 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

495 
ß_Ámûy_t
 
__af
);

505 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

506 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

515 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

516 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

517 
ß_Ámûy_t
 
__af
);

528 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

529 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

539 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

540 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

541 
ß_Ámûy_t
 
__af
);

551 
	`ºesvp‹t
 (*
__Æp‹t
);

560 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

565 #ifde‡
__USE_XOPEN2K


567 
	saddröfo


569 
ai_Êags
;

570 
ai_Ámûy
;

571 
ai_sockty≥
;

572 
ai_¥Ÿocﬁ
;

573 
sockÀn_t
 
ai_addæí
;

574 
sockaddr
 *
ai_addr
;

575 *
ai_ˇn⁄«me
;

576 
addröfo
 *
ai_√xt
;

579 #ifde‡
__USE_GNU


581 
	sgaicb


583 c⁄° *
¨_«me
;

584 c⁄° *
¨_£rvi˚
;

585 c⁄° 
addröfo
 *
¨_ªque°
;

586 
addröfo
 *
¨_ªsu…
;

588 
__ªtu∫
;

589 
__glibc_ª£rved
[5];

593 
	#GAI_WAIT
 0

	)

594 
	#GAI_NOWAIT
 1

	)

598 
	#AI_PASSIVE
 0x0001

	)

599 
	#AI_CANONNAME
 0x0002

	)

600 
	#AI_NUMERICHOST
 0x0004

	)

601 
	#AI_V4MAPPED
 0x0008

	)

602 
	#AI_ALL
 0x0010

	)

603 
	#AI_ADDRCONFIG
 0x0020

	)

605 #ifde‡
__USE_GNU


606 
	#AI_IDN
 0x0040

	)

609 
	#AI_CANONIDN
 0x0080

	)

610 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

612 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

615 
	#AI_NUMERICSERV
 0x0400

	)

618 
	#EAI_BADFLAGS
 -1

	)

619 
	#EAI_NONAME
 -2

	)

620 
	#EAI_AGAIN
 -3

	)

621 
	#EAI_FAIL
 -4

	)

622 
	#EAI_FAMILY
 -6

	)

623 
	#EAI_SOCKTYPE
 -7

	)

624 
	#EAI_SERVICE
 -8

	)

625 
	#EAI_MEMORY
 -10

	)

626 
	#EAI_SYSTEM
 -11

	)

627 
	#EAI_OVERFLOW
 -12

	)

628 #ifde‡
__USE_GNU


629 
	#EAI_NODATA
 -5

	)

630 
	#EAI_ADDRFAMILY
 -9

	)

631 
	#EAI_INPROGRESS
 -100

	)

632 
	#EAI_CANCELED
 -101

	)

633 
	#EAI_NOTCANCELED
 -102

	)

634 
	#EAI_ALLDONE
 -103

	)

635 
	#EAI_INTR
 -104

	)

636 
	#EAI_IDN_ENCODE
 -105

	)

639 #ifde‡
__USE_MISC


640 
	#NI_MAXHOST
 1025

	)

641 
	#NI_MAXSERV
 32

	)

644 
	#NI_NUMERICHOST
 1

	)

645 
	#NI_NUMERICSERV
 2

	)

646 
	#NI_NOFQDN
 4

	)

647 
	#NI_NAMEREQD
 8

	)

648 
	#NI_DGRAM
 16

	)

649 #ifde‡
__USE_GNU


650 
	#NI_IDN
 32

	)

651 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

653 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

662 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

663 c⁄° *
__ª°ri˘
 
__£rvi˚
,

664 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

665 
addröfo
 **
__ª°ri˘
 
__∑i
);

668 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

671 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

677 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

678 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

679 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

680 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

683 #ifde‡
__USE_GNU


692 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

693 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

703 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

704 c⁄° 
time•ec
 *
__timeout
);

707 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

710 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

713 
__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_MPLS
 = 137,

89 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


98 #i‚de‡
__USE_KERNEL_IPV6_DEFS


101 
	mIPPROTO_HOPOPTS
 = 0,

102 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

103 
	mIPPROTO_ROUTING
 = 43,

104 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

105 
	mIPPROTO_FRAGMENT
 = 44,

106 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

107 
	mIPPROTO_ICMPV6
 = 58,

108 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

109 
	mIPPROTO_NONE
 = 59,

110 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

111 
	mIPPROTO_DSTOPTS
 = 60,

112 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

113 
	mIPPROTO_MH
 = 135

114 
	#IPPROTO_MH
 
IPPROTO_MH


	)

119 
uöt16_t
 
	tö_p‹t_t
;

124 
	mIPPORT_ECHO
 = 7,

125 
	mIPPORT_DISCARD
 = 9,

126 
	mIPPORT_SYSTAT
 = 11,

127 
	mIPPORT_DAYTIME
 = 13,

128 
	mIPPORT_NETSTAT
 = 15,

129 
	mIPPORT_FTP
 = 21,

130 
	mIPPORT_TELNET
 = 23,

131 
	mIPPORT_SMTP
 = 25,

132 
	mIPPORT_TIMESERVER
 = 37,

133 
	mIPPORT_NAMESERVER
 = 42,

134 
	mIPPORT_WHOIS
 = 43,

135 
	mIPPORT_MTP
 = 57,

137 
	mIPPORT_TFTP
 = 69,

138 
	mIPPORT_RJE
 = 77,

139 
	mIPPORT_FINGER
 = 79,

140 
	mIPPORT_TTYLINK
 = 87,

141 
	mIPPORT_SUPDUP
 = 95,

144 
	mIPPORT_EXECSERVER
 = 512,

145 
	mIPPORT_LOGINSERVER
 = 513,

146 
	mIPPORT_CMDSERVER
 = 514,

147 
	mIPPORT_EFSSERVER
 = 520,

150 
	mIPPORT_BIFFUDP
 = 512,

151 
	mIPPORT_WHOSERVER
 = 513,

152 
	mIPPORT_ROUTESERVER
 = 520,

155 
	mIPPORT_RESERVED
 = 1024,

158 
	mIPPORT_USERRESERVED
 = 5000

166 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

167 
	#IN_CLASSA_NET
 0xff000000

	)

168 
	#IN_CLASSA_NSHIFT
 24

	)

169 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

170 
	#IN_CLASSA_MAX
 128

	)

172 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

173 
	#IN_CLASSB_NET
 0xffff0000

	)

174 
	#IN_CLASSB_NSHIFT
 16

	)

175 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

176 
	#IN_CLASSB_MAX
 65536

	)

178 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

179 
	#IN_CLASSC_NET
 0xffffff00

	)

180 
	#IN_CLASSC_NSHIFT
 8

	)

181 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

183 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

184 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

186 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

187 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

190 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

192 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

194 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

197 
	#IN_LOOPBACKNET
 127

	)

199 #i‚de‡
INADDR_LOOPBACK


200 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

204 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

205 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

206 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

207 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

209 #i‚de‡
__USE_KERNEL_IPV6_DEFS


211 
	sö6_addr


215 
uöt8_t
 
	m__u6_addr8
[16];

216 #ifde‡
__USE_MISC


217 
uöt16_t
 
	m__u6_addr16
[8];

218 
uöt32_t
 
	m__u6_addr32
[4];

220 } 
	m__ö6_u
;

221 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

222 #ifde‡
__USE_MISC


223 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

224 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

229 c⁄° 
ö6_addr
 
ö6addr_™y
;

230 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

231 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

232 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

234 
	#INET_ADDRSTRLEN
 16

	)

235 
	#INET6_ADDRSTRLEN
 46

	)

239 
	ssockaddr_ö


241 
__SOCKADDR_COMMON
 (
sö_
);

242 
ö_p‹t_t
 
	msö_p‹t
;

243 
ö_addr
 
	msö_addr
;

246 
	msö_zîo
[ (
sockaddr
) -

247 
__SOCKADDR_COMMON_SIZE
 -

248  (
ö_p‹t_t
) -

249  (
ö_addr
)];

252 #i‚de‡
__USE_KERNEL_IPV6_DEFS


254 
	ssockaddr_ö6


256 
__SOCKADDR_COMMON
 (
sö6_
);

257 
ö_p‹t_t
 
	msö6_p‹t
;

258 
uöt32_t
 
	msö6_Êowöfo
;

259 
ö6_addr
 
	msö6_addr
;

260 
uöt32_t
 
	msö6_sc›e_id
;

264 #ifde‡
__USE_MISC


266 
	sù_mªq


269 
ö_addr
 
	mimr_mu…üddr
;

272 
ö_addr
 
	mimr_öãrÁ˚
;

275 
	sù_mªq_sour˚


278 
ö_addr
 
	mimr_mu…üddr
;

281 
ö_addr
 
	mimr_öãrÁ˚
;

284 
ö_addr
 
	mimr_sour˚addr
;

288 #i‚de‡
__USE_KERNEL_IPV6_DEFS


290 
	sùv6_mªq


293 
ö6_addr
 
	mùv6mr_mu…üddr
;

296 
	mùv6mr_öãrÁ˚
;

300 #ifde‡
__USE_MISC


302 
	sgroup_ªq


305 
uöt32_t
 
	mgr_öãrÁ˚
;

308 
sockaddr_°‹age
 
	mgr_group
;

311 
	sgroup_sour˚_ªq


314 
uöt32_t
 
	mg§_öãrÁ˚
;

317 
sockaddr_°‹age
 
	mg§_group
;

320 
sockaddr_°‹age
 
	mg§_sour˚
;

325 
	sù_msfûãr


328 
ö_addr
 
	mimsf_mu…üddr
;

331 
ö_addr
 
	mimsf_öãrÁ˚
;

334 
uöt32_t
 
	mimsf_fmode
;

337 
uöt32_t
 
	mimsf_num§c
;

339 
ö_addr
 
	mimsf_¶i°
[1];

342 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

343 -  (
ö_addr
) \

344 + (
num§c
Ë*  (
ö_addr
))

	)

346 
	sgroup_fûãr


349 
uöt32_t
 
	mgf_öãrÁ˚
;

352 
sockaddr_°‹age
 
	mgf_group
;

355 
uöt32_t
 
	mgf_fmode
;

358 
uöt32_t
 
	mgf_num§c
;

360 
sockaddr_°‹age
 
	mgf_¶i°
[1];

363 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

364 -  (
sockaddr_°‹age
) \

365 + ((
num§c
) \

366 *  (
sockaddr_°‹age
)))

	)

376 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

381 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

382 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

384 
	~<ídün.h
>

387 
	~<bôs/byãsw≠.h
>

389 #ifde‡
__OPTIMIZE__


393 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


396 
	#¡ohl
(
x
Ë(x)

	)

397 
	#¡ohs
(
x
Ë(x)

	)

398 
	#ht⁄l
(
x
Ë(x)

	)

399 
	#ht⁄s
(
x
Ë(x)

	)

401 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


402 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

404 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

405 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

410 #ifde‡
__GNUC__


411 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

412 (
__exãnsi⁄__
 \

413 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

414 
__a
->
s6_addr32
[0] == 0 \

415 && 
__a
->
s6_addr32
[1] == 0 \

416 && 
__a
->
s6_addr32
[2] == 0 \

417 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

419 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

420 (
__exãnsi⁄__
 \

421 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

422 
__a
->
s6_addr32
[0] == 0 \

423 && 
__a
->
s6_addr32
[1] == 0 \

424 && 
__a
->
s6_addr32
[2] == 0 \

425 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

427 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

428 (
__exãnsi⁄__
 \

429 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

430 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

432 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

433 (
__exãnsi⁄__
 \

434 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

435 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

437 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

438 (
__exãnsi⁄__
 \

439 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

440 
__a
->
s6_addr32
[0] == 0 \

441 && 
__a
->
s6_addr32
[1] == 0 \

442 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

444 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

445 (
__exãnsi⁄__
 \

446 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

447 
__a
->
s6_addr32
[0] == 0 \

448 && 
__a
->
s6_addr32
[1] == 0 \

449 && 
__a
->
s6_addr32
[2] == 0 \

450 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

452 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

453 (
__exãnsi⁄__
 \

454 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

455 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

456 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

457 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

458 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

459 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

461 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

462 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

464 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

465 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

467 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

468 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

470 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

471 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

473 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

474 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

475 =
	`ht⁄l
 (0x„800000))

	)

477 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

478 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

479 =
	`ht⁄l
 (0x„c00000))

	)

481 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

482 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

483 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

484 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

486 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

487 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

488 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

489 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

490 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

492 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

493 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

495 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

496 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

499 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

501 #ifde‡
__USE_MISC


503 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

506 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

507 
__THROW
;

511 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

512 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

513 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

515 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

516 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

517 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

519 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

520 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

521 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

523 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

524 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

525 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

527 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

528 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

529 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

532 #ifde‡
__USE_GNU


533 
cmsghdr
;

535 #i‚de‡
__USE_KERNEL_IPV6_DEFS


537 
	sö6_pktöfo


539 
ö6_addr
 
ùi6_addr
;

540 
ùi6_ifödex
;

544 
	sù6_mtuöfo


546 
sockaddr_ö6
 
ù6m_addr
;

547 
uöt32_t
 
ù6m_mtu
;

552 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

554 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

555 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

557 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

558 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

559 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

560 
__mu…x
, 
__∂usy
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

565 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

566 
uöt8_t
 **
__çåp
, 
__ty≥
)

567 
__THROW
 
__©åibuã_dïªˇãd__
;

571 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

572 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

573 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

574 **
__d©abuÂ
Ë
__THROW
;

575 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

576 
__THROW
;

577 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

578 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

579 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

583 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

584 **
__d©abuÂ
Ë
__THROW
;

585 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

586 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

590 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

591 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

592 
__£gmíts
Ë
__THROW
;

593 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

594 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

595 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

596 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

597 
__THROW
;

603 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

604 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

605 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

606 
__THROW
;

609 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

610 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

611 
uöt32_t
 
__num§c
,

612 c⁄° 
ö_addr
 *
__¶i°
)

613 
__THROW
;

617 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

618 c⁄° 
sockaddr
 *
__group
,

619 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

620 
uöt32_t
 *
__num§c
,

621 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

624 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

625 c⁄° 
sockaddr
 *
__group
,

626 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

627 
uöt32_t
 
__num§c
,

628 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

631 
__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

54 
	#TCP_COOKIE_TRANSACTIONS
 15

	)

55 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

56 
	#TCP_THIN_DUPACK
 17

	)

57 
	#TCP_USER_TIMEOUT
 18

	)

58 
	#TCP_REPAIR
 19

	)

59 
	#TCP_REPAIR_QUEUE
 20

	)

60 
	#TCP_QUEUE_SEQ
 21

	)

61 
	#TCP_REPAIR_OPTIONS
 22

	)

62 
	#TCP_FASTOPEN
 23

	)

63 
	#TCP_TIMESTAMP
 24

	)

64 
	#TCP_NOTSENT_LOWAT
 25

	)

66 
	#TCP_CC_INFO
 26

	)

68 
	#TCP_SAVE_SYN
 27

	)

70 
	#TCP_SAVED_SYN
 28

	)

73 #ifde‡
__USE_MISC


74 
	~<sys/ty≥s.h
>

75 
	~<sys/sockë.h
>

77 
u_öt32_t
 
	tt˝_£q
;

82 
	st˝hdr


84 
__exãnsi⁄__
 union

88 
u_öt16_t
 
	mth_•‹t
;

89 
u_öt16_t
 
	mth_dp‹t
;

90 
t˝_£q
 
	mth_£q
;

91 
t˝_£q
 
	mth_ack
;

92 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


93 
u_öt8_t
 
	mth_x2
:4;

94 
u_öt8_t
 
	mth_off
:4;

96 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


97 
u_öt8_t
 
	mth_off
:4;

98 
u_öt8_t
 
	mth_x2
:4;

100 
u_öt8_t
 
	mth_Êags
;

101 
	#TH_FIN
 0x01

	)

102 
	#TH_SYN
 0x02

	)

103 
	#TH_RST
 0x04

	)

104 
	#TH_PUSH
 0x08

	)

105 
	#TH_ACK
 0x10

	)

106 
	#TH_URG
 0x20

	)

107 
u_öt16_t
 
	mth_wö
;

108 
u_öt16_t
 
	mth_sum
;

109 
u_öt16_t
 
	mth_uΩ
;

113 
u_öt16_t
 
	msour˚
;

114 
u_öt16_t
 
	mde°
;

115 
u_öt32_t
 
	m£q
;

116 
u_öt32_t
 
	mack_£q
;

117 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


118 
u_öt16_t
 
	mªs1
:4;

119 
u_öt16_t
 
	mdoff
:4;

120 
u_öt16_t
 
	mfö
:1;

121 
u_öt16_t
 
	msyn
:1;

122 
u_öt16_t
 
	mr°
:1;

123 
u_öt16_t
 
	mpsh
:1;

124 
u_öt16_t
 
	mack
:1;

125 
u_öt16_t
 
	murg
:1;

126 
u_öt16_t
 
	mªs2
:2;

127 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


128 
u_öt16_t
 
	mdoff
:4;

129 
u_öt16_t
 
	mªs1
:4;

130 
u_öt16_t
 
	mªs2
:2;

131 
u_öt16_t
 
	murg
:1;

132 
u_öt16_t
 
	mack
:1;

133 
u_öt16_t
 
	mpsh
:1;

134 
u_öt16_t
 
	mr°
:1;

135 
u_öt16_t
 
	msyn
:1;

136 
u_öt16_t
 
	mfö
:1;

140 
u_öt16_t
 
	mwödow
;

141 
u_öt16_t
 
	mcheck
;

142 
u_öt16_t
 
	murg_±r
;

149 
	mTCP_ESTABLISHED
 = 1,

150 
	mTCP_SYN_SENT
,

151 
	mTCP_SYN_RECV
,

152 
	mTCP_FIN_WAIT1
,

153 
	mTCP_FIN_WAIT2
,

154 
	mTCP_TIME_WAIT
,

155 
	mTCP_CLOSE
,

156 
	mTCP_CLOSE_WAIT
,

157 
	mTCP_LAST_ACK
,

158 
	mTCP_LISTEN
,

159 
	mTCP_CLOSING


162 
	#TCPOPT_EOL
 0

	)

163 
	#TCPOPT_NOP
 1

	)

164 
	#TCPOPT_MAXSEG
 2

	)

165 
	#TCPOLEN_MAXSEG
 4

	)

166 
	#TCPOPT_WINDOW
 3

	)

167 
	#TCPOLEN_WINDOW
 3

	)

168 
	#TCPOPT_SACK_PERMITTED
 4

	)

169 
	#TCPOLEN_SACK_PERMITTED
 2

	)

170 
	#TCPOPT_SACK
 5

	)

171 
	#TCPOPT_TIMESTAMP
 8

	)

172 
	#TCPOLEN_TIMESTAMP
 10

	)

173 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

175 
	#TCPOPT_TSTAMP_HDR
 \

176 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

184 
	#TCP_MSS
 512

	)

186 
	#TCP_MAXWIN
 65535

	)

188 
	#TCP_MAX_WINSHIFT
 14

	)

190 
	#SOL_TCP
 6

	)

193 
	#TCPI_OPT_TIMESTAMPS
 1

	)

194 
	#TCPI_OPT_SACK
 2

	)

195 
	#TCPI_OPT_WSCALE
 4

	)

196 
	#TCPI_OPT_ECN
 8

	)

197 
	#TCPI_OPT_ECN_SEEN
 16

	)

198 
	#TCPI_OPT_SYN_DATA
 32

	)

201 
	et˝_ˇ_°©e


203 
	mTCP_CA_O≥n
 = 0,

204 
	mTCP_CA_Dis‹dî
 = 1,

205 
	mTCP_CA_CWR
 = 2,

206 
	mTCP_CA_Recovîy
 = 3,

207 
	mTCP_CA_Loss
 = 4

210 
	st˝_öfo


212 
u_öt8_t
 
	mt˝i_°©e
;

213 
u_öt8_t
 
	mt˝i_ˇ_°©e
;

214 
u_öt8_t
 
	mt˝i_ªå™smôs
;

215 
u_öt8_t
 
	mt˝i_¥obes
;

216 
u_öt8_t
 
	mt˝i_backoff
;

217 
u_öt8_t
 
	mt˝i_›ti⁄s
;

218 
u_öt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

220 
u_öt32_t
 
	mt˝i_πo
;

221 
u_öt32_t
 
	mt˝i_©o
;

222 
u_öt32_t
 
	mt˝i_¢d_mss
;

223 
u_öt32_t
 
	mt˝i_rcv_mss
;

225 
u_öt32_t
 
	mt˝i_u«cked
;

226 
u_öt32_t
 
	mt˝i_ßcked
;

227 
u_öt32_t
 
	mt˝i_lo°
;

228 
u_öt32_t
 
	mt˝i_ªå™s
;

229 
u_öt32_t
 
	mt˝i_Áckës
;

232 
u_öt32_t
 
	mt˝i_œ°_d©a_£¡
;

233 
u_öt32_t
 
	mt˝i_œ°_ack_£¡
;

234 
u_öt32_t
 
	mt˝i_œ°_d©a_ªcv
;

235 
u_öt32_t
 
	mt˝i_œ°_ack_ªcv
;

238 
u_öt32_t
 
	mt˝i_pmtu
;

239 
u_öt32_t
 
	mt˝i_rcv_s°hªsh
;

240 
u_öt32_t
 
	mt˝i_πt
;

241 
u_öt32_t
 
	mt˝i_πtv¨
;

242 
u_öt32_t
 
	mt˝i_¢d_s°hªsh
;

243 
u_öt32_t
 
	mt˝i_¢d_cwnd
;

244 
u_öt32_t
 
	mt˝i_advmss
;

245 
u_öt32_t
 
	mt˝i_ª‹dîög
;

247 
u_öt32_t
 
	mt˝i_rcv_πt
;

248 
u_öt32_t
 
	mt˝i_rcv_•a˚
;

250 
u_öt32_t
 
	mt˝i_tŸÆ_ªå™s
;

255 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

257 
	st˝_md5sig


259 
sockaddr_°‹age
 
	mt˝m_addr
;

260 
u_öt16_t
 
	m__t˝m_∑d1
;

261 
u_öt16_t
 
	mt˝m_keyÀn
;

262 
u_öt32_t
 
	m__t˝m_∑d2
;

263 
u_öt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

267 
	st˝_ª∑ú_›t


269 
u_öt32_t
 
	m›t_code
;

270 
u_öt32_t
 
	m›t_vÆ
;

276 
	mTCP_NO_QUEUE
,

277 
	mTCP_RECV_QUEUE
,

278 
	mTCP_SEND_QUEUE
,

279 
	mTCP_QUEUES_NR
,

283 
	#TCP_COOKIE_MIN
 8

	)

284 
	#TCP_COOKIE_MAX
 16

	)

285 
	#TCP_COOKIE_PAIR_SIZE
 (2*
TCP_COOKIE_MAX
)

	)

288 
	#TCP_COOKIE_IN_ALWAYS
 (1 << 0Ë

	)

289 
	#TCP_COOKIE_OUT_NEVER
 (1 << 1Ë

	)

293 
	#TCP_S_DATA_IN
 (1 << 2Ë

	)

294 
	#TCP_S_DATA_OUT
 (1 << 3Ë

	)

296 
	#TCP_MSS_DEFAULT
 536U

	)

297 
	#TCP_MSS_DESIRED
 1220U

	)

299 
	st˝_cookõ_å™ß˘i⁄s


301 
u_öt16_t
 
	mt˝˘_Êags
;

302 
u_öt8_t
 
	m__t˝˘_∑d1
;

303 
u_öt8_t
 
	mt˝˘_cookõ_desúed
;

304 
u_öt16_t
 
	mt˝˘_s_d©a_desúed
;

305 
u_öt16_t
 
	mt˝˘_u£d
;

306 
u_öt8_t
 
	mt˝˘_vÆue
[
TCP_MSS_DEFAULT
];

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


85 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


86 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

88 #ifde‡
__USE_GNU


89 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

91 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

93 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

98 
	#PTHREAD_MUTEX_INITIALIZER
 \

99 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

100 #ifde‡
__USE_GNU


101 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

102 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

103 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

105 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

113 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


116 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

117 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

119 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


125 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


126 #i‡
__WORDSIZE
 == 64

127 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

132 
	#PTHREAD_RWLOCK_INITIALIZER
 \

133 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

134 #ifde‡
__USE_GNU


135 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


136 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

137 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, \

138 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

140 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


141 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

142 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

143 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

145 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

146 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

147 0 } }

	)

157 
	mPTHREAD_INHERIT_SCHED
,

158 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

159 
	mPTHREAD_EXPLICIT_SCHED


160 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

167 
	mPTHREAD_SCOPE_SYSTEM
,

168 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

169 
	mPTHREAD_SCOPE_PROCESS


170 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

177 
	mPTHREAD_PROCESS_PRIVATE
,

178 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

179 
	mPTHREAD_PROCESS_SHARED


180 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

186 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

190 
	s_±hªad_˛ónup_buf„r


192 (*
	m__routöe
) (*);

193 *
	m__¨g
;

194 
	m__ˇn˚…y≥
;

195 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

201 
	mPTHREAD_CANCEL_ENABLE
,

202 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

203 
	mPTHREAD_CANCEL_DISABLE


204 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

208 
	mPTHREAD_CANCEL_DEFERRED
,

209 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

210 
	mPTHREAD_CANCEL_ASYNCHRONOUS


211 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

213 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

217 
	#PTHREAD_ONCE_INIT
 0

	)

220 #ifde‡
__USE_XOPEN2K


224 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

228 
__BEGIN_DECLS


233 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

234 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

235 *(*
__°¨t_routöe
) (*),

236 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

242 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

250 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

252 #ifde‡
__USE_GNU


255 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

263 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

264 c⁄° 
time•ec
 *
__ab°ime
);

271 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

275 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

278 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

279 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

287 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

294 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

295 *
__dëach°©e
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

299 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

300 
__dëach°©e
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 
size_t
 *
__gu¨dsize
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

311 
size_t
 
__gu¨dsize
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

317 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

322 c⁄° 
sched_∑øm
 *
__ª°ri˘


323 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

326 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


327 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

331 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

332 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


336 
__©å
, *
__ª°ri˘
 
__öhîô
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

340 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

341 
__öhîô
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

347 *
__ª°ri˘
 
__sc›e
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


356 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

363 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

364 *
__°ackaddr
)

365 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

368 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


369 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

370 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

375 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

376 
size_t
 
__°acksize
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1));

379 #ifde‡
__USE_XOPEN2K


381 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

382 **
__ª°ri˘
 
__°ackaddr
,

383 
size_t
 *
__ª°ri˘
 
__°acksize
)

384 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

389 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

390 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 #ifde‡
__USE_GNU


396 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

397 
size_t
 
__˝u£tsize
,

398 c⁄° 
˝u_£t_t
 *
__˝u£t
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

403 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

404 
size_t
 
__˝u£tsize
,

405 
˝u_£t_t
 *
__˝u£t
)

406 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

409 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1));

414 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

415 
__THROW
 
	`__n⁄nuŒ
 ((1));

420 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

430 c⁄° 
sched_∑øm
 *
__∑øm
)

431 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

435 *
__ª°ri˘
 
__pﬁicy
,

436 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

437 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

441 
__THROW
;

444 #ifde‡
__USE_GNU


446 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

447 
size_t
 
__buÊí
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

452 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 #ifde‡
__USE_UNIX98


458 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

461 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

464 #ifde‡
__USE_GNU


469 
	$±hªad_yõld
 (Ë
__THROW
;

474 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

475 c⁄° 
˝u_£t_t
 *
__˝u£t
)

476 
__THROW
 
	`__n⁄nuŒ
 ((3));

479 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

480 
˝u_£t_t
 *
__˝u£t
)

481 
__THROW
 
	`__n⁄nuŒ
 ((3));

494 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

495 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

506 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

510 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

513 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

518 
	`±hªad_ã°ˇn˚l
 ();

527 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

528 
__mask_was_ßved
;

529 } 
__ˇn˚l_jmp_buf
[1];

530 *
__∑d
[4];

531 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

534 #i‚de‡
__˛ónup_f˘_©åibuã


535 
	#__˛ónup_f˘_©åibuã


	)

540 
	s__±hªad_˛ónup_‰ame


542 (*
__ˇn˚l_routöe
) (*);

543 *
__ˇn˚l_¨g
;

544 
__do_ô
;

545 
__ˇn˚l_ty≥
;

548 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


549 #ifde‡
__˝lu•lus


551 ˛as†
	c__±hªad_˛ónup_˛ass


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

558 
public
:

559 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

560 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

561 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

562 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

563 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

564 &
__ˇn˚l_ty≥
); 
	}
}

565 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

575 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

577 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

581 
	#±hªad_˛ónup_p›
(
execuã
) \

582 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

583 } 0)

	)

585 #ifde‡
__USE_GNU


589 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

591 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

592 
__˛‰ame
.
	`__de„r
 ()

	)

597 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

598 
__˛‰ame
.
	`__ª°‹e
 (); \

599 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

600 } 0)

	)

607 
__exã∫_ölöe
 

608 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

610 i‡(
__‰ame
->
__do_ô
)

611 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

612 
	}
}

621 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

623 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

624 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

625 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

626 .
__do_ô
 = 1 };

	)

630 
	#±hªad_˛ónup_p›
(
execuã
) \

631 
__˛‰ame
.
__do_ô
 = (
execuã
); \

632 } 0)

	)

634 #ifde‡
__USE_GNU


638 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

640 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

641 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

642 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

643 .
__do_ô
 = 1 }; \

644 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

645 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

650 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

651 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

652 
__˛‰ame
.
__do_ô
 = (
execuã
); \

653 } 0)

	)

664 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

666 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

667 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

668 *
__ˇn˚l_¨g
 = (
¨g
); \

669 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

670 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

671 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

673 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

674 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

678 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

679 dÿ{

	)

680 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

681 
__˛ónup_f˘_©åibuã
;

685 
	#±hªad_˛ónup_p›
(
execuã
) \

688 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

689 i‡(
execuã
) \

690 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

691 } 0)

	)

692 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

693 
__˛ónup_f˘_©åibuã
;

695 #ifde‡
__USE_GNU


699 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

701 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

702 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

703 *
__ˇn˚l_¨g
 = (
¨g
); \

704 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

705 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

706 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

708 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

709 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

713 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

714 dÿ{

	)

715 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

716 
__˛ónup_f˘_©åibuã
;

721 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

724 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

725 i‡(
execuã
) \

726 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

727 
	}
} 0)

	)

728 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

729 
__˛ónup_f˘_©åibuã
;

733 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

734 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

735 #i‚de‡
SHARED


736 
	`__©åibuã__
 ((
__wók__
))

742 
__jmp_buf_èg
;

743 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

749 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

750 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

751 
__THROW
 
	`__n⁄nuŒ
 ((1));

754 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

755 
__THROW
 
	`__n⁄nuŒ
 ((1));

758 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

759 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

763 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

765 #ifde‡
__USE_XOPEN2K


767 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

768 c⁄° 
time•ec
 *
__ª°ri˘


769 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

773 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

778 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

779 
__ª°ri˘
 
__muãx
,

780 *
__ª°ri˘
 
__¥io˚ûög
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

785 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

786 
__¥io˚ûög
,

787 *
__ª°ri˘
 
__ﬁd_˚ûög
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

791 #ifde‡
__USE_XOPEN2K8


793 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1));

795 #ifde‡
__USE_GNU


796 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

797 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1));

810 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1));

814 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

815 
__ª°ri˘
 
__©å
,

816 *
__ª°ri˘
 
__psh¨ed
)

817 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

820 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

821 
__psh¨ed
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

824 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


826 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


827 
__©å
, *
__ª°ri˘
 
__köd
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

833 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1));

838 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

839 
__ª°ri˘
 
__©å
,

840 *
__ª°ri˘
 
__¥Ÿocﬁ
)

841 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

845 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

846 
__¥Ÿocﬁ
)

847 
__THROW
 
	`__n⁄nuŒ
 ((1));

850 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

851 
__ª°ri˘
 
__©å
,

852 *
__ª°ri˘
 
__¥io˚ûög
)

853 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥io˚ûög
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

860 #ifde‡
__USE_XOPEN2K


862 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

863 *
__robu°√ss
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

865 #ifde‡
__USE_GNU


866 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

867 *
__robu°√ss
)

868 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

872 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

873 
__robu°√ss
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

875 #ifde‡
__USE_GNU


876 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

877 
__robu°√ss
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


888 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

889 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


890 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

893 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

894 
__THROW
 
	`__n⁄nuŒ
 ((1));

897 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

898 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

901 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

902 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

904 #ifde‡
__USE_XOPEN2K


906 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

907 c⁄° 
time•ec
 *
__ª°ri˘


908 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

912 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

916 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

917 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

919 #ifde‡
__USE_XOPEN2K


921 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

922 c⁄° 
time•ec
 *
__ª°ri˘


923 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

927 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

934 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

935 
__THROW
 
	`__n⁄nuŒ
 ((1));

938 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

939 
__THROW
 
	`__n⁄nuŒ
 ((1));

942 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

943 
__ª°ri˘
 
__©å
,

944 *
__ª°ri˘
 
__psh¨ed
)

945 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

948 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

949 
__psh¨ed
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__¥ef
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

968 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

969 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

970 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

974 
__THROW
 
	`__n⁄nuŒ
 ((1));

977 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

978 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

981 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

982 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

989 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

990 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

991 
	`__n⁄nuŒ
 ((1, 2));

1000 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1002 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1003 
	`__n⁄nuŒ
 ((1, 2, 3));

1008 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1));

1012 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1013 
__THROW
 
	`__n⁄nuŒ
 ((1));

1016 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1017 
__ª°ri˘
 
__©å
,

1018 *
__ª°ri˘
 
__psh¨ed
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1022 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1023 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1025 #ifde‡
__USE_XOPEN2K


1027 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__˛ockid_t
 
__˛ock_id
)

1035 
__THROW
 
	`__n⁄nuŒ
 ((1));

1039 #ifde‡
__USE_XOPEN2K


1044 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1048 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1049 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1053 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1056 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1057 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1060 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1061 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1068 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1069 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1070 
__©å
, 
__cou¡
)

1071 
__THROW
 
	`__n⁄nuŒ
 ((1));

1074 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1078 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1079 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1083 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1084 
__THROW
 
	`__n⁄nuŒ
 ((1));

1087 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1088 
__THROW
 
	`__n⁄nuŒ
 ((1));

1091 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1092 
__ª°ri˘
 
__©å
,

1093 *
__ª°ri˘
 
__psh¨ed
)

1094 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1097 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1098 
__psh¨ed
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1111 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1112 (*
__de°r_fun˘i⁄
) (*))

1113 
__THROW
 
	`__n⁄nuŒ
 ((1));

1116 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1119 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1122 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1123 c⁄° *
__poöãr
Ë
__THROW
 ;

1126 #ifde‡
__USE_XOPEN2K


1128 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1129 
__˛ockid_t
 *
__˛ock_id
)

1130 
__THROW
 
	`__n⁄nuŒ
 ((2));

1145 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1146 (*
__∑ª¡
) (),

1147 (*
__chûd
Ë()Ë
__THROW
;

1150 #ifde‡
__USE_EXTERN_INLINES


1152 
__exã∫_ölöe
 

1153 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1155  
__thªad1
 =
__thªad2
;

1156 
	}
}

1159 
	g__END_DECLS


	@/usr/include/pwd.h

22 #i‚def 
_PWD_H


23 
	#_PWD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

34 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


37 #i‚de‡
__gid_t_deföed


38 
__gid_t
 
	tgid_t
;

39 
	#__gid_t_deföed


	)

42 #i‚de‡
__uid_t_deföed


43 
__uid_t
 
	tuid_t
;

44 
	#__uid_t_deföed


	)

49 
	s∑sswd


51 *
	mpw_«me
;

52 *
	mpw_∑sswd
;

53 
__uid_t
 
	mpw_uid
;

54 
__gid_t
 
	mpw_gid
;

55 *
	mpw_gecos
;

56 *
	mpw_dú
;

57 *
	mpw_shñl
;

61 #ifde‡
__USE_MISC


62 
	#__√ed_FILE


	)

63 
	~<°dio.h
>

67 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


72 
£çwít
 ();

78 
ídpwít
 ();

84 
∑sswd
 *
gëpwít
 ();

87 #ifdef 
__USE_MISC


94 
∑sswd
 *
	$fgëpwít
 (
FILE
 *
__°ªam
Ë
	`__n⁄nuŒ
 ((1));

102 
	`puçwít
 (c⁄° 
∑sswd
 *
__ª°ri˘
 
__p
,

103 
FILE
 *
__ª°ri˘
 
__f
);

110 
∑sswd
 *
	`gëpwuid
 (
__uid_t
 
__uid
);

116 
∑sswd
 *
	$gëpw«m
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

118 #ifde‡
__USE_POSIX


120 #ifde‡
__USE_MISC


123 
	#NSS_BUFLEN_PASSWD
 1024

	)

134 #ifde‡
__USE_MISC


139 
	$gëpwít_r
 (
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

140 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

141 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

142 
	`__n⁄nuŒ
 ((1, 2, 4));

145 
	$gëpwuid_r
 (
__uid_t
 
__uid
,

146 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

147 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

148 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

149 
	`__n⁄nuŒ
 ((2, 3, 5));

151 
	$gëpw«m_r
 (c⁄° *
__ª°ri˘
 
__«me
,

152 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

153 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

154 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

155 
	`__n⁄nuŒ
 ((1, 2, 3, 5));

158 #ifdef 
__USE_MISC


166 
	$fgëpwít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

167 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

168 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

169 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

170 
	`__n⁄nuŒ
 ((1, 2, 3, 5));

175 #ifde‡
__USE_GNU


184 
	`gëpw
 (
__uid_t
 
__uid
, *
__buf„r
);

187 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_MISC


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_MISC


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #ifde‡
__USE_XOPEN2K8


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

166 #ifde‡
__USE_XOPEN


167 #ifde‡
__GNUC__


168 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

170 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

172 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

177 #ifde‡
__USE_MISC


184 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

187 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

190 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

193 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

197 #ifde‡
__USE_MISC


198 
	#NSIG
 
_NSIG


	)

201 #ifde‡
__USE_GNU


202 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

206 #ifde‡
__USE_MISC


207 
__sigh™dÀr_t
 
	tsig_t
;

210 #ifde‡
__USE_POSIX


213 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

226 
__THROW
 
	`__n⁄nuŒ
 ((1));

228 #ifde‡
__USE_GNU


230 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

233 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

234 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

237 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

238 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

243 
	~<bôs/siga˘i⁄.h
>

246 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

247 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

254 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

257 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

258 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

261 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

268 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 #ifde‡
__USE_POSIX199309


276 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

277 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

284 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

285 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

286 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

287 
	`__n⁄nuŒ
 ((1));

291 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

292 
__THROW
;

297 #ifde‡
__USE_MISC


301 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

302 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

306 
	~<bôs/sigc⁄ãxt.h
>

309 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

314 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


315 
	#__√ed_size_t


	)

316 
	~<°ddef.h
>

321 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

323 
	~<bôs/sig°ack.h
>

324 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


326 
	~<sys/uc⁄ãxt.h
>

332 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

333 
__THROW
 
__©åibuã_dïªˇãd__
;

337 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

338 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

342 #ifde‡
__USE_XOPEN_EXTENDED


346 
	$sighﬁd
 (
__sig
Ë
__THROW
;

349 
	$sigªl£
 (
__sig
Ë
__THROW
;

352 
	$sigign‹e
 (
__sig
Ë
__THROW
;

355 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

358 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


361 
	~<bôs/±hªadty≥s.h
>

362 
	~<bôs/sigthªad.h
>

369 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

371 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

375 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_MISC


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #ifde‡
__USE_POSIX


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #ifde‡
__USE_POSIX


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #ifde‡
__USE_POSIX2


872 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

878 
	`p˛o£
 (
FILE
 *
__°ªam
);

882 #ifdef 
__USE_POSIX


884 *
	$˘îmid
 (*
__s
Ë
__THROW
;

888 #ifde‡
__USE_XOPEN


890 *
	`cu£rid
 (*
__s
);

894 #ifdef 
__USE_GNU


895 
ob°ack
;

898 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

899 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

900 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

901 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
,

903 
_G_va_li°
 
__¨gs
)

904 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

908 #ifde‡
__USE_POSIX


912 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

919 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

922 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


926 
	#__√ed_gë›t


	)

927 
	~<gë›t.h
>

932 #ifde‡
__USE_EXTERN_INLINES


933 
	~<bôs/°dio.h
>

935 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


936 
	~<bôs/°dio2.h
>

938 #ifde‡
__LDBL_COMPAT


939 
	~<bôs/°dio-ldbl.h
>

942 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	$©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

640 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

641 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


643 #unde‡
memp˝y


644 #unde‡
__memp˝y


645 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

646 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

648 
__exã∫_Æways_ölöe
 *

649 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

650 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

652  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

653 
	}
}

658 
	g__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #i‡
deföed
 
__USE_MISC
 \

785 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

788 
	$ây¶Ÿ
 (Ë
__THROW
;

793 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

796 #ifde‡
__USE_ATFILE


799 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

800 c⁄° *
__to
, 
__Êags
)

801 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

804 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


806 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

813 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

817 #ifde‡
__USE_ATFILE


819 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

820 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

823 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

824 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

825 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

829 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

831 #ifde‡
__USE_ATFILE


833 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

834 
__THROW
 
	`__n⁄nuŒ
 ((2));

838 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

842 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

845 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

852 *
	`gëlogö
 ();

853 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


860 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

863 #ifdef 
__USE_MISC


865 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 #ifdef 
__USE_POSIX2


873 
	#__√ed_gë›t


	)

874 
	~<gë›t.h
>

878 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


882 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #i‡
deföed
 
__USE_MISC


889 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

890 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

894 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

900 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

902 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

909 
	$vh™gup
 (Ë
__THROW
;

912 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

920 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

921 
size_t
 
__off£t
, 
__sˇÀ
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1));

928 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

932 *
	$gëu£rshñl
 (Ë
__THROW
;

933 
	$ídu£rshñl
 (Ë
__THROW
;

934 
	$£tu£rshñl
 (Ë
__THROW
;

940 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

944 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

947 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

951 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

959 
	`fsync
 (
__fd
);

962 #ifde‡
__USE_GNU


965 
	$syncfs
 (
__fd
Ë
__THROW
;

969 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


972 
	`gëho°id
 ();

975 
	$sync
 (Ë
__THROW
;

978 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


981 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

986 
	$gëdèbÀsize
 (Ë
__THROW
;

992 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


995 #i‚de‡
__USE_FILE_OFFSET64


996 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 #ifde‡
__REDIRECT_NTH


1000 
	`__REDIRECT_NTH
 (
åunˇã
,

1001 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1002 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1004 
	#åunˇã
 
åunˇã64


	)

1007 #ifde‡
__USE_LARGEFILE64


1008 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1014 #i‡
deföed
 
__USE_POSIX199309
 \

1015 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1018 #i‚de‡
__USE_FILE_OFFSET64


1019 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1023 
·runˇã64
Ë
__wur
;

1025 
	#·runˇã
 
·runˇã64


	)

1028 #ifde‡
__USE_LARGEFILE64


1029 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1035 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1036 || 
deföed
 
__USE_MISC


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1129 
__THROW
 
	`__n⁄nuŒ
 ((1));

1136 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1137 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1150 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1151 
	~<bôs/uni°d.h
>

1154 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


152 #unde‡
_DEFAULT_SOURCE


153 
	#_DEFAULT_SOURCE
 1

	)

157 #ifde‡
_GNU_SOURCE


158 #unde‡
_ISOC95_SOURCE


159 
	#_ISOC95_SOURCE
 1

	)

160 #unde‡
_ISOC99_SOURCE


161 
	#_ISOC99_SOURCE
 1

	)

162 #unde‡
_ISOC11_SOURCE


163 
	#_ISOC11_SOURCE
 1

	)

164 #unde‡
_POSIX_SOURCE


165 
	#_POSIX_SOURCE
 1

	)

166 #unde‡
_POSIX_C_SOURCE


167 
	#_POSIX_C_SOURCE
 200809L

	)

168 #unde‡
_XOPEN_SOURCE


169 
	#_XOPEN_SOURCE
 700

	)

170 #unde‡
_XOPEN_SOURCE_EXTENDED


171 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

172 #unde‡
_LARGEFILE64_SOURCE


173 
	#_LARGEFILE64_SOURCE
 1

	)

174 #unde‡
_DEFAULT_SOURCE


175 
	#_DEFAULT_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

183 || (!
deföed
 
	g__STRICT_ANSI__
 \

184 && !
deföed
 
	g_ISOC99_SOURCE
 \

185 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

186 && !
deföed
 
	g_XOPEN_SOURCE
))

187 #unde‡
_DEFAULT_SOURCE


188 
	#_DEFAULT_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC11_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

194 
	#__USE_ISOC11
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

200 
	#__USE_ISOC99
 1

	)

204 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

205 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

206 
	#__USE_ISOC95
 1

	)

213 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

214 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

215 
	#__USE_ISOCXX11
 1

	)

221 #ifde‡
_DEFAULT_SOURCE


222 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


223 
	#__USE_POSIX_IMPLICITLY
 1

	)

225 #unde‡
_POSIX_SOURCE


226 
	#_POSIX_SOURCE
 1

	)

227 #unde‡
_POSIX_C_SOURCE


228 
	#_POSIX_C_SOURCE
 200809L

	)

230 #i‡((!
deföed
 
__STRICT_ANSI__
 \

231 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

232 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

233 
	#_POSIX_SOURCE
 1

	)

234 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

235 
	#_POSIX_C_SOURCE
 2

	)

236 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

237 
	#_POSIX_C_SOURCE
 199506L

	)

238 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

239 
	#_POSIX_C_SOURCE
 200112L

	)

241 
	#_POSIX_C_SOURCE
 200809L

	)

243 
	#__USE_POSIX_IMPLICITLY
 1

	)

246 #i‡(
deföed
 
_POSIX_SOURCE
 \

247 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

248 || 
deföed
 
_XOPEN_SOURCE
)

249 
	#__USE_POSIX
 1

	)

252 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


253 
	#__USE_POSIX2
 1

	)

256 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

257 
	#__USE_POSIX199309
 1

	)

260 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

261 
	#__USE_POSIX199506
 1

	)

264 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

265 
	#__USE_XOPEN2K
 1

	)

266 #unde‡
__USE_ISOC95


267 
	#__USE_ISOC95
 1

	)

268 #unde‡
__USE_ISOC99


269 
	#__USE_ISOC99
 1

	)

272 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

273 
	#__USE_XOPEN2K8
 1

	)

274 #unde‡
_ATFILE_SOURCE


275 
	#_ATFILE_SOURCE
 1

	)

278 #ifdef 
_XOPEN_SOURCE


279 
	#__USE_XOPEN
 1

	)

280 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

281 
	#__USE_XOPEN_EXTENDED
 1

	)

282 
	#__USE_UNIX98
 1

	)

283 #unde‡
_LARGEFILE_SOURCE


284 
	#_LARGEFILE_SOURCE
 1

	)

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

286 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

287 
	#__USE_XOPEN2K8
 1

	)

288 
	#__USE_XOPEN2K8XSI
 1

	)

290 
	#__USE_XOPEN2K
 1

	)

291 
	#__USE_XOPEN2KXSI
 1

	)

292 #unde‡
__USE_ISOC95


293 
	#__USE_ISOC95
 1

	)

294 #unde‡
__USE_ISOC99


295 
	#__USE_ISOC99
 1

	)

298 #ifde‡
_XOPEN_SOURCE_EXTENDED


299 
	#__USE_XOPEN_EXTENDED
 1

	)

304 #ifde‡
_LARGEFILE_SOURCE


305 
	#__USE_LARGEFILE
 1

	)

308 #ifde‡
_LARGEFILE64_SOURCE


309 
	#__USE_LARGEFILE64
 1

	)

312 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

313 
	#__USE_FILE_OFFSET64
 1

	)

316 #i‡
deföed
 
_DEFAULT_SOURCE


317 
	#__USE_MISC
 1

	)

320 #ifdef 
_ATFILE_SOURCE


321 
	#__USE_ATFILE
 1

	)

324 #ifdef 
_GNU_SOURCE


325 
	#__USE_GNU
 1

	)

328 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


329 
	#__USE_REENTRANT
 1

	)

332 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

333 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

334 #i‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 23

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‚de‡
__ASSEMBLER__


366 #i‚de‡
_SYS_CDEFS_H


367 
	~<sys/cdefs.h
>

372 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


373 
	#__USE_LARGEFILE
 1

	)

374 
	#__USE_LARGEFILE64
 1

	)

380 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

381 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

382 && 
deföed
 
	g__exã∫_ölöe


383 
	#__USE_EXTERN_INLINES
 1

	)

391 
	~<gnu/°ubs.h
>

	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 #ifde‡
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/linux/stddef.h

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
78
2217
/home/hx/fatcache/src/fc.c
/home/hx/fatcache/src/fc_array.c
/home/hx/fatcache/src/fc_array.h
/home/hx/fatcache/src/fc_client.c
/home/hx/fatcache/src/fc_client.h
/home/hx/fatcache/src/fc_connection.c
/home/hx/fatcache/src/fc_connection.h
/home/hx/fatcache/src/fc_core.c
/home/hx/fatcache/src/fc_core.h
/home/hx/fatcache/src/fc_event.c
/home/hx/fatcache/src/fc_event.h
/home/hx/fatcache/src/fc_item.c
/home/hx/fatcache/src/fc_item.h
/home/hx/fatcache/src/fc_itemx.c
/home/hx/fatcache/src/fc_itemx.h
/home/hx/fatcache/src/fc_log.c
/home/hx/fatcache/src/fc_log.h
/home/hx/fatcache/src/fc_mbuf.c
/home/hx/fatcache/src/fc_mbuf.h
/home/hx/fatcache/src/fc_memcache.c
/home/hx/fatcache/src/fc_memcache.h
/home/hx/fatcache/src/fc_message.c
/home/hx/fatcache/src/fc_message.h
/home/hx/fatcache/src/fc_queue.h
/home/hx/fatcache/src/fc_request.c
/home/hx/fatcache/src/fc_response.c
/home/hx/fatcache/src/fc_server.c
/home/hx/fatcache/src/fc_server.h
/home/hx/fatcache/src/fc_sha1.c
/home/hx/fatcache/src/fc_sha1.h
/home/hx/fatcache/src/fc_signal.c
/home/hx/fatcache/src/fc_signal.h
/home/hx/fatcache/src/fc_slab.c
/home/hx/fatcache/src/fc_slab.h
/home/hx/fatcache/src/fc_string.c
/home/hx/fatcache/src/fc_string.h
/home/hx/fatcache/src/fc_time.c
/home/hx/fatcache/src/fc_time.h
/home/hx/fatcache/src/fc_util.c
/home/hx/fatcache/src/fc_util.h
/usr/include/arpa/inet.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/execinfo.h
/usr/include/fcntl.h
/usr/include/getopt.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/linux/fs.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/netinet/tcp.h
/usr/include/pthread.h
/usr/include/pwd.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/libio.h
/usr/include/linux/ioctl.h
/usr/include/linux/limits.h
/usr/include/linux/types.h
/usr/include/rpc/netdb.h
/usr/include/sched.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/linux/posix_types.h
/usr/include/stdc-predef.h
/usr/include/gconv.h
/usr/include/linux/stddef.h
/usr/include/wchar.h
/usr/include/wctype.h
